df_PSA_ellipse_TOTAL <- df_PSA_ellipse_TOTAL %>% mutate(Scenario = "Societal Perspective")
### Health sector perspective ###
# MMS
df_incremental_PSA_MMS_HEALTH_SECTOR_6mo <- df_incremental_PSA_MMS_comb %>% as_tibble() %>% mutate(inc_qalys_MMS_6mo = n_inc_qalys_TOTAL_6mo,
inc_costs_MMS_6mo = n_inc_costs_HEALTH_SECTOR_6mo) %>% select(inc_qalys_MMS_6mo, inc_costs_MMS_6mo)
df_incremental_PSA_MMS_HEALTH_SECTOR_life <- df_incremental_PSA_MMS_comb %>% as_tibble() %>% mutate(inc_qalys_MMS_life = n_inc_qalys_TOTAL_life,
inc_costs_MMS_life = n_inc_costs_HEALTH_SECTOR_life) %>% select(inc_qalys_MMS_life, inc_costs_MMS_life)
# Combine
df_PSA_ellipse_HEALTH_SECTOR <- cbind(df_incremental_PSA_MMS_HEALTH_SECTOR_6mo, df_incremental_PSA_MMS_HEALTH_SECTOR_life)
df_PSA_ellipse_HEALTH_SECTOR <- df_PSA_ellipse_HEALTH_SECTOR %>% mutate(Scenario = "Health Sector Perspective")
# Combine all
df_PSA_ellipse <- rbind(df_PSA_ellipse_TOTAL, df_PSA_ellipse_HEALTH_SECTOR)
df_PSA_points_temp <- df_PSA_ellipse %>% as_tibble() %>% rename(qalys.6mo = inc_qalys_MMS_6mo,
qalys.life = inc_qalys_MMS_life,
costs.6mo = inc_costs_MMS_6mo,
costs.life = inc_costs_MMS_life) %>% mutate(ID = row_number())
df_PSA_points_qalys <- df_PSA_points_temp %>% select(ID, Scenario, qalys.6mo, qalys.life)
df_PSA_points_qalys_long <- reshape(df_PSA_points_qalys, direction = 'long',
varying = c('qalys.6mo', 'qalys.life'),
timevar = 'var',
times = c('6mo', 'life'),
v.names = 'qalys',
idvar = c('ID', 'Scenario'))
df_PSA_points_costs <- df_PSA_points_temp %>% select(ID, Scenario, costs.6mo, costs.life)
df_PSA_points_costs_long <- reshape(df_PSA_points_costs, direction = 'long',
varying = c('costs.6mo', 'costs.life'),
timevar = 'var',
times = c('6mo', 'life'),
v.names = 'costs',
idvar = c('ID', 'Scenario'))
df_PSA_points <- bind_cols(df_PSA_points_qalys_long, df_PSA_points_costs_long, .name_repair = "minimal")
df_PSA_points <- inner_join(df_PSA_points_qalys_long, df_PSA_points_costs_long, by = c('ID', 'var', 'Scenario')) %>%
mutate(index = ifelse(Scenario == "Societal Perspective" & var == "6mo", "Societal (6-month)",
ifelse(Scenario == "Societal Perspective" & var == "life", "Societal (Lifetime)",
ifelse (Scenario == "Health Sector Perspective" & var == "6mo", "Health Sector (6-month)", "Health Sector (Lifetime)"))))
plot_PSA_ellipse <- ggplot() +
# Points (all scenarios and time horizons)
geom_point(data = df_PSA_points, aes(x = qalys, y = costs, colour = index), alpha = 0.4, size = 1) +
# Ellipses (Societal)
# MMS (6-month)
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = 2, color = "white", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# MMS (Lifetime)
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = 2, color = "#000000", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# Ellipses (Health sector)
# MMS (6-month)
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = 2, color = "white", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# MMS (Lifetime)
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = 2, color = "#000000", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# Add labels
#annotate("text", x =  0.05, y = 25000, label = "Six-month \n Time-horizon", fontface = "bold", size = 3) +
#annotate("text", x = -0.15, y = 45000, label = "Lifetime \n Time-horizon", fontface = "bold", size = 3) +
annotate("text", x =  -0.47, y = -60000, label = "ICER: \n $100,000/QALY", size = 3) +
geom_vline(xintercept = 0, linetype = "solid", color = "black", size = 1.0) +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = 1.0) +
geom_abline(slope = 100000, intercept = 0) +
labs(y = "Incremental costs (BNX vs. MET)", x = "Incremental QALYs (BNX vs. MET)") +
xlim(-0.5, 0.1) +
scale_y_continuous(labels = scales::dollar_format(scale = .001, suffix = "K"), limits = c(-100000, 100000)) +
scale_color_manual(name = '',
breaks = c('Societal (6-month)', 'Health Sector (6-month)', 'Societal (Lifetime)', 'Health Sector (Lifetime)'),
values = c('Societal (6-month)' = "#313695", 'Health Sector (6-month)' = "#f46d43", 'Societal (Lifetime)' = "#2166ac", 'Health Sector (Lifetime)' = "#d7191c")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
plot.title = element_text(hjust=0.02, vjust=-7),
legend.position = "bottom",
text = element_text(size = 5))
plot_PSA_ellipse
# Output full plot
ggsave(plot_PSA_ellipse,
filename = "Plots/PSA/PSA-Ellipse.png",
width = 10, height = 7, dpi = 350)
plot_PSA_ellipse <- ggplot() +
# Points (all scenarios and time horizons)
geom_point(data = df_PSA_points, aes(x = qalys, y = costs, colour = index), alpha = 0.4, size = 1) +
# Ellipses (Societal)
# MMS (6-month)
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = 2, color = "white", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# MMS (Lifetime)
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = 2, color = "#000000", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# Ellipses (Health sector)
# MMS (6-month)
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = 2, color = "white", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# MMS (Lifetime)
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = 2, color = "#000000", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# Add labels
#annotate("text", x =  0.05, y = 25000, label = "Six-month \n Time-horizon", fontface = "bold", size = 3) +
#annotate("text", x = -0.15, y = 45000, label = "Lifetime \n Time-horizon", fontface = "bold", size = 3) +
annotate("text", x =  -0.47, y = -60000, label = "ICER: \n $100,000/QALY", size = 3) +
geom_vline(xintercept = 0, linetype = "solid", color = "black", size = 1.0) +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = 1.0) +
geom_abline(slope = 100000, intercept = 0) +
labs(y = "Incremental costs (BNX vs. MET)", x = "Incremental QALYs (BNX vs. MET)") +
xlim(-0.5, 0.1) +
scale_y_continuous(labels = scales::dollar_format(scale = .001, suffix = "K"), limits = c(-100000, 100000)) +
scale_color_manual(name = '',
breaks = c('Societal (6-month)', 'Health Sector (6-month)', 'Societal (Lifetime)', 'Health Sector (Lifetime)'),
values = c('Societal (6-month)' = "#313695", 'Health Sector (6-month)' = "#f46d43", 'Societal (Lifetime)' = "#2166ac", 'Health Sector (Lifetime)' = "#d7191c")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
plot.title = element_text(hjust=0.02, vjust=-7),
legend.position = "bottom",
text = element_text(size = 20))
plot_PSA_ellipse
# Output full plot
ggsave(plot_PSA_ellipse,
filename = "Plots/PSA/PSA-Ellipse.png",
width = 10, height = 7, dpi = 350)
plot_PSA_ellipse <- ggplot() +
# Points (all scenarios and time horizons)
geom_point(data = df_PSA_points, aes(x = qalys, y = costs, colour = index), alpha = 0.4, size = 1) +
# Ellipses (Societal)
# MMS (6-month)
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = 2, color = "white", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# MMS (Lifetime)
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = 2, color = "#000000", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# Ellipses (Health sector)
# MMS (6-month)
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = 2, color = "white", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# MMS (Lifetime)
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = 2, color = "#000000", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# Add labels
#annotate("text", x =  0.05, y = 25000, label = "Six-month \n Time-horizon", fontface = "bold", size = 3) +
#annotate("text", x = -0.15, y = 45000, label = "Lifetime \n Time-horizon", fontface = "bold", size = 3) +
annotate("text", x =  -0.47, y = -60000, label = "ICER: \n $100,000/QALY", size = 3) +
geom_vline(xintercept = 0, linetype = "solid", color = "black", size = 1.0) +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = 1.0) +
geom_abline(slope = 100000, intercept = 0) +
labs(y = "Incremental costs (BNX vs. MET)", x = "Incremental QALYs (BNX vs. MET)") +
xlim(-0.5, 0.1) +
scale_y_continuous(labels = scales::dollar_format(scale = .001, suffix = "K"), limits = c(-100000, 100000)) +
scale_color_manual(name = '',
breaks = c('Societal (6-month)', 'Health Sector (6-month)', 'Societal (Lifetime)', 'Health Sector (Lifetime)'),
values = c('Societal (6-month)' = "#313695", 'Health Sector (6-month)' = "#f46d43", 'Societal (Lifetime)' = "#2166ac", 'Health Sector (Lifetime)' = "#d7191c")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
plot.title = element_text(hjust=0.02, vjust=-7),
legend.position = "bottom",
text = element_text(size = 10))
plot_PSA_ellipse
# Output full plot
ggsave(plot_PSA_ellipse,
filename = "Plots/PSA/PSA-Ellipse.png",
width = 10, height = 7, dpi = 350)
plot_PSA_ellipse <- ggplot() +
# Points (all scenarios and time horizons)
geom_point(data = df_PSA_points, aes(x = qalys, y = costs, colour = index), alpha = 0.4, size = 1) +
# Ellipses (Societal)
# MMS (6-month)
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = 2, color = "white", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# MMS (Lifetime)
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = 2, color = "#000000", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# Ellipses (Health sector)
# MMS (6-month)
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = 2, color = "white", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# MMS (Lifetime)
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = 2, color = "#000000", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# Add labels
#annotate("text", x =  0.05, y = 25000, label = "Six-month \n Time-horizon", fontface = "bold", size = 3) +
#annotate("text", x = -0.15, y = 45000, label = "Lifetime \n Time-horizon", fontface = "bold", size = 3) +
annotate("text", x =  -0.47, y = -60000, label = "ICER: \n $100,000/QALY", size = 3) +
geom_vline(xintercept = 0, linetype = "solid", color = "black", size = 1.0) +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = 1.0) +
geom_abline(slope = 100000, intercept = 0) +
labs(y = "Incremental costs (BNX vs. MET)", x = "Incremental QALYs (BNX vs. MET)") +
xlim(-0.5, 0.1) +
scale_y_continuous(labels = scales::dollar_format(scale = .001, suffix = "K"), limits = c(-100000, 100000)) +
scale_color_manual(name = '',
breaks = c('Societal (6-month)', 'Health Sector (6-month)', 'Societal (Lifetime)', 'Health Sector (Lifetime)'),
values = c('Societal (6-month)' = "#313695", 'Health Sector (6-month)' = "#f46d43", 'Societal (Lifetime)' = "#2166ac", 'Health Sector (Lifetime)' = "#d7191c")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
plot.title = element_text(hjust=0.02, vjust=-7),
legend.position = "bottom",
text = element_text(size = 15))
plot_PSA_ellipse
# Output full plot
ggsave(plot_PSA_ellipse,
filename = "Plots/PSA/PSA-Ellipse.png",
width = 10, height = 7, dpi = 350)
plot_PSA_ellipse <- ggplot() +
# Points (all scenarios and time horizons)
geom_point(data = df_PSA_points, aes(x = qalys, y = costs, colour = index), alpha = 0.4, size = 1) +
# Ellipses (Societal)
# MMS (6-month)
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = 2, color = "white", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# MMS (Lifetime)
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = 2, color = "#000000", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# Ellipses (Health sector)
# MMS (6-month)
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = 2, color = "white", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# MMS (Lifetime)
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = 2, color = "#000000", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# Add labels
#annotate("text", x =  0.05, y = 25000, label = "Six-month \n Time-horizon", fontface = "bold", size = 3) +
#annotate("text", x = -0.15, y = 45000, label = "Lifetime \n Time-horizon", fontface = "bold", size = 3) +
annotate("text", x =  -0.47, y = -60000, label = "ICER: \n $100,000/QALY", size = 10) +
geom_vline(xintercept = 0, linetype = "solid", color = "black", size = 1.0) +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = 1.0) +
geom_abline(slope = 100000, intercept = 0) +
labs(y = "Incremental costs (BNX vs. MET)", x = "Incremental QALYs (BNX vs. MET)") +
xlim(-0.5, 0.1) +
scale_y_continuous(labels = scales::dollar_format(scale = .001, suffix = "K"), limits = c(-100000, 100000)) +
scale_color_manual(name = '',
breaks = c('Societal (6-month)', 'Health Sector (6-month)', 'Societal (Lifetime)', 'Health Sector (Lifetime)'),
values = c('Societal (6-month)' = "#313695", 'Health Sector (6-month)' = "#f46d43", 'Societal (Lifetime)' = "#2166ac", 'Health Sector (Lifetime)' = "#d7191c")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
plot.title = element_text(hjust=0.02, vjust=-7),
legend.position = "bottom",
text = element_text(size = 15))
plot_PSA_ellipse
# Output full plot
ggsave(plot_PSA_ellipse,
filename = "Plots/PSA/PSA-Ellipse.png",
width = 10, height = 7, dpi = 350)
plot_PSA_ellipse <- ggplot() +
# Points (all scenarios and time horizons)
geom_point(data = df_PSA_points, aes(x = qalys, y = costs, colour = index), alpha = 0.4, size = 1) +
# Ellipses (Societal)
# MMS (6-month)
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = 2, color = "white", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# MMS (Lifetime)
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = 2, color = "#000000", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# Ellipses (Health sector)
# MMS (6-month)
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = 2, color = "white", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# MMS (Lifetime)
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = 2, color = "#000000", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# Add labels
#annotate("text", x =  0.05, y = 25000, label = "Six-month \n Time-horizon", fontface = "bold", size = 3) +
#annotate("text", x = -0.15, y = 45000, label = "Lifetime \n Time-horizon", fontface = "bold", size = 3) +
annotate("text", x =  -0.47, y = -60000, label = "ICER: \n $100,000/QALY", size = 5) +
geom_vline(xintercept = 0, linetype = "solid", color = "black", size = 1.0) +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = 1.0) +
geom_abline(slope = 100000, intercept = 0) +
labs(y = "Incremental costs (BNX vs. MET)", x = "Incremental QALYs (BNX vs. MET)") +
xlim(-0.5, 0.1) +
scale_y_continuous(labels = scales::dollar_format(scale = .001, suffix = "K"), limits = c(-100000, 100000)) +
scale_color_manual(name = '',
breaks = c('Societal (6-month)', 'Health Sector (6-month)', 'Societal (Lifetime)', 'Health Sector (Lifetime)'),
values = c('Societal (6-month)' = "#313695", 'Health Sector (6-month)' = "#f46d43", 'Societal (Lifetime)' = "#2166ac", 'Health Sector (Lifetime)' = "#d7191c")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
plot.title = element_text(hjust=0.02, vjust=-7),
legend.position = "bottom",
text = element_text(size = 15))
plot_PSA_ellipse
# Output full plot
ggsave(plot_PSA_ellipse,
filename = "Plots/PSA/PSA-Ellipse.png",
width = 10, height = 7, dpi = 350)
plot_PSA_ellipse <- ggplot() +
# Points (all scenarios and time horizons)
geom_point(data = df_PSA_points, aes(x = qalys, y = costs, colour = index), alpha = 0.4, size = 1) +
# Ellipses (Societal)
# MMS (6-month)
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = 2, color = "white", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# MMS (Lifetime)
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = 2, color = "#000000", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_TOTAL, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# Ellipses (Health sector)
# MMS (6-month)
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = 2, color = "white", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_6mo, y = inc_costs_MMS_6mo), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# MMS (Lifetime)
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = 2, color = "#000000", size = 1, alpha = 1, level = 0.95) +
stat_ellipse(data = df_PSA_ellipse_HEALTH_SECTOR, aes(x = inc_qalys_MMS_life, y = inc_costs_MMS_life), linetype = "solid", color = "#869397", size = 1, alpha = 1, level = 0.5) +
# Add labels
#annotate("text", x =  0.05, y = 25000, label = "Six-month \n Time-horizon", fontface = "bold", size = 3) +
#annotate("text", x = -0.15, y = 45000, label = "Lifetime \n Time-horizon", fontface = "bold", size = 3) +
annotate("text", x =  -0.47, y = -60000, label = "ICER: \n $100,000/QALY", size = 4) +
geom_vline(xintercept = 0, linetype = "solid", color = "black", size = 1.0) +
geom_hline(yintercept = 0, linetype = "solid", color = "black", size = 1.0) +
geom_abline(slope = 100000, intercept = 0) +
labs(y = "Incremental costs (BNX vs. MET)", x = "Incremental QALYs (BNX vs. MET)") +
xlim(-0.5, 0.1) +
scale_y_continuous(labels = scales::dollar_format(scale = .001, suffix = "K"), limits = c(-100000, 100000)) +
scale_color_manual(name = '',
breaks = c('Societal (6-month)', 'Health Sector (6-month)', 'Societal (Lifetime)', 'Health Sector (Lifetime)'),
values = c('Societal (6-month)' = "#313695", 'Health Sector (6-month)' = "#f46d43", 'Societal (Lifetime)' = "#2166ac", 'Health Sector (Lifetime)' = "#d7191c")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
plot.title = element_text(hjust=0.02, vjust=-7),
legend.position = "bottom",
text = element_text(size = 15))
plot_PSA_ellipse
# Output full plot
ggsave(plot_PSA_ellipse,
filename = "Plots/PSA/PSA-Ellipse.png",
width = 10, height = 7, dpi = 350)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(data.table)
library(formattable)
library(tidyr)
library(RColorBrewer)
library(Rmisc)
library(grid)
library(gridExtra)
library(lattice)
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
source("Analysis/00_load_parameters.R")
load(file = "outputs/DSA/Modified Model Specification/df_threshold_MMS.RData")
# Prepare data for plotting
df_threshold_MMS <- df_threshold_MMS %>% mutate(perc_increase = as.numeric(v_threshold_rownames_MMS))
df_threshold_qalys_MMS <- df_threshold_MMS %>% select(perc_increase, n_inc_qalys_TOTAL_life, prov)
df_threshold_costs_MMS <- df_threshold_MMS %>% select(perc_increase, n_inc_costs_TOTAL_life, prov)
# MMS
# Incremental QALYs
plot_DSA_qalys_MMS_threshold <- ggplot(df_threshold_qalys_MMS, aes(x = perc_increase, y = n_inc_qalys_TOTAL_life, group = prov)) +
theme_bw() +
scale_fill_discrete(name = "Provincial Fentanyl Prevalence") +
theme(legend.title = element_blank(), legend.position = "bottom") +
geom_line(aes(color = prov), size = 1) +
scale_colour_brewer(palette = "RdYlBu") +
#scale_colour_viridis_d() +
geom_hline(yintercept = 0) +
#scale_x_continuous(labels = scales::percent) +
scale_x_continuous(labels = scales::label_number(accuracy = 1, suffix = "x"), limits = c(1, 5)) +
xlab("Increase in BNX Episode Duration") + ylab("Incremental QALYs (BNX vs. MET)") +
theme(text = element_text(size = 15))
plot_DSA_qalys_MMS_threshold
ggsave(plot_DSA_qalys_MMS_threshold,
filename = "Plots/DSA/Threshold SA/DSA-BNX-threshold-qalys-MMS.png",
width = 6, height = 6, dpi = 350)
# Incremental Costs
plot_DSA_costs_MMS_threshold <- ggplot(df_threshold_costs_MMS, aes(x = perc_increase, y = n_inc_costs_TOTAL_life, group = prov)) +
theme_bw() +
scale_fill_discrete(name = "Provincial Fentanyl Prevalence") +
theme(legend.position = "none") +
geom_line(aes(color = prov), size = 1) +
scale_colour_brewer(palette = "RdYlBu") +
#scale_color_manual(values = v_threshold_colours) +
geom_hline(yintercept = 0) +
scale_x_continuous(labels = scales::label_number(accuracy = 1, suffix = "x"), limits = c(1, 5)) +
scale_y_continuous(labels = scales::dollar_format(scale = .001, suffix = "K")) +
xlab("Increase in BNX Episode Duration") + ylab("Incremental Costs (BNX vs. MET)*") +
theme(text = element_text(size = 15))
plot_DSA_costs_MMS_threshold
ggsave(plot_DSA_costs_MMS_threshold,
filename = "Plots/DSA/Threshold SA/DSA-BNX-threshold-costs-MMS.png",
width = 6, height = 6, dpi = 350)
## Combined plot ##
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mylegend <- g_legend(plot_DSA_qalys_MMS_threshold)
plot_DSA_MMS_threshold_comb <- grid.arrange(arrangeGrob(plot_DSA_qalys_MMS_threshold + theme(legend.position = "none"),
plot_DSA_costs_MMS_threshold + theme(legend.position = "none"), nrow = 1),
mylegend, nrow = 2, heights = c(6, 1))
ggsave(plot_DSA_MMS_threshold_comb,
filename = "Plots/DSA/Threshold SA/DSA-BNX-threshold-combined-MMS.png",
width = 8, height = 6, dpi = 350)
# Combine scenarios
df_threshold_MMS <- bind_rows(list(df_threshold_CAN_MMS, df_threshold_BC_MMS, df_threshold_AB_MMS, df_threshold_ON_MMS, df_threshold_QC_MMS), .id = "scenario") %>%
mutate(prov = if_else(scenario == 1, "Canada (70%)",
if_else(scenario == 2, "BC (85%)",
if_else(scenario == 3, "Alberta (79%)",
if_else(scenario == 4, "Ontario (66%)",
if_else(scenario == 5, "Quebec (19%)", ""))))))
# Save outputs
## As .RData ##
save(df_threshold_MMS,
file = "outputs/DSA/Modified Model Specification/df_threshold_MMS.RData")
load(file = "outputs/DSA/Modified Model Specification/df_threshold_MMS.RData")
# Prepare data for plotting
df_threshold_MMS <- df_threshold_MMS %>% mutate(perc_increase = as.numeric(v_threshold_rownames_MMS))
df_threshold_qalys_MMS <- df_threshold_MMS %>% select(perc_increase, n_inc_qalys_TOTAL_life, prov)
View(df_threshold_MMS)
library(ggplot2)
library(scales)
library(dplyr)
#load data
df_testing_volumes <- read.csv("G:/My Drive/Work/LEM/LEM 2.0 - Testing Editorial/testing_volumes.csv", fileEncoding = 'UTF-8-BOM') %>% as_tibble() %>% filter(setting == "total")
library(ggplot2)
library(scales)
library(dplyr)
#load data
df_testing_volumes <- read.csv("G:/My Drive/Work/LEM/LEM 2.0 - Testing Editorial/testing_volumes.csv", fileEncoding = 'UTF-8-BOM') %>% as_tibble() %>% filter(setting == "total")
library(ggplot2)
library(scales)
library(dplyr)
#load data
df_testing_volumes <- read.csv("G:/My Drive/Work/LEM/LEM 2.0 - Testing Editorial/testing_volumes.csv", fileEncoding = 'UTF-8-BOM') %>% as_tibble() %>% filter(setting == "total")
library(ggplot2)
library(scales)
library(dplyr)
#load data
df_testing_volumes <- read.csv("G:/My Drive/Work/LEM/LEM 2.0 - Testing Editorial/testing_volumes.csv", fileEncoding = 'UTF-8-BOM') %>% as_tibble() %>% filter(setting == "total")
#load data
df_testing_volumes <- read.csv("G:/My Drive/Work/LEM/LEM 2.0 - Testing Editorial/testing_volumes.csv", fileEncoding = 'UTF-8-BOM') %>% as_tibble()
View(df_testing_volumes)
#load data
df_testing_volumes <- read.csv("G:/My Drive/Work/LEM/LEM 2.0 - Testing Editorial/testing_volumes.csv", fileEncoding = 'UTF-8-BOM') %>% as_tibble()
volume_colour <- "#69b3a2"
positivity_colour <- rgb(0.2, 0.6, 0.9, 1)
plot_test_volume_positivity <- ggplot(df_testing_volumes, aes(x = Year))  +
#geom_bar(aes(x = year, y = n_test_cdc_total), stat = "identity", fill = "tan1", colour = "sienna3") +
#geom_line(aes(x = year, y = n_test_pos_total), stat = "identity") +
theme_bw() +
geom_bar( aes(y = n_test_cdc_total), stat="identity", size=.1, fill = volume_colour, color="black", alpha=.4) +
geom_point(aes(y = n_test_pos_total * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = 'black') +
geom_line( aes(y = n_test_pos_total * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = positivity_colour) +
scale_x_continuous(breaks = c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020)) +
scale_y_continuous(
# Features of the first axis
name = "CDC-funded test volume (Number of tests)",
labels = scales::number_format(scale = .000001, suffix = "M"),
# Add a second axis and specify its features
sec.axis = sec_axis(~./(1.2 * (min(df_testing_volumes$transformation, na.rm = TRUE))), name = "Test positivity (newly diagnosed)",
breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0), labels = scales::number_format(accuracy = 0.1,suffix = "%"))
)
plot_test_volume_positivity
View(df_testing_volumes)
ggsave(plot_test_volume_positivity,
filename = "G:/My Drive/Work/LEM/LEM 2.0 - Testing Editorial/Plot/test-volume-positivity.png",
width = 6, height = 6, dpi = 350)
library(ggplot2)
library(scales)
library(ggplot2)
library(scales)
library(dplyr)
#load data
df_testing_volumes <- read.csv("G:/My Drive/Work/LEM/LEM 2.0 - Testing Editorial/testing_volumes_original.csv", fileEncoding = 'UTF-8-BOM') %>% as_tibble() %>% filter(setting == "total")
View(df_testing_volumes)
volume_colour <- "#69b3a2"
positivity_colour <- rgb(0.2, 0.6, 0.9, 1)
plot_test_volume_positivity <- ggplot(df_testing_volumes, aes(x = Year))  +
#geom_bar(aes(x = year, y = n_test_cdc_total), stat = "identity", fill = "tan1", colour = "sienna3") +
#geom_line(aes(x = year, y = n_test_pos_total), stat = "identity") +
theme_bw() +
geom_bar( aes(y = n_test_cdc), stat="identity", size=.1, fill = volume_colour, color="black", alpha=.4) +
geom_point(aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = 'black') +
geom_line( aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = positivity_colour) +
scale_x_continuous(breaks = c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020)) +
scale_y_continuous(
# Features of the first axis
name = "CDC-funded test volume (Number of tests)",
labels = scales::number_format(scale = .000001, suffix = "M"),
# Add a second axis and specify its features
sec.axis = sec_axis(~./(1.2 * (min(df_testing_volumes$transformation, na.rm = TRUE))), name = "Test positivity (newly diagnosed)",
breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0), labels = scales::number_format(accuracy = 0.1,suffix = "%"))
)
plot_test_volume_positivity
ggsave(plot_test_volume_positivity,
filename = "G:/My Drive/Work/LEM/LEM 2.0 - Testing Editorial/Plot/test-volume-positivity-original.png",
width = 6, height = 6, dpi = 350)
rm(list = ls()) # to clean the workspace
library(ggplot2)
library(scales)
library(dplyr)
#load data
#df_testing_volumes <- read.csv("G:/My Drive/Work/LEM/LEM 2.0 - Testing Editorial/testing_volumes_original.csv", fileEncoding = 'UTF-8-BOM') %>% as_tibble() %>% filter(setting == "total")
df_testing_volumes <- read.csv("G:/My Drive/Work/LEM/LEM 2.0 - Testing Editorial/testing_volumes_updated.csv", fileEncoding = 'UTF-8-BOM') %>% as_tibble() %>% filter(setting == "total")
View(df_testing_volumes)
volume_colour <- "#69b3a2"
positivity_colour <- rgb(0.2, 0.6, 0.9, 1)
plot_test_volume_positivity <- ggplot(df_testing_volumes, aes(x = Year))  +
#geom_bar(aes(x = year, y = n_test_cdc_total), stat = "identity", fill = "tan1", colour = "sienna3") +
#geom_line(aes(x = year, y = n_test_pos_total), stat = "identity") +
theme_bw() +
geom_bar( aes(y = n_test_cdc), stat="identity", size=.1, fill = volume_colour, color="black", alpha=.4) +
geom_point(aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = 'black') +
geom_line( aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = positivity_colour) +
scale_x_continuous(breaks = c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020)) +
scale_y_continuous(
# Features of the first axis
name = "CDC-funded test volume (Number of tests)",
labels = scales::number_format(scale = .000001, suffix = "M"),
# Add a second axis and specify its features
sec.axis = sec_axis(~./(1.2 * (min(df_testing_volumes$transformation, na.rm = TRUE))), name = "Test positivity (newly diagnosed)",
breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0), labels = scales::number_format(accuracy = 0.1,suffix = "%"))
)
plot_test_volume_positivity
ggsave(plot_test_volume_positivity,
filename = "G:/My Drive/Work/LEM/LEM 2.0 - Testing Editorial/Plot/test-volume-positivity-updated.png",
width = 6, height = 6, dpi = 350)
