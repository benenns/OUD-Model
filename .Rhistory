try <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T)
try2 <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T) * c(1, 0.5, 1)
# Calibration log-liklihood test
a <- c(0.0245, 0.0300, 0.0275)
b <- c(0.210, 0.210, 0.260)
model_res <- list(a = a,
b = b)
#  }, error = function(e) NA)
#  if(is.na(jj)) { v_llik_overall <- -Inf }
#} ## End loop over sampled parameter sets
## return GOF
x <- l_cali_targets$ODF$pe
test <- model_res$a
sd <- l_cali_targets$ODF$se
try <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T)
try2 <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T) * c(1, 0.5, 1)
#### Load calibration targets ####
l_cali_targets <- list(ODF = read.csv(file = "data/cali_target_odf.csv", header = TRUE),
ODN = read.csv(file = "data/cali_target_odn.csv", header = TRUE))
odf_weight <- l_cali_targets$ODF$weight
try <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T)
try2 <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T) * l_cali_targets$ODF$weight
odn_weight <- l_cali_targets$ODN$weight
try <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T)
try2 <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T) * l_cali_targets$ODN$weight
try2 <-    sum(dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T) * l_cali_targets$ODN$weight)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model with updated calibrated parameters
l_out_markov <- markov_model(l_params_all = l_params_all, cali = TRUE)
n_cali_max_per <- 3
# Run model with updated calibrated parameters
l_out_markov <- markov_model(l_params_all = l_params_all, cali = TRUE)
n_cali_max_per <- 36
# Run model with updated calibrated parameters
l_out_markov <- markov_model(l_params_all = l_params_all, cali = TRUE)
#### Epidemiological Output ####
### Overdose deaths ###
v_ODF <- l_out_markov$m_M_agg_trace[, "ODF"] # cumulative deaths at time i
### Non-fatal overdoses ###
v_ODN <- l_out_markov$m_M_agg_trace[, "ODN"] # cumulative non-fatal overdoses at time i
### Select time-points ###
### Overdose deaths ###
n_ODF_t1 <- l_cali_targets$ODF$Time[1]
n_ODF_t2 <- l_cali_targets$ODF$Time[2]
n_ODF_t3 <- l_cali_targets$ODF$Time[3]
### Non-fatal overdose ###
n_ODN_t1 <- l_cali_targets$ODN$Time[1]
n_ODN_t2 <- l_cali_targets$ODN$Time[2]
n_ODN_t3 <- l_cali_targets$ODN$Time[3]
### Subset output by time-points ###
### Overdose deaths ###
# Fatal overdoses already cumulative at each time point
#n_ODF1 <- v_ODF[n_ODF_t1]
#n_ODF2 <- v_ODF[n_ODF_t2]
#n_ODF3 <- v_ODF[n_ODF_t3]
# Yearly fatal overdoses (disaggregated)
n_ODF1 <- v_ODF[n_ODF_t1]
n_ODF2 <- v_ODF[n_ODF_t2] - v_ODF[n_ODF_t1]
n_ODF3 <- v_ODF[n_ODF_t3] - v_ODF[n_ODF_t2]
#### Load calibration targets ####
l_cali_targets <- list(ODF = read.csv(file = "data/cali_target_odf.csv", header = TRUE),
ODN = read.csv(file = "data/cali_target_odn.csv", header = TRUE))
# Max calibration periods
n_cali_max_per <- max(c(l_cali_targets$ODF$Time, l_cali_targets$ODN$Time))
# Run model with updated calibrated parameters
l_out_markov <- markov_model(l_params_all = l_params_all, cali = TRUE)
#### Epidemiological Output ####
### Overdose deaths ###
v_ODF <- l_out_markov$m_M_agg_trace[, "ODF"] # cumulative deaths at time i
### Non-fatal overdoses ###
v_ODN <- l_out_markov$m_M_agg_trace[, "ODN"] # cumulative non-fatal overdoses at time i
### Select time-points ###
### Overdose deaths ###
n_ODF_t1 <- l_cali_targets$ODF$Time[1]
n_ODF_t2 <- l_cali_targets$ODF$Time[2]
n_ODF_t3 <- l_cali_targets$ODF$Time[3]
### Non-fatal overdose ###
n_ODN_t1 <- l_cali_targets$ODN$Time[1]
n_ODN_t2 <- l_cali_targets$ODN$Time[2]
n_ODN_t3 <- l_cali_targets$ODN$Time[3]
# Yearly fatal overdoses (disaggregated)
n_ODF1 <- v_ODF[n_ODF_t1]
n_ODF2 <- v_ODF[n_ODF_t2] - v_ODF[n_ODF_t1]
n_ODF3 <- v_ODF[n_ODF_t3] - v_ODF[n_ODF_t2]
### Non-fatal overdose
# Non-fatal overdoses need to be summed across time points to generate cumulative estimates
#n_ODN1 <- sum(v_ODN[c(1:n_ODN_t1)])
#n_ODN2 <- sum(v_ODN[c(1:n_ODN_t2)])
#n_ODN3 <- sum(v_ODN[c(1:n_ODN_t3)])
# Yearly non-fatal overdose (disaggregated)
n_ODN1 <- sum(v_ODN[c(1:n_ODN_t1)])
n_ODN2 <- sum(v_ODN[c(13:n_ODN_t2)])
n_ODN3 <- sum(v_ODN[c(25:n_ODN_t3)])
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
#### Load calibration targets ####
l_cali_targets <- list(ODF = read.csv(file = "data/cali_target_odf.csv", header = TRUE),
ODN = read.csv(file = "data/cali_target_odn.csv", header = TRUE))
# Max calibration periods
n_cali_max_per <- max(c(l_cali_targets$ODF$Time, l_cali_targets$ODN$Time))
# Run model with updated calibrated parameters
l_out_markov <- markov_model(l_params_all = l_params_all, cali = TRUE)
#### Epidemiological Output ####
### Overdose deaths ###
v_ODF <- l_out_markov$m_M_agg_trace[, "ODF"] # cumulative deaths at time i
### Non-fatal overdoses ###
v_ODN <- l_out_markov$m_M_agg_trace[, "ODN"] # cumulative non-fatal overdoses at time i
### Select time-points ###
### Overdose deaths ###
n_ODF_t1 <- l_cali_targets$ODF$Time[1]
n_ODF_t2 <- l_cali_targets$ODF$Time[2]
n_ODF_t3 <- l_cali_targets$ODF$Time[3]
### Non-fatal overdose ###
n_ODN_t1 <- l_cali_targets$ODN$Time[1]
n_ODN_t2 <- l_cali_targets$ODN$Time[2]
n_ODN_t3 <- l_cali_targets$ODN$Time[3]
### Subset output by time-points ###
### Overdose deaths ###
# Fatal overdoses already cumulative at each time point
#n_ODF1 <- v_ODF[n_ODF_t1]
#n_ODF2 <- v_ODF[n_ODF_t2]
#n_ODF3 <- v_ODF[n_ODF_t3]
# Yearly fatal overdoses (disaggregated)
n_ODF1 <- v_ODF[n_ODF_t1]
n_ODF2 <- v_ODF[n_ODF_t2] - v_ODF[n_ODF_t1]
n_ODF3 <- v_ODF[n_ODF_t3] - v_ODF[n_ODF_t2]
### Non-fatal overdose
# Non-fatal overdoses need to be summed across time points to generate cumulative estimates
#n_ODN1 <- sum(v_ODN[c(1:n_ODN_t1)])
#n_ODN2 <- sum(v_ODN[c(1:n_ODN_t2)])
#n_ODN3 <- sum(v_ODN[c(1:n_ODN_t3)])
# Yearly non-fatal overdose (disaggregated)
n_ODN1 <- sum(v_ODN[c(1:n_ODN_t1)])
n_ODN2 <- sum(v_ODN[c(13:n_ODN_t2)])
n_ODN3 <- sum(v_ODN[c(25:n_ODN_t3)])
#### Return Output ####
l_out <- list(fatal_overdose = c(n_ODF1, n_ODF2, n_ODF3), # deaths at t1, t2 , t3 time periods (for yearly deaths: (i + 12) - i where i = first month of year, 1 + 12 = last month)
overdose = c(n_ODN1, n_ODN2, n_ODN3))
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
#### Load calibration targets ####
l_cali_targets <- list(ODF = read.csv(file = "data/cali_target_odf.csv", header = TRUE),
ODN = read.csv(file = "data/cali_target_odn.csv", header = TRUE))
# Max calibration periods
n_cali_max_per <- max(c(l_cali_targets$ODF$Time, l_cali_targets$ODN$Time))
# Run model with updated calibrated parameters
l_out_markov <- markov_model(l_params_all = l_params_all, cali = TRUE)
#### Epidemiological Output ####
### Overdose deaths ###
v_ODF <- l_out_markov$m_M_agg_trace[, "ODF"] # cumulative deaths at time i
### Non-fatal overdoses ###
v_ODN <- l_out_markov$m_M_agg_trace[, "ODN"] # cumulative non-fatal overdoses at time i
### Select time-points ###
### Overdose deaths ###
n_ODF_t1 <- l_cali_targets$ODF$Time[1]
n_ODF_t2 <- l_cali_targets$ODF$Time[2]
n_ODF_t3 <- l_cali_targets$ODF$Time[3]
### Non-fatal overdose ###
n_ODN_t1 <- l_cali_targets$ODN$Time[1]
n_ODN_t2 <- l_cali_targets$ODN$Time[2]
n_ODN_t3 <- l_cali_targets$ODN$Time[3]
### Subset output by time-points ###
### Overdose deaths ###
# Fatal overdoses already cumulative at each time point
#n_ODF1 <- v_ODF[n_ODF_t1]
#n_ODF2 <- v_ODF[n_ODF_t2]
#n_ODF3 <- v_ODF[n_ODF_t3]
# Yearly fatal overdoses (disaggregated)
n_ODF1 <- v_ODF[n_ODF_t1]
n_ODF2 <- v_ODF[n_ODF_t2] - v_ODF[n_ODF_t1]
n_ODF3 <- v_ODF[n_ODF_t3] - v_ODF[n_ODF_t2]
### Non-fatal overdose
# Non-fatal overdoses need to be summed across time points to generate cumulative estimates
#n_ODN1 <- sum(v_ODN[c(1:n_ODN_t1)])
#n_ODN2 <- sum(v_ODN[c(1:n_ODN_t2)])
#n_ODN3 <- sum(v_ODN[c(1:n_ODN_t3)])
# Yearly non-fatal overdose (disaggregated)
n_ODN1 <- sum(v_ODN[c(1:n_ODN_t1)])
n_ODN2 <- sum(v_ODN[c(13:n_ODN_t2)])
n_ODN3 <- sum(v_ODN[c(25:n_ODN_t3)])
#### Return Output ####
l_out <- list(fatal_overdose = c(n_ODF1, n_ODF2, n_ODF3), # deaths at t1, t2 , t3 time periods (for yearly deaths: (i + 12) - i where i = first month of year, 1 + 12 = last month)
overdose = c(n_ODN1, n_ODN2, n_ODN3))
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
#library(xlsx)
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
# Calibrated parameter values
load(file = "outputs/imis_output.RData")
# All parameters
# BNX scenario (primary model definition)
l_params_BUP <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_bup.csv", # Change initial distributions (100% in BUP)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
#file.weibull_scale = "data/weibull_scale.csv",
#file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Methadone scenario (primary model definition)
l_params_MET <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_met.csv", # Change initial distributions (100% in MET)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
#file.weibull_scale = "data/weibull_scale.csv",
#file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
### Main deterministic model outputs ###
# Run Markov model and return outputs (using MAP point estimates from posterior distribution for calibrated params)
l_outcomes_MET <- outcomes(l_params_all = l_params_MET, v_params_calib = v_calib_post_map)
l_outcomes_BUP <- outcomes(l_params_all = l_params_BUP, v_params_calib = v_calib_post_map)
# Calculate ICERs
ICER <- ICER(outcomes_comp = l_outcomes_MET, outcomes_int = l_outcomes_BUP)
#### OUTPUT RESULTS ####
# Full model trace
write.csv(l_outcomes_MET$m_M_trace,"outputs/trace/trace_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP$m_M_trace,"outputs/trace/trace_BUP.csv", row.names = TRUE)
# Full model costs
write.csv(l_outcomes_MET$m_TOTAL_costs_states,"outputs/trace/full_trace_costs_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP$m_TOTAL_costs_states,"outputs/trace/full_trace_costs_BUP.csv", row.names = TRUE)
# Outcomes
# Disaggregated
df_outcomes <- rbind(l_outcomes_BUP$df_outcomes, l_outcomes_MET$df_outcomes)
rownames(df_outcomes) <- c("Early take-home BNX", "Methadone")
#df_outcomes <- df_outcomes %>% rename("Early take-home BNX" = l_outcomes_BUP.df_outcomes, "Methadone" = l_outcomes_MET.df_outcomes)
# ICER
df_icer <- ICER$df_icer#data.frame(ICER$v_icer)
rownames(df_icer) <- c("Early take-home BNX vs. Methadone")
#df_icer <- df_icer %>% rename("Early take-home BNX vs. Methadone" = ICER.v_icer)
# Output
write.csv(df_outcomes,"outputs/main_output_det.csv", row.names = TRUE)
write.csv(df_icer,"outputs/icer_det.csv", row.names = TRUE)
# Raw outputs
# Costs
write.csv(l_outcomes_MET$v_costs,"outputs/costs/costs_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP$v_costs,"outputs/costs/costs_BUP.csv", row.names = TRUE)
# Treatment
write.csv(l_outcomes_MET$m_TX_costs,"outputs/costs/tx_costs_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP$m_TX_costs,"outputs/costs/tx_costs_BUP.csv", row.names = TRUE)
# Health sector
write.csv(l_outcomes_MET$m_HRU_costs,"outputs/costs/hru_costs_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP$m_HRU_costs,"outputs/costs/hru_costs_BUP.csv", row.names = TRUE)
# Crime
write.csv(l_outcomes_MET$m_crime_costs,"outputs/costs/crime_costs_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP$m_crime_costs,"outputs/costs/crime_costs_BUP.csv", row.names = TRUE)
# QALYs
write.csv(l_outcomes_MET$v_qalys,"outputs/qalys/qalys_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP$v_qalys,"outputs/qalys/qalys_BUP.csv", row.names = TRUE)
# ICER
write.csv(ICER$v_icer,"outputs/ICER/ICER.csv", row.names = TRUE)
write.csv(df_icer,"outputs/ICER/icer_det.csv", row.names = TRUE)
View(df_outcomes)
Sys.Date()
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# BNX scenario
l_params_BUP <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_bup.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Methadone scenario
l_params_MET <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_met.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = FALSE)
l_out_markov_BUP  <- markov_model(l_params_all = l_params_BUP, err_stop = FALSE, verbose = TRUE, checks = FALSE)
l_out_markov_MET  <- markov_model(l_params_all = l_params_MET, err_stop = FALSE, verbose = TRUE, checks = FALSE)
#### Create plots ####
l_trace_base <- trace_plots(outcomes = l_out_markov_base)
l_trace_BUP  <- trace_plots(outcomes = l_out_markov_BUP)
l_trace_MET  <- trace_plots(outcomes = l_out_markov_MET)
### Outputs ###
# Model 1 (Modified model specification)
# Health state trace
# Base
#pdf("Plots/Markov Trace/Modified Model Spec/trace_states_base.pdf", width = 8, height = 6)
#l_trace_base[[1]]
#dev.off()
# Serostatus trace
# Base
pdf("Plots/Markov Trace/Modified Model Spec/trace_sero_base.pdf", width = 8, height = 6)
l_trace_base[[2]]
dev.off()
# BUP
pdf("Plots/Markov Trace/Modified Model Spec/trace_sero_BUP.pdf", width = 8, height = 6)
l_trace_BUP[[2]]
dev.off()
# MET
pdf("Plots/Markov Trace/Modified Model Spec/trace_sero_MET.pdf", width = 8, height = 6)
l_trace_MET[[2]]
dev.off()
# Health state time
# Base
#pdf(file = "Plots/Markov Trace/Modified Model Spec/time_states_base.pdf", width = 8, height = 3)
#l_trace_base[[3]]
#dev.off()
# Health state trace + time
# Base
pdf(file = "Plots/Markov Trace/Modified Model Spec/full_trace_base.pdf", width = 8, height = 9)
multiplot(plotlist = l_trace_base[[4]], layout = l_trace_base[[5]])
dev.off()
# BUP
pdf(file = "Plots/Markov Trace/Modified Model Spec/full_trace_BUP.pdf", width = 8, height = 9)
multiplot(plotlist = l_trace_BUP[[4]], layout = l_trace_BUP[[5]])
dev.off()
# MET
pdf(file = "Plots/Markov Trace/Modified Model Spec/full_trace_MET.pdf", width = 8, height = 9)
multiplot(plotlist = l_trace_MET[[4]], layout = l_trace_MET[[5]])
dev.off()
