# Calculate ICER (societal and health sector perspective)
l_ICER_MMS <- ICER(outcomes_comp = l_outcomes_MET_MMS, outcomes_int = l_outcomes_BUP_MMS)
df_incremental_PSA_MMS <- rbind(df_incremental_PSA_MMS, l_ICER_MMS$df_incremental)
df_ICER_PSA_MMS <- rbind(df_ICER_PSA_MMS, l_ICER_MMS$df_icer)
}},
"PSA - Multi Core" = {foreach(i = 1:n_sim, .combine = combine_custom_i, .packages = 'tidyr') %dopar% {
# Update parameter set for each scenario with next set of PSA drawn parameters
l_psa_input_MET_MMS <- update_param_list(l_params_all = l_params_MET_MMS, params_updated = df_psa_params_MMS[i, ])
l_psa_input_BUP_MMS <- update_param_list(l_params_all = l_params_BUP_MMS, params_updated = df_psa_params_MMS[i, ])
# Run model and generate outputs
l_outcomes_MET_MMS <- outcomes(l_params_all = l_psa_input_MET_MMS, v_params_calib = v_calib_post_map, PSA = TRUE)
l_outcomes_BUP_MMS <- outcomes(l_params_all = l_psa_input_BUP_MMS, v_params_calib = v_calib_post_map, PSA = TRUE)
# Extract cost and QALY outputs
df_outcomes_MET_PSA_MMS <- l_outcomes_MET_MMS$df_outcomes
df_outcomes_BUP_PSA_MMS <- l_outcomes_BUP_MMS$df_outcomes
# Calculate ICER (societal and health sector perspective)
l_ICER_MMS <- ICER(outcomes_comp = l_outcomes_MET_MMS, outcomes_int = l_outcomes_BUP_MMS)
df_incremental_PSA_MMS <- l_ICER_MMS$df_incremental
df_ICER_PSA_MMS <- l_ICER_MMS$df_icer
return(list(df_outcomes_MET_PSA_MMS = df_outcomes_MET_PSA_MMS,
df_outcomes_BUP_PSA_MMS = df_outcomes_BUP_PSA_MMS,
df_incremental_PSA_MMS = df_incremental_PSA_MMS,
df_ICER_PSA_MMS = df_ICER_PSA_MMS))}},
times = 2)
unregister_dopar()
#stopImplicitCluster()
#stopCluster(cl)
plot_PSA <- autoplot(df_model_benchmark_PSA)
ggsave(plot_PSA,
filename = "Plots/Benchmark/model_benchmark_PSA.png",
width = 10, height = 7)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(scales)   # for dollar signs and commas
library(dampack)  # for CEA and calculate ICERs
library(tidyverse)
library(rbenchmark)
library(microbenchmark)
library(tictoc)
library(rBeta2009)
library(parallel)
library(foreach)
library(doParallel)
library(parallelly)
library(tidyr)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/calibration_functions.R")
source("R/ICER_functions.R")
source("R/generate_psa_parameters.R")
# Load parameters
# Load parameters
source("Analysis/00_load_parameters.R")
#n_cores <- detectCores()
#n_cores <- 4
#registerDoParallel(n_cores)
n_cores <- availableCores()
cl <- parallelly::makeClusterPSOCK(10, autoStop = TRUE, dryrun = TRUE, quiet = TRUE, validate = TRUE, verbose = TRUE)
cl
#cl <- makeCluster((cores/2), type = type)
#registerDoParallel(cl)
getDoParRegistered()
availableWorkers()
availableCores()
#cl <- makeCluster((cores/2), type = type)
registerDoParallel(cl)
getDoParRegistered()
availableWorkers()
availableCores()
print(isNodeAlive(cl))
unregister_dopar <- function() {
env <- foreach:::.foreachGlobals
rm(list=ls(name=env), pos=env)
}
# Set up parallel
#
unregister_dopar() # clear any clusters
getDoParRegistered()
cl <- parallelly::makeClusterPSOCK(10)
#cl <- makeCluster((cores/2), type = type)
registerDoParallel(cl)
getDoParRegistered()
availableWorkers()
availableCores()
print(isNodeAlive(cl))
warnings()
# Set up parallel
#
unregister_dopar() # clear any clusters
getDoParRegistered()
# Set up parallel
#
unregister_dopar() # clear any clusters
#getDoParRegistered()
#n_cores <- detectCores()
#n_cores <- 4
#registerDoParallel(n_cores)
n_cores <- availableCores()
#cl <- parallelly::makeClusterPSOCK(10, autoStop = TRUE, dryrun = TRUE, quiet = TRUE, validate = TRUE, verbose = TRUE)
cl <- parallelly::makeClusterPSOCK(10)
#cl <- makeCluster((cores/2), type = type)
registerDoParallel(cl)
getDoParRegistered()
availableWorkers()
availableCores()
print(isNodeAlive(cl))
getDoParRegistered()
availableWorkers()
availableCores()
# Set up parallel
#
unregister_dopar() # clear any clusters
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(scales)   # for dollar signs and commas
library(dampack)  # for CEA and calculate ICERs
library(tidyverse)
library(rbenchmark)
library(microbenchmark)
library(tictoc)
library(rBeta2009)
library(parallel)
library(foreach)
library(doParallel)
library(parallelly)
library(tidyr)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/calibration_functions.R")
source("R/ICER_functions.R")
source("R/generate_psa_parameters.R")
# Load parameters
# Load parameters
source("Analysis/00_load_parameters.R")
# Stop clustering (stopCluster function doesn't always work with Windows)
unregister_dopar <- function() {
env <- foreach:::.foreachGlobals
rm(list=ls(name=env), pos=env)
}
# Set up parallel
#
unregister_dopar() # clear any clusters
getDoParRegistered()
#getDoParRegistered()
#n_cores <- detectCores()
#n_cores <- 4
#registerDoParallel(n_cores)
n_cores <- availableCores()
#cl <- parallelly::makeClusterPSOCK(10, autoStop = TRUE, dryrun = TRUE, quiet = TRUE, validate = TRUE, verbose = TRUE)
cl <- parallelly::makeClusterPSOCK(10)
#cl <- makeCluster((cores/2), type = type)
registerDoParallel(cl)
getDoParRegistered()
availableWorkers()
availableCores()
print(isNodeAlive(cl))
# Set population size for dirichlet draws
n_pop_cohort <- 29000
n_pop_trial  <- 272
n_sim <- 10 # just to test function (will be set as n_sim)
df_psa_params_MMS <- generate_psa_params(n_sim = n_sim, seed = 3730687, n_pop = n_pop_trial, scenario = "MMS",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Modified Model Specification/weibull.csv",
file.unconditional = "data/Modified Model Specification/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Modified Model Specification/costs.csv",
file.crime_costs = "data/Modified Model Specification/crime_costs.csv",
file.qalys = "data/Modified Model Specification/qalys.csv",
file.imis_output = "outputs/Calibration/imis_output.RData")
df_outcomes_MET_PSA_MMS <- data.frame()
df_outcomes_BUP_PSA_MMS <- data.frame()
df_incremental_PSA_MMS <- data.frame()
df_ICER_PSA_MMS <- data.frame()
combine_custom_i <- function(LL1, LL2) {
df_outcomes_MET_PSA_MMS <- rbind(LL1$df_outcomes_MET_PSA_MMS, LL2$df_outcomes_MET_PSA_MMS)
df_outcomes_BUP_PSA_MMS <- rbind(LL1$df_outcomes_BUP_PSA_MMS, LL2$df_outcomes_BUP_PSA_MMS)
df_incremental_PSA_MMS  <- rbind(LL1$df_incremental_PSA_MMS, LL2$df_incremental_PSA_MMS)
df_ICER_PSA_MMS <- rbind(LL1$df_ICER_PSA_MMS, LL2$df_ICER_PSA_MMS)
return(list(df_outcomes_MET_PSA_MMS = df_outcomes_MET_PSA_MMS,
df_outcomes_BUP_PSA_MMS = df_outcomes_BUP_PSA_MMS,
df_incremental_PSA_MMS = df_incremental_PSA_MMS,
df_ICER_PSA_MMS = df_ICER_PSA_MMS))
}
df_model_benchmark_PSA <- microbenchmark("PSA - Single Core" = {for (i in 1:n_sim){
# Update parameter set for each scenario with next set of PSA drawn parameters
l_psa_input_MET_MMS <- update_param_list(l_params_all = l_params_MET_MMS, params_updated = df_psa_params_MMS[i, ])
l_psa_input_BUP_MMS <- update_param_list(l_params_all = l_params_BUP_MMS, params_updated = df_psa_params_MMS[i, ])
# Run model and generate outputs
l_outcomes_MET_MMS <- outcomes(l_params_all = l_psa_input_MET_MMS, v_params_calib = v_calib_post_map, PSA = TRUE)
l_outcomes_BUP_MMS <- outcomes(l_params_all = l_psa_input_BUP_MMS, v_params_calib = v_calib_post_map, PSA = TRUE)
# Extract cost and QALY outputs
df_outcomes_MET_PSA_MMS <- rbind(df_outcomes_MET_PSA_MMS, l_outcomes_MET_MMS$df_outcomes)
df_outcomes_BUP_PSA_MMS <- rbind(df_outcomes_BUP_PSA_MMS, l_outcomes_BUP_MMS$df_outcomes)
# Calculate ICER (societal and health sector perspective)
l_ICER_MMS <- ICER(outcomes_comp = l_outcomes_MET_MMS, outcomes_int = l_outcomes_BUP_MMS)
df_incremental_PSA_MMS <- rbind(df_incremental_PSA_MMS, l_ICER_MMS$df_incremental)
df_ICER_PSA_MMS <- rbind(df_ICER_PSA_MMS, l_ICER_MMS$df_icer)
}},
"PSA - Multi Core" = {foreach(i = 1:n_sim, .combine = combine_custom_i, .packages = 'tidyr') %dopar% {
# Update parameter set for each scenario with next set of PSA drawn parameters
l_psa_input_MET_MMS <- update_param_list(l_params_all = l_params_MET_MMS, params_updated = df_psa_params_MMS[i, ])
l_psa_input_BUP_MMS <- update_param_list(l_params_all = l_params_BUP_MMS, params_updated = df_psa_params_MMS[i, ])
# Run model and generate outputs
l_outcomes_MET_MMS <- outcomes(l_params_all = l_psa_input_MET_MMS, v_params_calib = v_calib_post_map, PSA = TRUE)
l_outcomes_BUP_MMS <- outcomes(l_params_all = l_psa_input_BUP_MMS, v_params_calib = v_calib_post_map, PSA = TRUE)
# Extract cost and QALY outputs
df_outcomes_MET_PSA_MMS <- l_outcomes_MET_MMS$df_outcomes
df_outcomes_BUP_PSA_MMS <- l_outcomes_BUP_MMS$df_outcomes
# Calculate ICER (societal and health sector perspective)
l_ICER_MMS <- ICER(outcomes_comp = l_outcomes_MET_MMS, outcomes_int = l_outcomes_BUP_MMS)
df_incremental_PSA_MMS <- l_ICER_MMS$df_incremental
df_ICER_PSA_MMS <- l_ICER_MMS$df_icer
return(list(df_outcomes_MET_PSA_MMS = df_outcomes_MET_PSA_MMS,
df_outcomes_BUP_PSA_MMS = df_outcomes_BUP_PSA_MMS,
df_incremental_PSA_MMS = df_incremental_PSA_MMS,
df_ICER_PSA_MMS = df_ICER_PSA_MMS))}},
times = 2)
unregister_dopar()
#stopImplicitCluster()
#stopCluster(cl)
plot_PSA <- autoplot(df_model_benchmark_PSA)
ggsave(plot_PSA,
filename = "Plots/Benchmark/model_benchmark_PSA.png",
width = 10, height = 7)
warnings()
getDoParRegistered()
availableWorkers()
availableCores()
print(isNodeAlive(cl))
library(dplyr)    # to manipulate data
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
# Load parameters
# Calibrated parameter values
load(file = "outputs/Calibration/imis_output.RData")
######################################
#### Modified Model Specification ####
######################################
# BNX scenario
l_params_BUP_MMS <- load_all_params(file.init = "data/Modified Model Specification/init_params.csv",
file.init_dist = "data/init_dist_bup.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Modified Model Specification/weibull.csv",
file.unconditional = "data/Modified Model Specification/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.naloxone = "data/naloxone.csv",### R&R MODIFICATION ###
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Modified Model Specification/costs.csv",
file.crime_costs = "data/Modified Model Specification/crime_costs.csv",
file.qalys = "data/Modified Model Specification/qalys.csv")
# Methadone scenario
l_params_MET_MMS <- load_all_params(file.init = "data/Modified Model Specification/init_params.csv",
file.init_dist = "data/init_dist_met.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Modified Model Specification/weibull.csv",
file.unconditional = "data/Modified Model Specification/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.naloxone = "data/naloxone.csv",### R&R MODIFICATION ###
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Modified Model Specification/costs.csv",
file.crime_costs = "data/Modified Model Specification/crime_costs.csv",
file.qalys = "data/Modified Model Specification/qalys.csv")
# Mixed proportions for validation
l_params_all_validation_MMS <- load_all_params(file.init = "data/Calibration/init_params.csv",
file.init_dist = "data/init_dist.csv", # calibrate on BC OUD cohort data for 2018
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Modified Model Specification/weibull.csv",
file.unconditional = "data/Modified Model Specification/unconditional.csv",
file.overdose = "data/overdose.csv", # includes calibration-related parameters
file.fentanyl = "data/Calibration/fentanyl.csv",
file.naloxone = "data/naloxone.csv",### R&R MODIFICATION ###
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Modified Model Specification/costs.csv",
file.crime_costs = "data/Modified Model Specification/crime_costs.csv",
file.qalys = "data/Modified Model Specification/qalys.csv")
View(l_params_MET_MMS)
library(dplyr)    # to manipulate data
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
# Load parameters
# Calibrated parameter values
load(file = "outputs/Calibration/imis_output.RData")
######################################
#### Modified Model Specification ####
######################################
# BNX scenario
l_params_BUP_MMS <- load_all_params(file.init = "data/Modified Model Specification/init_params.csv",
file.init_dist = "data/init_dist_bup.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Modified Model Specification/weibull.csv",
file.unconditional = "data/Modified Model Specification/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.naloxone = "data/naloxone.csv",### R&R MODIFICATION ###
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Modified Model Specification/costs.csv",
file.crime_costs = "data/Modified Model Specification/crime_costs.csv",
file.qalys = "data/Modified Model Specification/qalys.csv")
# Methadone scenario
l_params_MET_MMS <- load_all_params(file.init = "data/Modified Model Specification/init_params.csv",
file.init_dist = "data/init_dist_met.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Modified Model Specification/weibull.csv",
file.unconditional = "data/Modified Model Specification/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.naloxone = "data/naloxone.csv",### R&R MODIFICATION ###
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Modified Model Specification/costs.csv",
file.crime_costs = "data/Modified Model Specification/crime_costs.csv",
file.qalys = "data/Modified Model Specification/qalys.csv")
# Mixed proportions for validation
l_params_all_validation_MMS <- load_all_params(file.init = "data/Calibration/init_params.csv",
file.init_dist = "data/init_dist.csv", # calibrate on BC OUD cohort data for 2018
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Modified Model Specification/weibull.csv",
file.unconditional = "data/Modified Model Specification/unconditional.csv",
file.overdose = "data/overdose.csv", # includes calibration-related parameters
file.fentanyl = "data/Calibration/fentanyl.csv",
file.naloxone = "data/naloxone.csv",### R&R MODIFICATION ###
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Modified Model Specification/costs.csv",
file.crime_costs = "data/Modified Model Specification/crime_costs.csv",
file.qalys = "data/Modified Model Specification/qalys.csv")
View(l_params_MET_MMS)
rm(list = ls()) # to clean the workspace
#### Load packages, data and functions ####
#### Load packages and functions ####
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(ggridges) # specialized ridge plots
library(tidyverse)
library(lhs)
library(IMIS)
library(grid)
library(gridExtra)
library(lattice)
# To-do: Move functions into R package for OUD model
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/calibration_functions.R")
# Load model inputs #
l_params_all <- load_all_params(file.init = "data/Calibration/init_params.csv",
file.init_dist = "data/init_dist.csv", # calibrate on BC OUD cohort data for 2018
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Modified Model Specification/weibull.csv",
file.unconditional = "data/Modified Model Specification/unconditional.csv",
file.overdose = "data/overdose.csv", # includes calibration-related parameters
file.fentanyl = "data/Calibration/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Modified Model Specification/costs.csv",
file.crime_costs = "data/Modified Model Specification/crime_costs.csv",
file.qalys = "data/Modified Model Specification/qalys.csv")
# Load model inputs #
l_params_all <- load_all_params(file.init = "data/Calibration/init_params.csv",
file.init_dist = "data/init_dist.csv", # calibrate on BC OUD cohort data for 2018
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Modified Model Specification/weibull.csv",
file.unconditional = "data/Modified Model Specification/unconditional.csv",
file.overdose = "data/overdose.csv", # includes calibration-related parameters
file.fentanyl = "data/Calibration/fentanyl.csv",
file.naloxone = "data/naloxone.csv",### R&R MODIFICATION ###
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Modified Model Specification/costs.csv",
file.crime_costs = "data/Modified Model Specification/crime_costs.csv",
file.qalys = "data/Modified Model Specification/qalys.csv")
View(l_params_all)
# Load calibration inputs #
v_cali_param_names <- c("'Overdose rate (BNX/MET)'",
"'Overdose rate (BNX/MET + opioid)'",
"'Overdose rate (opioid use)'",
"'Overdose rate (opioid cessation)'",
"'First month mult (BNX/MET + opioid)'",
"'Fentanyl mult'",
"'Fatal overdose rate'",
"'Probability overdose witnessed")
v_par1 <- c(n_TX_OD_shape   = l_params_all$n_TX_OD_shape,
n_TXC_OD_shape  = l_params_all$n_TXC_OD_shape,
n_REL_OD_shape   = l_params_all$n_REL_OD_shape,
n_ABS_OD_low    = l_params_all$n_ABS_OD_low,
n_TXC_OD_mult_shape = l_params_all$n_TXC_OD_mult_shape,
n_fent_OD_mult_low = l_params_all$n_fent_OD_mult_low,
n_fatal_OD_shape    = l_params_all$n_fatal_OD_shape,
p_witness = l_params_all$p_witness_low)### R&R MODIFICATION ###
v_par2 <- c(n_TX_OD_scale   = l_params_all$n_TX_OD_scale,
n_TXC_OD_scale  = l_params_all$n_TXC_OD_scale,
n_REL_OD_scale   = l_params_all$n_REL_OD_scale,
n_ABS_OD_high    = l_params_all$n_ABS_OD_high,
n_TXC_OD_mult_scale = l_params_all$n_TXC_OD_mult_scale,
n_fent_OD_mult_high = l_params_all$n_fent_OD_mult_high,
n_fatal_OD_scale    = l_params_all$n_fatal_OD_scale,
p_witness = l_params_all$p_witness_high)### R&R MODIFICATION ###
#### Load calibration targets ####
l_cali_targets <- list(ODF = read.csv(file = "data/cali_target_odf.csv", header = TRUE),
ODN = read.csv(file = "data/cali_target_odn.csv", header = TRUE))
View(l_cali_targets)
# Max calibration periods
n_cali_max_per <- max(c(l_cali_targets$ODF$Time, l_cali_targets$ODN$Time))
#### Visualize targets ####
### TARGET 1: Overdose deaths ("ODF")
plotrix::plotCI(x    = l_cali_targets$ODF$Time,
y    = l_cali_targets$ODF$pe,
ui   = l_cali_targets$ODF$high,
li   = l_cali_targets$ODF$low,
#ylim = c(0, 1),
xlab = "Month", ylab = "Fatal Overdoses")
### TARGET 2: Non-fatal overdose ("ODN")
plotrix::plotCI(x    = l_cali_targets$ODN$Time,
y    = l_cali_targets$ODN$pe,
ui   = l_cali_targets$ODN$high,
li   = l_cali_targets$ODN$low,
#ylim = c(0, 1),
xlab = "Month", ylab = "Non-fatal Overdoses")
#### Specify calibration parameters ####
### Specify seed (for reproducible sequence of random numbers)
set.seed(3730687)
### Number of random samples to obtain from the posterior distribution
n_resamp <- 10000 # to match number of PSA draws
### Number of calibration targets
v_target_names <- c("Fatal Overdoses", "Non-fatal Overdoses")
n_target       <- length(v_target_names)
View(l_params_all)
### Select time-points ###
### Overdose deaths ###
n_ODF_t1 <- l_cali_targets$ODF$Time[1]
n_ODF_t2 <- l_cali_targets$ODF$Time[2]
n_ODF_t3 <- l_cali_targets$ODF$Time[3]
n_ODF_t4 <- l_cali_targets$ODF$Time[4]### R&R MODIFICATION ###
### Non-fatal overdose ###
n_ODN_t1 <- l_cali_targets$ODN$Time[1]
n_ODN_t2 <- l_cali_targets$ODN$Time[2]
n_ODN_t3 <- l_cali_targets$ODN$Time[3]
n_ODN_t4 <- l_cali_targets$ODN$Time[4]### R&R MODIFICATION ###
### Subset output by time-points ###
### Overdose deaths ###
# Yearly fatal overdoses
n_ODF1 <- v_ODF[n_ODF_t1]
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(formattable)
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
source("Analysis/00_load_parameters.R") # load all model parameters for each scenario + calibrated parameters
#### Produce model outputs ####
#### Modified Model Specification ####
l_outcomes_BUP_MMS  <- outcomes(l_params_all = l_params_BUP_MMS, v_params_calib = v_calib_post_map)
# Probability of naloxone use
v_NX_used <- c(p_NX_2017, p_NX_2018, p_NX_2019, p_NX_2020)### R&R MODIFICATION ###
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(formattable)
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
source("Analysis/00_load_parameters.R") # load all model parameters for each scenario + calibrated parameters
View(l_params_BUP_MMS)
#### Produce model outputs ####
#### Modified Model Specification ####
l_outcomes_BUP_MMS  <- outcomes(l_params_all = l_params_BUP_MMS, v_params_calib = v_calib_post_map)
l_outcomes_MET_MMS  <- outcomes(l_params_all = l_params_MET_MMS, v_params_calib = v_calib_post_map)
