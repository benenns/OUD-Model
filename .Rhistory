ABS <- df_flat$BASE == "ABS"
# Serostatus
NEG <- df_flat$SERO == "NEG"
HIV <- df_flat$SERO == "HIV"
HCV <- df_flat$SERO == "HCV"
COI <- df_flat$SERO == "COI"
all_HIV <- df_flat$SERO == "HIV" | df_flat$SERO == "COI"
all_HCV <- df_flat$SERO == "HCV" | df_flat$SERO == "COI"
# Injection
INJ <- df_flat$INJECT == "INJ"
NI <- df_flat$INJECT == "NI"
# Episodes
EP1 <- df_flat$EP == "1"
EP2 <- df_flat$EP == "2"
EP3 <- df_flat$EP == "3"
df_n <- unite(df_flat, newCol) # combine columns into one data frame of all health states
v_n_states <- df_n[,1] # convert df into vector
n_states <- length(v_n_states) # total number of health states
l_index_s  <- list(TX = TX, OOT = OOT,
BUP = BUP, BUPC = BUPC,
MET = MET, METC = METC,
REL = REL,
all_OD = all_OD, ODN = ODN, ODF = ODF,
ABS = ABS,
NEG = NEG, HIV = HIV, HCV = HCV, COI = COI,
INJ = INJ, NI = NI,
EP1 = EP1, EP2 = EP2, EP3 = EP3)
p_OD <- function(rate,# = rate,
rate_fatal,# = rate_fatal,
#rate_fent = n_fent_OD,
multiplier,# = multiplier,
fent_mult,# = fent_mult,
#fent_reduction_state = fent_reduction_state,
time,# = time,
first_month = FALSE,
fatal = FALSE,
injection = FALSE){
# Probability of successful naloxone use
p_NX_rev <- (p_witness * p_NX_used * p_NX_success)
# Probability of mortality from overdose accounting for baseline overdose fatality and effectiveness of naloxone
# Subsets overdose into fatal and non-fatal, conditional on different parameters
# Convert fatal overdose rate into probability of death following overdose
p_fatal_OD <- 1 - exp(-(rate_fatal))
# Convert fentanyl overdose rate into probability
#p_fent_OD <- 1 - exp(-(rate_fent))
# Probability of fentanyl exposure
# Generate time-varying probability of fentanyl exposure
# Currently modeling logarithmic growth based on 2018-2020 period (consider cutting off at some point, e.g., 5-years, 10-years)
#v_fent_exp_rate <- rep(0, n_t)
#for(i in 2:n_t){
#  v_fent_exp_rate[1] <- -log(1- p_fent_exp_base)
#  v_fent_exp_rate[i] <- v_fent_exp_rate[i-1] + n_fent_growth_rate
#}
#v_fent_exp_prob <- 1 - exp(-v_fent_exp_rate) # create vector of monthly fentanyl exposure probabilities (generated by growth rates from 2018-2020)
v_fent_exp_prob <- c(p_fent_exp_2018, p_fent_exp_2019, p_fent_exp_2020)
# Adjustment for injection/non-injection
#if (injection){
#  v_fent_exp_prob <- v_fent_exp_prob
#}  else{
#  v_fent_exp_prob <- v_fent_exp_prob * p_ni_fent_reduction
#}
# Convert input monthly rates to monthly probabilities - multiply rates by first month multiplier before converting
if (injection == TRUE && first_month == TRUE){
p_base_OD <- 1 - exp(-(rate * n_INJ_OD_mult * multiplier * (v_fent_exp_prob[time] * fent_mult)))
#p_fent_OD <- 1 - exp(-(rate_fent * multiplier))
}
else if (injection == TRUE && first_month == FALSE){
p_base_OD <- 1 - exp(-(rate * n_INJ_OD_mult * (v_fent_exp_prob[time] * fent_mult)))
#p_fent_OD <- 1 - exp(-(rate_fent))
}
else if (injection == FALSE && first_month == TRUE){
p_base_OD <- 1 - exp(-(rate * multiplier * (v_fent_exp_prob[time] * p_ni_fent_reduction * fent_mult)))
#p_fent_OD <- 1 - exp(-(rate_fent * multiplier))
}
else if (injection == FALSE && first_month == FALSE){
p_base_OD <- 1 - exp(-(rate * (v_fent_exp_prob[time] * p_ni_fent_reduction * fent_mult)))
#p_fent_OD <- 1 - exp(-(rate_fent))
}
# Naloxone effect on fatal overdose
p_fatal_OD_NX <- p_fatal_OD * (1 - p_NX_rev)
# Probability of fentanyl exposure (adjusted for injection/non-injection)
#if (injection){
#p_fent_exp <- p_fent_exp
#}  else{
#  p_fent_exp <- p_fent_exp * p_ni_fent_reduction
#}
# Calculate fatal and non-fatal overdose probabilities
if (fatal == TRUE){
p_OD <- p_base_OD * p_fatal_OD_NX #((p_base_OD * (1 - p_fent_exp)) + (p_fent_OD * (p_fent_exp))) * p_fatal_OD_NX
} else{
p_OD <- p_base_OD * (1 - p_fatal_OD_NX) #((p_base_OD * (1 - p_fent_exp)) + (p_fent_OD * (p_fent_exp))) * (1 - p_fatal_OD_NX)
}
return(p_OD)
}
# Module to calculate probability of overdose from states
# Four separate matrices to account for state-time (first month vs. second+), and model-time (changing fentanyl prevalence, etc.)
#### Time-dependent overdose probabilities ####
# Time periods
time_periods <- n_cali_per
list2env(l_params_all)
# Module to calculate probability of overdose from states
# Four separate matrices to account for state-time (first month vs. second+), and model-time (changing fentanyl prevalence, etc.)
#### Time-dependent overdose probabilities ####
# Time periods
time_periods <- n_cali_per
# Empty 2-D matrix
m_ODN <- m_ODN_first <- m_ODF <- m_ODF_first <- array(0, dim = c(n_states, time_periods),
dimnames = list(v_n_states, 1:time_periods))
n_cali_per <- 3
# Module to calculate probability of overdose from states
# Four separate matrices to account for state-time (first month vs. second+), and model-time (changing fentanyl prevalence, etc.)
#### Time-dependent overdose probabilities ####
# Time periods
time_periods <- n_cali_per
# Empty 2-D matrix
m_ODN <- m_ODN_first <- m_ODF <- m_ODF_first <- array(0, dim = c(n_states, time_periods),
dimnames = list(v_n_states, 1:time_periods))
for(i in 1:time_periods){
# Probability of overdose
# Non-fatal (first month)
m_ODN_first[TX & NI, i]   <- p_OD(rate = n_TX_OD,    rate_fatal = n_fatal_OD, multiplier = n_TX_OD_mult,  fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = FALSE, injection = FALSE)
m_ODN_first[TXC & NI, i]  <- p_OD(rate = n_TXC_OD,  rate_fatal = n_fatal_OD, multiplier = n_TXC_OD_mult,  fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = FALSE, injection = FALSE)
m_ODN_first[REL & NI, i]  <- p_OD(rate = n_REL_OD,  rate_fatal = n_fatal_OD, multiplier = n_REL_OD_mult,  fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = FALSE, injection = FALSE)
m_ODN_first[ABS & NI, i]  <- p_OD(rate = n_ABS_OD,  rate_fatal = n_fatal_OD, multiplier = n_ABS_OD_mult,  fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = FALSE, injection = FALSE)
m_ODN_first[TX & INJ, i]  <- p_OD(rate = n_TX_OD,   rate_fatal = n_fatal_OD, multiplier = n_TX_OD_mult,  fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = FALSE, injection = TRUE)
m_ODN_first[TXC & INJ, i] <- p_OD(rate = n_TXC_OD, rate_fatal = n_fatal_OD, multiplier = n_TXC_OD_mult,  fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = FALSE, injection = TRUE)
m_ODN_first[REL & INJ, i] <- p_OD(rate = n_REL_OD, rate_fatal = n_fatal_OD, multiplier = n_REL_OD_mult,  fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = FALSE, injection = TRUE)
m_ODN_first[ODN & INJ, i] <- p_OD(rate = n_REL_OD, rate_fatal = n_fatal_OD, multiplier = n_REL_OD_mult,  fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = FALSE, injection = TRUE)
m_ODN_first[ABS & INJ, i] <- p_OD(rate = n_ABS_OD, rate_fatal = n_fatal_OD, multiplier = n_ABS_OD_mult,  fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = FALSE, injection = TRUE)
# Fatal (first month)
m_ODF_first[TX & NI, i] <- p_OD(rate = n_TX_OD,    rate_fatal = n_fatal_OD, multiplier = n_TX_OD_mult,   fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = TRUE, injection = FALSE)
m_ODF_first[TXC & NI, i] <- p_OD(rate = n_TXC_OD,  rate_fatal = n_fatal_OD, multiplier = n_TXC_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = TRUE, injection = FALSE)
m_ODF_first[REL & NI, i] <- p_OD(rate = n_REL_OD,  rate_fatal = n_fatal_OD, multiplier = n_REL_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = TRUE, injection = FALSE)
m_ODF_first[ODN & NI, i] <- p_OD(rate = n_REL_OD,  rate_fatal = n_fatal_OD, multiplier = n_REL_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = TRUE, injection = FALSE)
m_ODF_first[ABS & NI, i] <- p_OD(rate = n_ABS_OD,  rate_fatal = n_fatal_OD, multiplier = n_ABS_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = TRUE, injection = FALSE)
m_ODF_first[TX & INJ, i] <- p_OD(rate = n_TX_OD,   rate_fatal = n_fatal_OD, multiplier = n_TX_OD_mult,   fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = TRUE, injection = TRUE)
m_ODF_first[TXC & INJ, i] <- p_OD(rate = n_TXC_OD, rate_fatal = n_fatal_OD, multiplier = n_TXC_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = TRUE, injection = TRUE)
m_ODF_first[REL & INJ, i] <- p_OD(rate = n_REL_OD, rate_fatal = n_fatal_OD, multiplier = n_REL_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = TRUE, injection = TRUE)
m_ODF_first[ODN & INJ, i] <- p_OD(rate = n_REL_OD, rate_fatal = n_fatal_OD, multiplier = n_REL_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = TRUE, injection = TRUE)
m_ODF_first[ABS & INJ, i] <- p_OD(rate = n_ABS_OD, rate_fatal = n_fatal_OD, multiplier = n_ABS_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = TRUE, fatal = TRUE, injection = TRUE)
# Non-fatal (month 2+)
m_ODN[TX & NI, i] <- p_OD(rate = n_TX_OD,    rate_fatal = n_fatal_OD, multiplier = n_TX_OD_mult,   fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = FALSE, injection = FALSE)
m_ODN[TXC & NI, i] <- p_OD(rate = n_TXC_OD,  rate_fatal = n_fatal_OD, multiplier = n_TXC_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = FALSE, injection = FALSE)
m_ODN[REL & NI, i] <- p_OD(rate = n_REL_OD,  rate_fatal = n_fatal_OD, multiplier = n_REL_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = FALSE, injection = FALSE)
m_ODN[ABS & NI, i] <- p_OD(rate = n_ABS_OD,  rate_fatal = n_fatal_OD, multiplier = n_ABS_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = FALSE, injection = FALSE)
m_ODN[TX & INJ, i] <- p_OD(rate = n_TX_OD,   rate_fatal = n_fatal_OD, multiplier = n_TX_OD_mult,   fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = FALSE, injection = TRUE)
m_ODN[TXC & INJ, i] <- p_OD(rate = n_TXC_OD, rate_fatal = n_fatal_OD, multiplier = n_TXC_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = FALSE, injection = TRUE)
m_ODN[REL & INJ, i] <- p_OD(rate = n_REL_OD, rate_fatal = n_fatal_OD, multiplier = n_REL_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = FALSE, injection = TRUE)
m_ODN[ODN & INJ, i] <- p_OD(rate = n_REL_OD, rate_fatal = n_fatal_OD, multiplier = n_REL_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = FALSE, injection = TRUE)
m_ODN[ABS & INJ, i] <- p_OD(rate = n_ABS_OD, rate_fatal = n_fatal_OD, multiplier = n_ABS_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = FALSE, injection = TRUE)
# Fatal (month 2+)
m_ODF[TX & NI, i] <- p_OD(rate = n_TX_OD,    rate_fatal = n_fatal_OD, multiplier = n_TX_OD_mult,   fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = TRUE, injection = FALSE)
m_ODF[TXC & NI, i] <- p_OD(rate = n_TXC_OD,  rate_fatal = n_fatal_OD, multiplier = n_TXC_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = TRUE, injection = FALSE)
m_ODF[REL & NI, i] <- p_OD(rate = n_REL_OD,  rate_fatal = n_fatal_OD, multiplier = n_REL_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = TRUE, injection = FALSE)
m_ODF[ODN & NI, i] <- p_OD(rate = n_REL_OD,  rate_fatal = n_fatal_OD, multiplier = n_REL_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = TRUE, injection = FALSE)
m_ODF[ABS & NI, i] <- p_OD(rate = n_ABS_OD,  rate_fatal = n_fatal_OD, multiplier = n_ABS_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = TRUE, injection = FALSE)
m_ODF[TX & INJ, i] <- p_OD(rate = n_TX_OD,   rate_fatal = n_fatal_OD, multiplier = n_TX_OD_mult,   fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = TRUE, injection = TRUE)
m_ODF[TXC & INJ, i] <- p_OD(rate = n_TXC_OD, rate_fatal = n_fatal_OD, multiplier = n_TXC_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = TRUE, injection = TRUE)
m_ODF[REL & INJ, i] <- p_OD(rate = n_REL_OD, rate_fatal = n_fatal_OD, multiplier = n_REL_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = TRUE, injection = TRUE)
m_ODF[ODN & INJ, i] <- p_OD(rate = n_REL_OD, rate_fatal = n_fatal_OD, multiplier = n_REL_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = TRUE, injection = TRUE)
m_ODF[ABS & INJ, i] <- p_OD(rate = n_ABS_OD, rate_fatal = n_fatal_OD, multiplier = n_ABS_OD_mult, fent_mult = n_fent_OD_mult, time = i, first_month = FALSE, fatal = TRUE, injection = TRUE)
}
list2env(l_params_all)
# Base health states
BASE <- l_dim_s[[1]] <- c("MET", "METC", "BUP", "BUPC", "ABS", "REL", "ODN", "ODF")
# Injection/non-injection stratification
INJECT <- l_dim_s[[2]] <- c("NI", "INJ")
# Episodes (1-3)
EP <-  l_dim_s[[3]] <- c("1", "2", "3")
# HIV/HCV status
SERO <- l_dim_s[[4]] <- c("NEG", "HIV", "HCV", "COI")
# Set model periods
if(cali == TRUE){
# Calibration periods
n_t <- (n_cali_max_per + 1) # if calibrating, cut model off at max calibration output (e.g. 36 months for three-years)
} else{
# Maximum model periods(regular)
n_t <- (n_age_max - n_age_init) * n_per # convert years
}
load(l_params_all)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
# Call model setup functions
source("R/input_parameter_functions.R")
#source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
with(as.list(l_params_all), {
#### Set up model states ####
l_dim_s  <- list() # list of health states
# Base health states
BASE <- l_dim_s[[1]] <- c("MET", "METC", "BUP", "BUPC", "ABS", "REL", "ODN", "ODF")
# Injection/non-injection stratification
INJECT <- l_dim_s[[2]] <- c("NI", "INJ")
# Episodes (1-3)
EP <-  l_dim_s[[3]] <- c("1", "2", "3")
# HIV/HCV status
SERO <- l_dim_s[[4]] <- c("NEG", "HIV", "HCV", "COI")
# Set model periods
if(cali == TRUE){
# Calibration periods
n_t <- (n_cali_max_per + 1) # if calibrating, cut model off at max calibration output (e.g. 36 months for three-years)
} else{
# Maximum model periods(regular)
n_t <- (n_age_max - n_age_init) * n_per # convert years
}
df_flat <- expand.grid(l_dim_s) #combine all elements together into vector of health states
df_flat <- dplyr::rename(df_flat, BASE    = Var1,
INJECT  = Var2,
EP      = Var3,
SERO    = Var4)
# Create index of states to populate transition matrices
# All treatment
TX <- df_flat$BASE == "BUP" | df_flat$BASE == "MET"
TXC <- df_flat$BASE == "BUPC" | df_flat$BASE == "METC"
all_TX <- df_flat$BASE == "BUP" | df_flat$BASE == "BUPC" | df_flat$BASE == "MET" | df_flat$BASE == "METC"
# All out-of-treatment (incl ABS)
OOT <- df_flat$BASE == "REL" | df_flat$BASE == "ABS" | df_flat$BASE == "ODN" | df_flat$BASE == "ODF"
# Buprenorphine
BUP  <- df_flat$BASE == "BUP" # treatment only
BUPC <- df_flat$BASE == "BUPC" # concurrent opioid use
all_BUP <- df_flat$BASE == "BUP" | df_flat$BASE == "BUPC"
# Methadone
MET  <- df_flat$BASE == "MET" # treatment only
METC <- df_flat$BASE == "METC" # concurrent opioid use
all_MET <- df_flat$BASE == "MET" | df_flat$BASE == "METC"
# Relapse
REL <- df_flat$BASE == "REL"
# Overdose
all_OD <- df_flat$BASE == "ODN" | df_flat$BASE == "ODF"
non_OD <- df_flat$BASE != "ODN" & df_flat$BASE != "ODF"
ODN <- df_flat$BASE == "ODN" # non-fatal overdose
ODF <- df_flat$BASE == "ODF" # fatal overdose
# Abstinence
ABS <- df_flat$BASE == "ABS"
# Serostatus
NEG <- df_flat$SERO == "NEG"
HIV <- df_flat$SERO == "HIV"
HCV <- df_flat$SERO == "HCV"
COI <- df_flat$SERO == "COI"
all_HIV <- df_flat$SERO == "HIV" | df_flat$SERO == "COI"
all_HCV <- df_flat$SERO == "HCV" | df_flat$SERO == "COI"
# Injection
INJ <- df_flat$INJECT == "INJ"
NI <- df_flat$INJECT == "NI"
# Episodes
EP1 <- df_flat$EP == "1"
EP2 <- df_flat$EP == "2"
EP3 <- df_flat$EP == "3"
df_n <- unite(df_flat, newCol) # combine columns into one data frame of all health states
v_n_states <- df_n[,1] # convert df into vector
n_states <- length(v_n_states) # total number of health states
l_index_s  <- list(TX = TX, OOT = OOT,
BUP = BUP, BUPC = BUPC,
MET = MET, METC = METC,
REL = REL,
all_OD = all_OD, ODN = ODN, ODF = ODF,
ABS = ABS,
NEG = NEG, HIV = HIV, HCV = HCV, COI = COI,
INJ = INJ, NI = NI,
EP1 = EP1, EP2 = EP2, EP3 = EP3)
#### Set up model states ####
l_dim_s  <- list() # list of health states
# Base health states
BASE <- l_dim_s[[1]] <- c("MET", "METC", "BUP", "BUPC", "ABS", "REL", "ODN", "ODF")
# Injection/non-injection stratification
INJECT <- l_dim_s[[2]] <- c("NI", "INJ")
# Episodes (1-3)
EP <-  l_dim_s[[3]] <- c("1", "2", "3")
# HIV/HCV status
SERO <- l_dim_s[[4]] <- c("NEG", "HIV", "HCV", "COI")
# Set model periods
if(cali == TRUE){
# Calibration periods
n_t <- (n_cali_max_per + 1) # if calibrating, cut model off at max calibration output (e.g. 36 months for three-years)
} else{
# Maximum model periods(regular)
n_t <- (n_age_max - n_age_init) * n_per # convert years
}
df_flat <- expand.grid(l_dim_s) #combine all elements together into vector of health states
df_flat <- dplyr::rename(df_flat, BASE    = Var1,
INJECT  = Var2,
EP      = Var3,
SERO    = Var4)
#### Set up model states ####
l_dim_s  <- list() # list of health states
rm(list = ls()) # to clean the workspace
break
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
load("~/GitHub/OPTIMA-Model/outputs/summary_posterior.RData")
View(df_posterior_summ)
