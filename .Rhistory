df_posterior_summ
### Save summary statistics of posterior distribution
## As .RData
save(df_posterior_summ,
file = "outputs/Calibration/summary_posterior.RData")
## As .csv
write.csv(df_posterior_summ,
file = "outputs/Calibration/summary_posterior.csv",
row.names = FALSE)
#### Visualization of posterior distribution ####
### Rescale posterior to plot density of plots
v_calib_alpha <- scales::rescale(v_calib_post)
### Plot the 1000 draws from the posterior
png("plots/Calibration/posterior_distribution_joint.png",
width = 8, height = 6, units = 'in', res = 300)
s3d <- scatterplot3d::scatterplot3d(x = m_calib_post[, 1],
y = m_calib_post[, 2],
z = m_calib_post[, 3],
color = scales::alpha("black", v_calib_alpha),
xlim = c(v_lb[1], v_ub[1]),
ylim = c(v_lb[2], v_ub[2]),
zlim = c(v_lb[3], v_ub[3]),
xlab = v_cali_param_names[1],
ylab = v_cali_param_names[2],
zlab = v_cali_param_names[3])
## Add center of Gaussian components
s3d$points3d(l_fit_imis$center, col = "red", pch = 8)
## Add legend
legend(s3d$xyz.convert(0.05, 1.0, 5),
col = c("black", "red"),
bg = "white", pch = c(1, 8), yjust = 0,
legend = c("Posterior sample", "Center of Gaussian components"),
cex = 1.1)
dev.off()
### Plot the 1000 draws from the posterior with marginal histograms
png("plots/Calibration/posterior_distribution_marginal.png",
width = 8, height = 6, units = 'in', res = 300)
psych::pairs.panels(m_calib_post)
dev.off()
#### Store posterior and MAP from IMIS calibration ####
save(m_calib_post,
v_calib_post_map,
file = "outputs/Calibration/imis_output.RData")
#### Plot prior vs. posterior distribution for calibration parameters ####
# Load posterior
imis_output <- load(file = "outputs/Calibration/imis_output.RData")
# Draw sample prior
m_calib_prior <- sample.prior(n_samp = n_resamp)
# Prepare data
df_samp_prior <- melt(cbind(Distribution = "Prior",
as.data.frame(m_calib_prior[1:n_resamp, ])),
variable.name = "Parameter")
df_samp_post_imis  <- melt(cbind(Distribution = "Posterior",
as.data.frame(m_calib_post[1:n_resamp, ])),
variable.name = "Parameter")
df_calib_prior_post <- rbind(df_samp_prior, df_samp_post_imis)
df_calib_prior_post$Distribution <- ordered(df_calib_prior_post$Distribution,
levels = c("Prior",
"Posterior"))
df_calib_prior_post$Parameter <- factor(df_calib_prior_post$Parameter,
levels = levels(df_calib_prior_post$Parameter),
ordered = TRUE,
labels = v_cali_param_names)
### Plot priors and IMIS posteriors
# TO-DO: Add vertical lines for prior mean and MAP
prior_v_posterior <- ggplot(df_calib_prior_post,
aes(x = value, y = ..density.., fill = Distribution)) +
facet_wrap(~Parameter, scales = "free",
ncol = 3,
labeller = label_parsed) +
#geom_vline(data = df_posterior_summ,
#           aes(xintercept = value, linetype = Type, color = Type)) +
#scale_x_continuous(breaks = dampack::number_ticks(5)) +
scale_color_manual("", values = c("black", "navy blue", "tomato")) +
geom_density(alpha=0.5) +
theme_bw(base_size = 16) +
guides(fill = guide_legend(title = "", order = 1),
linetype = guide_legend(title = "", order = 2),
color = guide_legend(title = "", order = 2)) +
theme(legend.position = "bottom",
legend.box = "vertical",
legend.margin = margin(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.background = element_rect(fill = "white",
color = "white"),
strip.text = element_text(hjust = 0))
prior_v_posterior
ggsave(prior_v_posterior,
filename = "Plots/Calibration/prior-v-posterior.pdf",
width = 10, height = 7)
ggsave(prior_v_posterior,
filename = "Plots/Calibration/prior-v-posterior.png",
width = 10, height = 7)
#### Plot model fit against calibration targets ####
# Run model for n_samp posterior distribution draws
# Output list of fatal and total overdoses at T = 1, T = 2, T = 3
m_model_targets_ODF <- m_model_targets_ODN <- matrix(0, nrow = n_resamp, ncol = 4)
for(i in 1:n_resamp){
l_model_target_fit <- calibration_out(v_params_calib = m_calib_post[i, ],
l_params_all = l_params_all)
m_model_targets_ODF[i, 1] <- l_model_target_fit$fatal_overdose[1]
m_model_targets_ODF[i, 2] <- l_model_target_fit$fatal_overdose[2]
m_model_targets_ODF[i, 3] <- l_model_target_fit$fatal_overdose[3]
### R&R MODIFICATION ###
m_model_targets_ODF[i, 4] <- l_model_target_fit$fatal_overdose[4]
m_model_targets_ODN[i, 1] <- l_model_target_fit$overdose[1]
m_model_targets_ODN[i, 2] <- l_model_target_fit$overdose[2]
m_model_targets_ODN[i, 3] <- l_model_target_fit$overdose[3]
### R&R MODIFICATION ###
m_model_targets_ODN[i, 4] <- l_model_target_fit$overdose[4]
}
Sys.time()
## As .RData
save(m_model_targets_ODF,
file = "outputs/Calibration/model_targets_ODF.RData")
save(m_model_targets_ODN,
file = "outputs/Calibration/model_targets_ODN.RData")
# Model outputs
m_model_targets_ODF_stats <- cbind(matrixStats::colQuantiles(m_model_targets_ODF,
probs = c(0.025, 0.5, 0.975)),
matrixStats::colMeans2(m_model_targets_ODF))
m_model_targets_ODN_stats <- cbind(matrixStats::colQuantiles(m_model_targets_ODN,
probs = c(0.025, 0.5, 0.975)),
matrixStats::colMeans2(m_model_targets_ODN))
m_time <- matrix(c(12, 24, 36, 48))
m_pop <- matrix(l_cali_targets$ODF$Pop)
m_model_targets_ODF_fit <- cbind(m_model_targets_ODF_stats, m_time, m_pop)
m_model_targets_ODN_fit <- cbind(m_model_targets_ODN_stats, m_time, m_pop)
df_model_targets_ODF_fit <- m_model_targets_ODF_fit %>% as_tibble() %>% setNames(c("ci_low", "Median", "ci_high", "pe", "Time", "Pop")) %>% mutate(Target = "Model output (95% CI)",
Num = pe * Pop,
low = ci_low * Pop,
high = ci_high * Pop)
df_model_targets_ODN_fit <- m_model_targets_ODN_fit %>% as_tibble() %>% setNames(c("ci_low", "Median", "ci_high", "pe", "Time", "Pop")) %>% mutate(Target = "Model output (95% CI)",
Num = pe * Pop,
low = ci_low * Pop,
high = ci_high * Pop)
# Targets
df_targets_ODF <- l_cali_targets$ODF %>% as_tibble() %>% mutate(Target = "Cali target (95% CI)",
low = low * Pop,
high = high * Pop)
df_targets_ODN <- l_cali_targets$ODN %>% as_tibble() %>% mutate(Target = "Cali target (95% CI)",
low = low * Pop,
high = high * Pop)
# Combine
df_fit_ODF <- bind_rows(df_targets_ODF, df_model_targets_ODF_fit)
df_fit_ODN <- bind_rows(df_targets_ODN, df_model_targets_ODN_fit)
# Plot fit vs. targets
# Fatal overdose
p_temp_ODF <- ggplot(df_fit_ODF, aes(x = Time, y = Num, group = Target, color = Target)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin = low, ymax = high), width = .5,
position = position_dodge(0.05))
plot_fit_ODF <- p_temp_ODF + labs(title = NULL, x = "Year", y = "Fatal overdoses") +
theme_classic() +
theme(legend.position="none") +
theme(legend.title = element_blank()) +
scale_color_manual(values = c('#999999','#E69F00')) +
scale_x_continuous(breaks = c(12, 24, 36, 48),
labels = c("2017", "2018", "2019", "2020"))
# Plot for extracting legend only
plot_fit_ODF_leg <- p_temp_ODF + labs(title = NULL, x = "Year", y = "Fatal overdoses") +
theme_classic() +
scale_color_manual(values = c('#999999','#E69F00')) +
scale_x_continuous(breaks = c(12, 24, 36, 48),
labels = c("2017", "2018", "2019", "2020"))
# Non-fatal overdose
p_temp_ODN <- ggplot(df_fit_ODN, aes(x = Time, y = Num, group = Target, color = Target)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin = low, ymax = high), width = .5,
position = position_dodge(0.05))
plot_fit_ODN <- p_temp_ODN + labs(title = NULL, x = "Year", y = "Non-fatal overdoses")+
theme_classic() +
theme(legend.position = "none") +
theme(legend.title = element_blank()) +
scale_color_manual(values = c('#999999','#E69F00')) +
scale_x_continuous(breaks = c(12, 24, 36, 48),
labels = c("2017", "2018", "2019", "2020"))
plot_fit_ODN
# Code to extract legend from plots
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
mylegend <- g_legend(plot_fit_ODF_leg)
# Combined
#plot_fit_comb <- grid.arrange(plot_fit_ODF, plot_fit_ODN, nrow = 1, ncol = 2, common.legend = TRUE, legend = "bottom")
plot_fit_comb <- grid.arrange(arrangeGrob(plot_fit_ODF, plot_fit_ODN, nrow = 1),
mylegend, nrow = 2, heights = c(6, 1))
plot_fit_comb
# Outputs
ggsave(plot_fit_ODF,
filename = "Plots/Calibration/target-fit-ODF.png",
width = 4, height = 4)
ggsave(plot_fit_ODN,
filename = "Plots/Calibration/target-fit-ODN.png",
width = 4, height = 4)
ggsave(plot_fit_comb,
filename = "Plots/Calibration/target-fit-comb.png",
width = 8, height = 4)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(rBeta2009)
library(parallel)
library(foreach)
library(doParallel)
library(tidyr)
library(future)
library(doFuture)
source("R/input_parameter_functions.R")
source("R/generate_psa_parameters.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
source("Analysis/00_load_parameters.R")
# Set population size for dirichlet draws
n_pop_cohort <- 29000
n_pop_trial  <- 272
n_sim <- 100 # just to test function (will be set as n_sim)
### PSA model outputs
### Run Markov model for PSA draws and return outputs ###
# Generate PSA parameter draws
######################################
#### Modified Model Specification ####
######################################
## Base case (EQ-5D-5L)
df_psa_params_MMS <- generate_psa_params(n_sim = n_sim, seed = 3730687, n_pop = n_pop_trial, scenario = "MMS",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Modified Model Specification/weibull.csv",
file.unconditional = "data/Modified Model Specification/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.naloxone = "data/naloxone.csv",### R&R MODIFICATION ###
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Modified Model Specification/costs.csv",
file.crime_costs = "data/Modified Model Specification/crime_costs.csv",
file.qalys = "data/Modified Model Specification/qalys.csv",
file.imis_output = "outputs/Calibration/imis_output.RData")
source("R/input_parameter_functions.R")
source("R/generate_psa_parameters.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
source("Analysis/00_load_parameters.R")
# Set population size for dirichlet draws
n_pop_cohort <- 29000
n_pop_trial  <- 272
n_sim <- 100 # just to test function (will be set as n_sim)
### PSA model outputs
### Run Markov model for PSA draws and return outputs ###
# Generate PSA parameter draws
######################################
#### Modified Model Specification ####
######################################
## Base case (EQ-5D-5L)
df_psa_params_MMS <- generate_psa_params(n_sim = n_sim, seed = 3730687, n_pop = n_pop_trial, scenario = "MMS",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Modified Model Specification/weibull.csv",
file.unconditional = "data/Modified Model Specification/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.naloxone = "data/naloxone.csv",### R&R MODIFICATION ###
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Modified Model Specification/costs.csv",
file.crime_costs = "data/Modified Model Specification/crime_costs.csv",
file.qalys = "data/Modified Model Specification/qalys.csv",
file.imis_output = "outputs/Calibration/imis_output.RData")
source("R/input_parameter_functions.R")
source("R/generate_psa_parameters.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
source("Analysis/00_load_parameters.R")
# Set population size for dirichlet draws
n_pop_cohort <- 29000
n_pop_trial  <- 272
n_sim <- 1000 # just to test function (will be set as n_sim)
### PSA model outputs
### Run Markov model for PSA draws and return outputs ###
# Generate PSA parameter draws
######################################
#### Modified Model Specification ####
######################################
## Base case (EQ-5D-5L)
df_psa_params_MMS <- generate_psa_params(n_sim = n_sim, seed = 3730687, n_pop = n_pop_trial, scenario = "MMS",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Modified Model Specification/weibull.csv",
file.unconditional = "data/Modified Model Specification/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.naloxone = "data/naloxone.csv",### R&R MODIFICATION ###
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Modified Model Specification/costs.csv",
file.crime_costs = "data/Modified Model Specification/crime_costs.csv",
file.qalys = "data/Modified Model Specification/qalys.csv",
file.imis_output = "outputs/Calibration/imis_output.RData")
write.csv(df_psa_params_MMS,"outputs/PSA/Modified Model Specification/input_PSA_MMS.csv", row.names = TRUE)
# Load parameters
# Calibrated parameter values
load(file = "outputs/Calibration/imis_output.RData")
######################################
#### Modified Model Specification ####
######################################
# BNX scenario
l_params_BUP_MMS <- load_all_params(file.init = "data/Modified Model Specification/init_params.csv",
file.init_dist = "data/init_dist_bup.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Modified Model Specification/weibull.csv",
file.unconditional = "data/Modified Model Specification/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.naloxone = "data/naloxone.csv",### R&R MODIFICATION ###
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Modified Model Specification/costs.csv",
file.crime_costs = "data/Modified Model Specification/crime_costs.csv",
file.qalys = "data/Modified Model Specification/qalys.csv")
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(formattable)
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
source("Analysis/00_load_parameters.R") # load all model parameters for each scenario + calibrated parameters
#### Produce model outputs ####
#### Modified Model Specification ####
l_outcomes_BUP_MMS  <- outcomes(l_params_all = l_params_BUP_MMS, v_params_calib = v_calib_post_map)
l_outcomes_MET_MMS  <- outcomes(l_params_all = l_params_MET_MMS, v_params_calib = v_calib_post_map)
l_outcomes_validation_MMS  <- outcomes(l_params_all = l_params_all_validation_MMS, v_params_calib = v_calib_post_map)
df_outcomes_MMS <- rbind(l_outcomes_BUP_MMS$df_outcomes, l_outcomes_MET_MMS$df_outcomes)
rownames(df_outcomes_MMS) <- c("Early take-home BNX", "Methadone")
# Save output
saveRDS(l_outcomes_BUP_MMS, file = "outputs/outcomes/outcomes_BUP_MMS.RData")
saveRDS(l_outcomes_MET_MMS, file = "outputs/outcomes/outcomes_MET_MMS.RData")
saveRDS(df_outcomes_MMS, file = "outputs/outcomes/outcomes_MMS.RData")
# Generate ICERs
l_ICER_MMS <- ICER(outcomes_comp = l_outcomes_MET_MMS, outcomes_int = l_outcomes_BUP_MMS)
# Save output
saveRDS(l_ICER_MMS, file = "outputs/outcomes/ICER_MMS.RData")
######################################
#### Modified Model Specification ####
######################################
# Full model trace
write.csv(l_outcomes_MET_MMS$m_M_trace,"outputs/trace/Modified Model Specification/trace_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP_MMS$m_M_trace,"outputs/trace/Modified Model Specification/trace_BUP.csv", row.names = TRUE)
write.csv(l_outcomes_validation_MMS$m_M_trace,"outputs/trace/Modified Model Specification/trace_validation.csv", row.names = TRUE)
# Aggregate trace
write.csv(l_outcomes_MET_MMS$m_M_agg_trace,"outputs/trace/Modified Model Specification/trace_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP_MMS$m_M_agg_trace,"outputs/trace/Modified Model Specification/trace_BUP.csv", row.names = TRUE)
write.csv(l_outcomes_validation_MMS$m_M_agg_trace,"outputs/trace/Modified Model Specification/trace_validation.csv", row.names = TRUE)
# Full model costs
write.csv(l_outcomes_MET_MMS$m_TOTAL_costs_states,"outputs/trace/Modified Model Specification/full_trace_costs_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP_MMS$m_TOTAL_costs_states,"outputs/trace/Modified Model Specification/full_trace_costs_BUP.csv", row.names = TRUE)
# Outcomes
# Disaggregated
df_outcomes_MMS <- rbind(l_outcomes_BUP_MMS$df_outcomes, l_outcomes_MET_MMS$df_outcomes)
rownames(df_outcomes_MMS) <- c("Early take-home BNX", "Methadone")
# ICER
df_icer_MMS <- l_ICER_MMS$df_icer
rownames(df_icer_MMS) <- c("Early take-home BNX vs. Methadone")
# Incremental costs & QALYs
df_incremental_MMS <- l_ICER_MMS$df_incremental
rownames(df_incremental_MMS) <- c("Early take-home BNX vs. Methadone")
# Output
save(df_incremental_MMS,
file = "outputs/ICER/incremental_det_MMS.RData")
write.csv(df_outcomes_MMS,"outputs/main_output_det_MMS.csv", row.names = TRUE)
write.csv(df_icer_MMS,"outputs/ICER/icer_det_MMS.csv", row.names = TRUE)
write.csv(df_incremental_MMS,"outputs/ICER/incremental_det_MMS.csv", row.names = TRUE)
# Raw outputs
# Costs
write.csv(l_outcomes_MET_MMS$v_costs,"outputs/costs/Modified Model Specification/costs_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP_MMS$v_costs,"outputs/costs/Modified Model Specification/costs_BUP.csv", row.names = TRUE)
# Treatment
write.csv(l_outcomes_MET_MMS$m_TX_costs,"outputs/costs/Modified Model Specification/tx_costs_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP_MMS$m_TX_costs,"outputs/costs/Modified Model Specification/tx_costs_BUP.csv", row.names = TRUE)
# Health sector
write.csv(l_outcomes_MET_MMS$m_HRU_costs,"outputs/costs/Modified Model Specification/hru_costs_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP_MMS$m_HRU_costs,"outputs/costs/Modified Model Specification/hru_costs_BUP.csv", row.names = TRUE)
# Crime
write.csv(l_outcomes_MET_MMS$m_crime_costs,"outputs/costs/Modified Model Specification/crime_costs_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP_MMS$m_crime_costs,"outputs/costs/Modified Model Specification/crime_costs_BUP.csv", row.names = TRUE)
# QALYs
write.csv(l_outcomes_MET_MMS$v_qalys,"outputs/qalys/Modified Model Specification/qalys_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP_MMS$v_qalys,"outputs/qalys/Modified Model Specification/qalys_BUP.csv", row.names = TRUE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(grid)
library(gridExtra)
library(lattice)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/plot_functions.R")
# Load parameters
source("Analysis/00_load_parameters.R") # load all model parameters for each scenario + calibrated parameters
# Update parameter list with calibrated params
#l_params_all <- update_param_list(l_params_all = l_params_all, params_updated = v_calib_post_map)
l_params_BUP_MMS <- update_param_list(l_params_all = l_params_BUP_MMS, params_updated = v_calib_post_map)
l_params_MET_MMS <- update_param_list(l_params_all = l_params_MET_MMS, params_updated = v_calib_post_map)
# l_params_BUP_TS <- update_param_list(l_params_all = l_params_BUP_TS, params_updated = v_calib_post_map)
# l_params_MET_TS <- update_param_list(l_params_all = l_params_MET_TS, params_updated = v_calib_post_map)
# Run model
#_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = FALSE)
l_out_markov_BUP_MMS  <- markov_model(l_params_all = l_params_BUP_MMS, err_stop = FALSE, verbose = TRUE, checks = FALSE)
l_out_markov_MET_MMS  <- markov_model(l_params_all = l_params_MET_MMS, err_stop = FALSE, verbose = TRUE, checks = FALSE)
# l_out_markov_BUP_TS  <- markov_model(l_params_all = l_params_BUP_TS, err_stop = FALSE, verbose = TRUE, checks = FALSE)
# l_out_markov_MET_TS  <- markov_model(l_params_all = l_params_MET_TS, err_stop = FALSE, verbose = TRUE, checks = FALSE)
#### Create plots ####
#l_trace_base <- trace_plots(outcomes = l_out_markov_base)
l_trace_BUP_MMS  <- trace_plots(outcomes = l_out_markov_BUP_MMS)
l_trace_MET_MMS  <- trace_plots(outcomes = l_out_markov_MET_MMS)
# l_trace_BUP_TS  <- trace_plots(outcomes = l_out_markov_BUP_TS)
# l_trace_MET_TS  <- trace_plots(outcomes = l_out_markov_MET_TS)
### Outputs ###
# Model 1 (Modified model specification)
# Health state trace
# Base
#pdf("Plots/Markov Trace/Modified Model Spec/trace_states_base.pdf", width = 8, height = 6)
#l_trace_base[[1]]
#dev.off()
# Serostatus trace
# Base
#pdf("Plots/Markov Trace/Modified Model Spec/trace_sero_base.pdf", width = 8, height = 6)
#l_trace_base[[2]]
#dev.off()
# BUP
pdf("Plots/Markov Trace/Modified Model Spec/trace_sero_BUP.pdf", width = 8, height = 6)
l_trace_BUP_MMS[[2]]
dev.off()
# MET
pdf("Plots/Markov Trace/Modified Model Spec/trace_sero_MET.pdf", width = 8, height = 6)
l_trace_MET_MMS[[2]]
dev.off()
# Health state time
# Base
#pdf(file = "Plots/Markov Trace/Modified Model Spec/time_states_base.pdf", width = 8, height = 3)
#l_trace_base[[3]]
#dev.off()
# Health state trace + time
# Base
#pdf(file = "Plots/Markov Trace/Modified Model Spec/full_trace_base.pdf", width = 8, height = 9)
#multiplot(plotlist = l_trace_base[[4]], layout = l_trace_base[[5]])
#dev.off()
# BUP
#pdf(file = "Plots/Markov Trace/Modified Model Spec/full_trace_BUP_MMS.pdf", width = 8, height = 9)
#  multiplot(plotlist = l_trace_BUP_MMS[[4]], layout = l_trace_BUP_MMS[[5]])
#dev.off()
plot_full_trace_BUP_MMS <- grid.arrange(l_trace_BUP_MMS[[1]], l_trace_BUP_MMS[[3]], nrow = 2, ncol = 1, heights = 2:1)
ggsave(plot_full_trace_BUP_MMS,
filename = "Plots/Markov Trace/Modified Model Spec/full_trace_BUP_MMS.png",
width = 8, height = 9, dpi = 350)
# MET
#pdf(file = "Plots/Markov Trace/Modified Model Spec/full_trace_MET_MMS.pdf", width = 8, height = 9)
#multiplot(plotlist = l_trace_MET_MMS[[4]], layout = l_trace_MET_MMS[[5]])
#dev.off()
plot_full_trace_MET_MMS <- grid.arrange(l_trace_MET_MMS[[1]], l_trace_MET_MMS[[3]], nrow = 2, ncol = 1, heights = 2:1)
ggsave(plot_full_trace_MET_MMS,
filename = "Plots/Markov Trace/Modified Model Spec/full_trace_MET_MMS.png",
width = 8, height = 9, dpi = 350)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(data.table)
library(formattable)
library(tidyr)
library(RColorBrewer)
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
source("Analysis/00_load_parameters.R")
# Load posterior
load(file = "outputs/Calibration/summary_posterior.RData")
View(df_posterior_summ)
## Fatal overdose ##
# Witnessed OD
v_dsa_witness_low <- unlist(df_posterior_summ["p_witness", "2.5%"])
v_dsa_witness_high <- unlist(df_posterior_summ["p_witness", "97.5%"])
names(v_dsa_witness_low) <- c("p_witness")
names(v_dsa_witness_high) <- c("p_witness")
