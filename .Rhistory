file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
with(as.list(l_params_all), {
#### Set up model states ####
l_dim_s  <- list() # list of health states
# Base health states
BASE <- l_dim_s[[1]] <- c("MET", "METC", "BUP", "BUPC", "ABS", "REL", "ODN", "ODF")
# Injection/non-injection stratification
INJECT <- l_dim_s[[2]] <- c("NI", "INJ")
# Episodes (1-3)
EP <-  l_dim_s[[3]] <- c("1", "2", "3")
# HIV/HCV status
SERO <- l_dim_s[[4]] <- c("NEG", "HIV", "HCV", "COI")
# Set model periods
if(cali == TRUE){
# Calibration periods
n_t <- (n_cali_max_per + 1) # if calibrating, cut model off at max calibration output (e.g. 36 months for three-years)
} else{
# Maximum model periods(regular)
n_t <- (n_age_max - n_age_init) * n_per # convert years
}
df_flat <- expand.grid(l_dim_s) #combine all elements together into vector of health states
df_flat <- dplyr::rename(df_flat, BASE    = Var1,
INJECT  = Var2,
EP      = Var3,
SERO    = Var4)
# Create index of states to populate transition matrices
# All treatment
TX <- df_flat$BASE == "BUP" | df_flat$BASE == "MET"
TXC <- df_flat$BASE == "BUPC" | df_flat$BASE == "METC"
all_TX <- df_flat$BASE == "BUP" | df_flat$BASE == "BUPC" | df_flat$BASE == "MET" | df_flat$BASE == "METC"
# All out-of-treatment (incl ABS)
OOT <- df_flat$BASE == "REL" | df_flat$BASE == "ABS" | df_flat$BASE == "ODN" | df_flat$BASE == "ODF"
# Buprenorphine
BUP  <- df_flat$BASE == "BUP" # treatment only
BUPC <- df_flat$BASE == "BUPC" # concurrent opioid use
all_BUP <- df_flat$BASE == "BUP" | df_flat$BASE == "BUPC"
# Methadone
MET  <- df_flat$BASE == "MET" # treatment only
METC <- df_flat$BASE == "METC" # concurrent opioid use
all_MET <- df_flat$BASE == "MET" | df_flat$BASE == "METC"
# Relapse
REL <- df_flat$BASE == "REL"
# Overdose
all_OD <- df_flat$BASE == "ODN" | df_flat$BASE == "ODF"
non_OD <- df_flat$BASE != "ODN" & df_flat$BASE != "ODF"
ODN <- df_flat$BASE == "ODN" # non-fatal overdose
ODF <- df_flat$BASE == "ODF" # fatal overdose
# Abstinence
ABS <- df_flat$BASE == "ABS"
# Serostatus
NEG <- df_flat$SERO == "NEG"
HIV <- df_flat$SERO == "HIV"
HCV <- df_flat$SERO == "HCV"
COI <- df_flat$SERO == "COI"
all_HIV <- df_flat$SERO == "HIV" | df_flat$SERO == "COI"
all_HCV <- df_flat$SERO == "HCV" | df_flat$SERO == "COI"
# Injection
INJ <- df_flat$INJECT == "INJ"
NI <- df_flat$INJECT == "NI"
# Episodes
EP1 <- df_flat$EP == "1"
EP2 <- df_flat$EP == "2"
EP3 <- df_flat$EP == "3"
df_n <- unite(df_flat, newCol) # combine columns into one data frame of all health states
v_n_states <- df_n[,1] # convert df into vector
n_states <- length(v_n_states) # total number of health states
l_index_s  <- list(TX = TX, OOT = OOT,
BUP = BUP, BUPC = BUPC,
MET = MET, METC = METC,
REL = REL,
all_OD = all_OD, ODN = ODN, ODF = ODF,
ABS = ABS,
NEG = NEG, HIV = HIV, HCV = HCV, COI = COI,
INJ = INJ, NI = NI,
EP1 = EP1, EP2 = EP2, EP3 = EP3)
#### Set up model states ####
l_dim_s  <- list() # list of health states
# Base health states
BASE <- l_dim_s[[1]] <- c("MET", "METC", "BUP", "BUPC", "ABS", "REL", "ODN", "ODF")
# Injection/non-injection stratification
INJECT <- l_dim_s[[2]] <- c("NI", "INJ")
# Episodes (1-3)
EP <-  l_dim_s[[3]] <- c("1", "2", "3")
# HIV/HCV status
SERO <- l_dim_s[[4]] <- c("NEG", "HIV", "HCV", "COI")
# Set model periods
if(cali == TRUE){
# Calibration periods
n_t <- (n_cali_max_per + 1) # if calibrating, cut model off at max calibration output (e.g. 36 months for three-years)
} else{
# Maximum model periods(regular)
n_t <- (n_age_max - n_age_init) * n_per # convert years
}
df_flat <- expand.grid(l_dim_s) #combine all elements together into vector of health states
df_flat <- dplyr::rename(df_flat, BASE    = Var1,
INJECT  = Var2,
EP      = Var3,
SERO    = Var4)
#### Set up model states ####
l_dim_s  <- list() # list of health states
rm(list = ls()) # to clean the workspace
break
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
load("~/GitHub/OPTIMA-Model/outputs/summary_posterior.RData")
View(df_posterior_summ)
rm(list = ls()) # to clean the workspace
#### Load packages, data and functions ####
#### Load packages and functions ####
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(ggridges) # specialized ridge plots
library(tidyverse)
library(lhs)
library(IMIS)
# To-do: Move functions into R package for OUD model
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/calibration_functions.R")
# Load model inputs #
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv", # calibrate on full trial sample (x% bup; x% met)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
#file.weibull_scale = "data/weibull_scale.csv",
#file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv", # includes calibration-related parameters
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Load calibration inputs #
v_cali_param_names <- c("'Overdose rate (treatment)'",
"'Overdose rate (treatment + opioid)'",
"'Overdose rate (active opioid)'",
"'Overdose rate (inactive opioid)'",
#"'First month mult (treatment)'",
"'First month mult (treatment + opioid)'",
#"'First month mult (active opioid)'",
#"'Injection mult'",
"'Fentanyl mult'",
"'Fatal overdose rate'")
v_par1 <- c(n_TX_OD_shape   = l_params_all$n_TX_OD_shape,
n_TXC_OD_shape  = l_params_all$n_TXC_OD_shape,
n_REL_OD_shape   = l_params_all$n_REL_OD_shape,
n_ABS_OD_low    = l_params_all$n_ABS_OD_low,
#n_TX_OD_mult_shape  = l_params_all$n_TX_OD_mult_shape,
n_TXC_OD_mult_shape = l_params_all$n_TXC_OD_mult_shape,
#n_REL_OD_mult_shape = l_params_all$n_REL_OD_mult_shape,
#n_INJ_OD_mult_shape = l_params_all$n_INJ_OD_mult_shape,
n_fent_OD_mult_shape = l_params_all$n_fent_OD_mult_shape,
n_fatal_OD_shape    = l_params_all$n_fatal_OD_shape) # lower bound estimate for each param
v_par2 <- c(n_TX_OD_scale   = l_params_all$n_TX_OD_scale,
n_TXC_OD_scale  = l_params_all$n_TXC_OD_scale,
n_REL_OD_scale   = l_params_all$n_REL_OD_scale,
n_ABS_OD_high    = l_params_all$n_ABS_OD_high,
#n_TX_OD_mult_scale  = l_params_all$n_TX_OD_mult_scale,
n_TXC_OD_mult_scale = l_params_all$n_TXC_OD_mult_scale,
#n_REL_OD_mult_scale = l_params_all$n_REL_OD_mult_scale,
#n_INJ_OD_mult_scale = l_params_all$n_INJ_OD_mult_scale,
n_fent_OD_mult_scale = l_params_all$n_fent_OD_mult_scale,
n_fatal_OD_scale    = l_params_all$n_fatal_OD_scale)
#### Load calibration targets ####
l_cali_targets <- list(ODF = read.csv(file = "data/cali_target_odf.csv", header = TRUE),
ODN = read.csv(file = "data/cali_target_odn.csv", header = TRUE))
a <- c(0.0245, 0.0189, 0.0275)
b <- c(0.210, 0.210, 0.260)
model_res <- list(a, b)
#  }, error = function(e) NA)
#  if(is.na(jj)) { v_llik_overall <- -Inf }
#} ## End loop over sampled parameter sets
## return GOF
x <- l_cali_targets$ODF$pe
mean <- model_res$a
a <- c(0.0245, 0.0189, 0.0275)
b <- c(0.210, 0.210, 0.260)
model_res <- list(a, b)
test <- model_res$a
model_res <- list(a = a,
b = b)
test <- model_res$a
sd <- l_cali_targets$ODF$se
try <-    sum(dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T))
try <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T)
try2 <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T) * c(1, 0.5, 1)
# Calibration log-liklihood test
a <- c(0.0245, 0.0245, 0.0275)
model_res <- list(a = a,
b = b)
try <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
try <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T)
# Calibration log-liklihood test
a <- c(0.0245, 0.0245, 0.0275)
b <- c(0.210, 0.210, 0.260)
# Calibration log-liklihood test
a <- c(0.0245, 0.0245, 0.0275)
b <- c(0.210, 0.210, 0.260)
model_res <- list(a = a,
b = b)
try <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T)
try2 <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T) * c(1, 0.5, 1)
# Calibration log-liklihood test
a <- c(0.0245, 0.0300, 0.0275)
b <- c(0.210, 0.210, 0.260)
model_res <- list(a = a,
b = b)
#  }, error = function(e) NA)
#  if(is.na(jj)) { v_llik_overall <- -Inf }
#} ## End loop over sampled parameter sets
## return GOF
x <- l_cali_targets$ODF$pe
test <- model_res$a
sd <- l_cali_targets$ODF$se
try <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T)
try2 <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T) * c(1, 0.5, 1)
#### Load calibration targets ####
l_cali_targets <- list(ODF = read.csv(file = "data/cali_target_odf.csv", header = TRUE),
ODN = read.csv(file = "data/cali_target_odn.csv", header = TRUE))
odf_weight <- l_cali_targets$ODF$weight
try <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T)
try2 <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T) * l_cali_targets$ODF$weight
odn_weight <- l_cali_targets$ODN$weight
try <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T)
try2 <-    dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T) * l_cali_targets$ODN$weight
try2 <-    sum(dnorm(x = l_cali_targets$ODF$pe,
mean = model_res$a,
sd = l_cali_targets$ODF$se,
log = T) * l_cali_targets$ODN$weight)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(rlist)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
#source("R/plot_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
