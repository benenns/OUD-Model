n_TXC_OD_mult_prior = n_TXC_OD_mult,
n_REL_OD_mult_prior = n_REL_OD_mult,
n_INJ_OD_mult_prior = n_INJ_OD_mult,
n_fatal_OD_prior = n_fatal_OD)
View(m_calib_post)
View(m_calib_prior)
load("~/GitHub/OPTIMA-Model/outputs/imis_output.RData")
#### Load packages and functions ####
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(ggridges) # specialized ridge plots
library(tidyverse)
library(lhs)
library(IMIS)
# To-do: Move functions into R package for OUD model
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/calibration_functions.R")
# Load model inputs #
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv", # calibrate on full trial sample (x% bup; x% met)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv", # includes calibration-related parameters
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Load calibration inputs #
v_cali_param_names <- c("n_TX_OD",
"n_TXC_OD",
"n_REL_OD",
"n_TX_OD_mult",
"n_TXC_OD_mult",
"n_REL_OD_mult",
"n_INJ_OD_mult",
"n_fatal_OD")
v_shape <- c(n_TX_OD_shape   = l_params_all$n_TX_OD_shape,
n_TXC_OD_shape  = l_params_all$n_TXC_OD_shape,
n_REL_OD_shape   = l_params_all$n_REL_OD_shape,
n_TX_OD_mult_shape  = l_params_all$n_TX_OD_mult_shape,
n_TXC_OD_mult_shape = l_params_all$n_TXC_OD_mult_shape,
n_REL_OD_mult_shape = l_params_all$n_REL_OD_mult_shape,
n_INJ_OD_mult_shape = l_params_all$n_INJ_OD_mult_shape,
n_fatal_OD_shape    = l_params_all$n_fatal_OD_shape) # lower bound estimate for each param
v_scale <- c(n_TX_OD_scale   = l_params_all$n_TX_OD_scale,
n_TXC_OD_scale  = l_params_all$n_TXC_OD_scale,
n_REL_OD_scale   = l_params_all$n_REL_OD_scale,
n_TX_OD_mult_scale  = l_params_all$n_TX_OD_mult_scale,
n_TXC_OD_mult_scale = l_params_all$n_TXC_OD_mult_scale,
n_REL_OD_mult_scale = l_params_all$n_REL_OD_mult_scale,
n_INJ_OD_mult_scale = l_params_all$n_INJ_OD_mult_scale,
n_fatal_OD_scale    = l_params_all$n_fatal_OD_scale)
# Draw sample prior
m_calib_prior <- sample.prior(n_samp = 1000)
# Prepare data
df_calib_post  <- as.data.frame(m_calib_post) %>% mutate(ID = row_number()) %>% rename(n_TX_OD_post  = n_TX_OD,
n_TXC_OD_post = n_TXC_OD,
n_REL_OD_post = n_REL_OD,
n_TX_OD_mult_post = n_TX_OD_mult,
n_TXC_OD_mult_post = n_TXC_OD_mult,
n_REL_OD_mult_post = n_REL_OD_mult,
n_INJ_OD_mult_post = n_INJ_OD_mult,
n_fatal_OD_post = n_fatal_OD)
df_calib_prior <- as.data.frame(m_calib_prior) %>% mutate(ID = row_number()) %>% rename(n_TX_OD_prior  = n_TX_OD,
n_TXC_OD_prior = n_TXC_OD,
n_REL_OD_prior = n_REL_OD,
n_TX_OD_mult_prior = n_TX_OD_mult,
n_TXC_OD_mult_prior = n_TXC_OD_mult,
n_REL_OD_mult_prior = n_REL_OD_mult,
n_INJ_OD_mult_prior = n_INJ_OD_mult,
n_fatal_OD_prior = n_fatal_OD)
df_calib_post  <- as.data.frame(m_calib_post) %>% mutate(ID = row_number()) %>% rename(n_TX_OD_post  = n_TX_OD,
n_TXC_OD_post = n_TXC_OD,
n_REL_OD_post = n_REL_OD,
n_TX_OD_mult_post = n_TX_OD_mult,
n_TXC_OD_mult_post = n_TXC_OD_mult,
n_REL_OD_mult_post = n_REL_OD_mult,
n_INJ_OD_mult_post = n_INJ_OD_mult,
n_fatal_OD_post = n_fatal_od) #make sure this label is changed in next iteration ("OD")
df_calib_prior <- as.data.frame(m_calib_prior) %>% mutate(ID = row_number()) %>% rename(n_TX_OD_prior  = n_TX_OD,
n_TXC_OD_prior = n_TXC_OD,
n_REL_OD_prior = n_REL_OD,
n_TX_OD_mult_prior = n_TX_OD_mult,
n_TXC_OD_mult_prior = n_TXC_OD_mult,
n_REL_OD_mult_prior = n_REL_OD_mult,
n_INJ_OD_mult_prior = n_INJ_OD_mult,
n_fatal_OD_prior = n_fatal_OD)
View(df_calib_post)
View(df_calib_prior)
#df_calib_prior_post <- merge(df_calib_prior, df_calib_post, by.x = "ID", by.y = "ID") #merge prior and posterior estimates
df_calib_prior_post <- rbind(df_calib_prior, df_calib_post)
df_samp_prior <- melt(cbind(Distribution = "Prior",
as.data.frame(m_calib_prior[1:1000, ])),
variable.name = "Parameter")
df_samp_post_imis  <- melt(cbind(Distribution = "Posterior IMIS",
as.data.frame(m_calib_post[1:1000, ])),
variable.name = "Parameter")
View(m_calib_post)
View(df_samp_post_imis)
#df_calib_prior_post <- merge(df_calib_prior, df_calib_post, by.x = "ID", by.y = "ID") #merge prior and posterior estimates
df_calib_prior_post <- rbind(df_samp_prior, df_calib_post)
View(df_samp_prior)
#df_calib_prior_post <- merge(df_calib_prior, df_calib_post, by.x = "ID", by.y = "ID") #merge prior and posterior estimates
df_calib_prior_post <- rbind(df_samp_prior, df_samp_post_imis)
df_calib_prior_post$Distribution <- ordered(df_calib_prior_post$Distribution,
levels = c("Prior",
"Posterior"))
View(df_calib_prior_post)
df_samp_prior_post$Parameter <- factor(df_samp_prior_post$Parameter,
levels = levels(df_samp_prior_post$Parameter),
ordered = TRUE,
labels = v_param_names)
df_calib_prior_post$Parameter <- factor(df_samp_prior_post$Parameter,
levels = levels(df_samp_prior_post$Parameter),
ordered = TRUE,
labels = v_param_names)
#v_names_params_greek <- c(expression(l),
#                          expression(g),  # expression(gamma)
#                          expression(lambda[2]),
#                          expression(lambda[3]),
#                          expression(lambda[4]),
#                          expression(lambda[5]),
#                          expression(lambda[6]),
#                          expression(p[adeno]),
#                          expression(p[small]))
df_calib_prior_post$Parameter <- factor(df_calib_prior_post$Parameter,
levels = levels(df_calib_prior_post$Parameter),
ordered = TRUE,
labels = v_param_names)
#                          expression(p[small]))
df_calib_prior_post$Parameter <- factor(df_calib_prior_post$Parameter,
levels = levels(df_calib_prior_post$Parameter),
ordered = TRUE,
labels = v_param_names)
v_param_names  <- c("n_TX_OD",
"n_TXC_OD",
"n_REL_OD",
"n_TX_OD_mult",
"n_TXC_OD_mult",
"n_REL_OD_mult",
"n_INJ_OD_mult",
"n_fatal_OD")
df_calib_prior_post$Parameter <- factor(df_calib_prior_post$Parameter,
levels = levels(df_calib_prior_post$Parameter),
ordered = TRUE,
labels = v_param_names)
View(df_calib_prior_post)
#                          expression(p[small]))
df_calib_prior_post$Parameter <- factor(df_calib_prior_post$Parameter,
levels = levels(df_calib_prior_post$Parameter),
ordered = TRUE)#,
#labels = v_param_names)
load("~/GitHub/OPTIMA-Model/outputs/summary_posterior.RData")
load("~/GitHub/OPTIMA-Model/outputs/summary_posterior.RData")
View(df_posterior_summ)
### Plot priors and ANN and IMIS posteriors
prior_v_posterior <- ggplot(df_calib_prior_post,
aes(x = value, y = ..density.., fill = Distribution)) +
facet_wrap(~Parameter, scales = "free",
ncol = 3,
labeller = label_parsed) +
geom_vline(data = df_posterior_summ,
aes(xintercept = value, linetype = Type, color = Type)) +
#scale_x_continuous(breaks = dampack::number_ticks(5)) +
scale_color_manual("", values = c("black", "navy blue", "tomato")) +
geom_density(alpha=0.5) +
theme_bw(base_size = 16) +
guides(fill = guide_legend(title = "", order = 1),
linetype = guide_legend(title = "", order = 2),
color = guide_legend(title = "", order = 2)) +
theme(legend.position = "bottom",
legend.box = "vertical",
legend.margin=margin(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
strip.background = element_rect(fill = "white",
color = "white"),
strip.text = element_text(hjust = 0))
prior_v_posterior
prior_v_posterior <- ggplot(df_calib_prior_post,
aes(x = value, y = ..density.., fill = Distribution)) +
facet_wrap(~Parameter, scales = "free",
ncol = 3,
labeller = label_parsed) +
#geom_vline(data = df_posterior_summ,
#           aes(xintercept = value, linetype = Type, color = Type)) +
#scale_x_continuous(breaks = dampack::number_ticks(5)) +
scale_color_manual("", values = c("black", "navy blue", "tomato")) +
geom_density(alpha=0.5) +
theme_bw(base_size = 16) +
guides(fill = guide_legend(title = "", order = 1),
linetype = guide_legend(title = "", order = 2),
color = guide_legend(title = "", order = 2)) +
theme(legend.position = "bottom",
legend.box = "vertical",
legend.margin=margin(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
strip.background = element_rect(fill = "white",
color = "white"),
strip.text = element_text(hjust = 0))
prior_v_posterior
ggsave(prior_v_posterior,
filename = "Plots/Calibration/prior-v-posterior.pdf",
width = 10, height = 7)
ggsave(prior_v_posterior,
filename = "Plots/Calibration/prior-v-posterior.png",
width = 10, height = 7)
df_samp_post_imis  <- melt(cbind(Distribution = "Posterior",
as.data.frame(m_calib_post[1:1000, ])),
variable.name = "Parameter") %>% rename(n_fatal_OD = n_fatal_od)
View(m_calib_post)
View(m_calib_prior)
View(m_calib_post)
View(df_samp_post_imis)
View(m_calib_post)
#This step just for now (remove later)
colnames(m_calib_post)[8] <- "n_fatal_OD"
View(m_calib_post)
# Prepare data
#This step just for now (remove later)
colnames(m_calib_post)[8] <- "n_fatal_OD"
df_samp_prior <- melt(cbind(Distribution = "Prior",
as.data.frame(m_calib_prior[1:1000, ])),
variable.name = "Parameter")
df_samp_post_imis  <- melt(cbind(Distribution = "Posterior",
as.data.frame(m_calib_post[1:1000, ])),
variable.name = "Parameter") %>% rename(n_fatal_OD = n_fatal_od)
df_calib_prior_post <- rbind(df_samp_prior, df_samp_post_imis)
## (v.params0 - colMeans(df_post_imis))^2
#df_samp_post_ann   <- melt(cbind(Distribution = "Posterior BayCANN",
#                                 as.data.frame(df_post_ann[1:1000, ])),
#                           variable.name = "Parameter")
#df_samp_prior_post <- rbind(df_samp_prior,
#                            df_samp_post_ann,
#                            df_samp_post_imis)
df_calib_prior_post$Distribution <- ordered(df_calib_prior_post$Distribution,
levels = c("Prior",
"Posterior"))
#v_names_params_greek <- c(expression(l),
#                          expression(g),  # expression(gamma)
#                          expression(lambda[2]),
#                          expression(lambda[3]),
#                          expression(lambda[4]),
#                          expression(lambda[5]),
#                          expression(lambda[6]),
#                          expression(p[adeno]),
#                          expression(p[small]))
df_calib_prior_post$Parameter <- factor(df_calib_prior_post$Parameter,
levels = levels(df_calib_prior_post$Parameter),
ordered = TRUE)#,
#labels = v_param_names)
df_maps_n_true_params <- data.frame(Type = ordered(rep(c("True parameter",
"IMIS MAP",
"BayCANN MAP"), each = 9),
levels = c("True parameter",
"IMIS MAP",
"BayCANN MAP")),
Parameter = as.character(v_names_params_greek),
value = c(x_true_data$x,
v_calib_post_map,
t(map_baycann)))
df_maps_n_true_params
### Plot priors and ANN and IMIS posteriors
prior_v_posterior <- ggplot(df_calib_prior_post,
aes(x = value, y = ..density.., fill = Distribution)) +
facet_wrap(~Parameter, scales = "free",
ncol = 3,
labeller = label_parsed) +
#geom_vline(data = df_posterior_summ,
#           aes(xintercept = value, linetype = Type, color = Type)) +
#scale_x_continuous(breaks = dampack::number_ticks(5)) +
scale_color_manual("", values = c("black", "navy blue", "tomato")) +
geom_density(alpha=0.5) +
theme_bw(base_size = 16) +
guides(fill = guide_legend(title = "", order = 1),
linetype = guide_legend(title = "", order = 2),
color = guide_legend(title = "", order = 2)) +
theme(legend.position = "bottom",
legend.box = "vertical",
legend.margin=margin(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
strip.background = element_rect(fill = "white",
color = "white"),
strip.text = element_text(hjust = 0))
#prior_v_posterior
ggsave(prior_v_posterior,
filename = "Plots/Calibration/prior-v-posterior.pdf",
width = 10, height = 7)
ggsave(prior_v_posterior,
filename = "Plots/Calibration/prior-v-posterior.png",
width = 10, height = 7)
#ggsave(prior_v_posterior,
#       filename = "Plots/Calibration/prior-v-posterior.jpeg",
#       width = 10, height = 7)
colnames(m_calib_post)[8] <- "n_fatal_OD"
df_samp_prior <- melt(cbind(Distribution = "Prior",
as.data.frame(m_calib_prior[1:1000, ])),
variable.name = "Parameter")
df_samp_post_imis  <- melt(cbind(Distribution = "Posterior",
as.data.frame(m_calib_post[1:1000, ])),
variable.name = "Parameter") %>% rename(n_fatal_OD = n_fatal_od)
df_calib_prior_post <- rbind(df_samp_prior, df_samp_post_imis)
## (v.params0 - colMeans(df_post_imis))^2
#df_samp_post_ann   <- melt(cbind(Distribution = "Posterior BayCANN",
#                                 as.data.frame(df_post_ann[1:1000, ])),
#                           variable.name = "Parameter")
#df_samp_prior_post <- rbind(df_samp_prior,
#                            df_samp_post_ann,
#                            df_samp_post_imis)
df_calib_prior_post$Distribution <- ordered(df_calib_prior_post$Distribution,
levels = c("Prior",
"Posterior"))
#v_names_params_greek <- c(expression(l),
#                          expression(g),  # expression(gamma)
#                          expression(lambda[2]),
#                          expression(lambda[3]),
#                          expression(lambda[4]),
#                          expression(lambda[5]),
#                          expression(lambda[6]),
#                          expression(p[adeno]),
#                          expression(p[small]))
df_calib_prior_post$Parameter <- factor(df_calib_prior_post$Parameter,
levels = levels(df_calib_prior_post$Parameter),
ordered = TRUE)#,
### Plot priors and ANN and IMIS posteriors
prior_v_posterior <- ggplot(df_calib_prior_post,
aes(x = value, y = ..density.., fill = Distribution)) +
facet_wrap(~Parameter, scales = "free",
ncol = 3,
labeller = label_parsed) +
#geom_vline(data = df_posterior_summ,
#           aes(xintercept = value, linetype = Type, color = Type)) +
#scale_x_continuous(breaks = dampack::number_ticks(5)) +
scale_color_manual("", values = c("black", "navy blue", "tomato")) +
geom_density(alpha=0.5) +
theme_bw(base_size = 16) +
guides(fill = guide_legend(title = "", order = 1),
linetype = guide_legend(title = "", order = 2),
color = guide_legend(title = "", order = 2)) +
theme(legend.position = "bottom",
legend.box = "vertical",
legend.margin=margin(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
strip.background = element_rect(fill = "white",
color = "white"),
strip.text = element_text(hjust = 0))
prior_v_posterior
View(df_calib_post)
load("~/GitHub/OPTIMA-Model/outputs/imis_output.RData")
#### Plot prior vs. posterior distribution for calibration parameters ####
# Draw sample prior
m_calib_prior <- sample.prior(n_samp = 1000)
#### Load packages, data and functions ####
#### Load packages and functions ####
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(ggridges) # specialized ridge plots
library(tidyverse)
library(lhs)
library(IMIS)
# To-do: Move functions into R package for OUD model
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/calibration_functions.R")
# Load model inputs #
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv", # calibrate on full trial sample (x% bup; x% met)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv", # includes calibration-related parameters
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Load calibration inputs #
v_cali_param_names <- c("n_TX_OD",
"n_TXC_OD",
"n_REL_OD",
"n_TX_OD_mult",
"n_TXC_OD_mult",
"n_REL_OD_mult",
"n_INJ_OD_mult",
"n_fatal_OD")
v_shape <- c(n_TX_OD_shape   = l_params_all$n_TX_OD_shape,
n_TXC_OD_shape  = l_params_all$n_TXC_OD_shape,
n_REL_OD_shape   = l_params_all$n_REL_OD_shape,
n_TX_OD_mult_shape  = l_params_all$n_TX_OD_mult_shape,
n_TXC_OD_mult_shape = l_params_all$n_TXC_OD_mult_shape,
n_REL_OD_mult_shape = l_params_all$n_REL_OD_mult_shape,
n_INJ_OD_mult_shape = l_params_all$n_INJ_OD_mult_shape,
n_fatal_OD_shape    = l_params_all$n_fatal_OD_shape) # lower bound estimate for each param
v_scale <- c(n_TX_OD_scale   = l_params_all$n_TX_OD_scale,
n_TXC_OD_scale  = l_params_all$n_TXC_OD_scale,
n_REL_OD_scale   = l_params_all$n_REL_OD_scale,
n_TX_OD_mult_scale  = l_params_all$n_TX_OD_mult_scale,
n_TXC_OD_mult_scale = l_params_all$n_TXC_OD_mult_scale,
n_REL_OD_mult_scale = l_params_all$n_REL_OD_mult_scale,
n_INJ_OD_mult_scale = l_params_all$n_INJ_OD_mult_scale,
n_fatal_OD_scale    = l_params_all$n_fatal_OD_scale)
#### Plot prior vs. posterior distribution for calibration parameters ####
# Draw sample prior
m_calib_prior <- sample.prior(n_samp = 1000)
colnames(m_calib_post)[8] <- "n_fatal_OD"
df_samp_prior <- melt(cbind(Distribution = "Prior",
as.data.frame(m_calib_prior[1:1000, ])),
variable.name = "Parameter")
df_samp_post_imis  <- melt(cbind(Distribution = "Posterior",
as.data.frame(m_calib_post[1:1000, ])),
variable.name = "Parameter") %>% rename(n_fatal_OD = n_fatal_od)
df_calib_prior_post <- rbind(df_samp_prior, df_samp_post_imis)
colnames(m_calib_post)[8] <- "n_fatal_OD"
df_samp_prior <- melt(cbind(Distribution = "Prior",
as.data.frame(m_calib_prior[1:1000, ])),
variable.name = "Parameter")
df_samp_post_imis  <- melt(cbind(Distribution = "Posterior",
as.data.frame(m_calib_post[1:1000, ])),
variable.name = "Parameter")
df_calib_prior_post <- rbind(df_samp_prior, df_samp_post_imis)
View(m_calib_post)
df_calib_prior_post$Distribution <- ordered(df_calib_prior_post$Distribution,
levels = c("Prior",
"Posterior"))
df_calib_prior_post$Parameter <- factor(df_calib_prior_post$Parameter,
levels = levels(df_calib_prior_post$Parameter),
ordered = TRUE)#,
#labels = v_param_names)
### Plot priors and ANN and IMIS posteriors
prior_v_posterior <- ggplot(df_calib_prior_post,
aes(x = value, y = ..density.., fill = Distribution)) +
facet_wrap(~Parameter, scales = "free",
ncol = 3,
labeller = label_parsed) +
#geom_vline(data = df_posterior_summ,
#           aes(xintercept = value, linetype = Type, color = Type)) +
#scale_x_continuous(breaks = dampack::number_ticks(5)) +
scale_color_manual("", values = c("black", "navy blue", "tomato")) +
geom_density(alpha=0.5) +
theme_bw(base_size = 16) +
guides(fill = guide_legend(title = "", order = 1),
linetype = guide_legend(title = "", order = 2),
color = guide_legend(title = "", order = 2)) +
theme(legend.position = "bottom",
legend.box = "vertical",
legend.margin=margin(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
strip.background = element_rect(fill = "white",
color = "white"),
strip.text = element_text(hjust = 0))
prior_v_posterior
ggsave(prior_v_posterior,
filename = "Plots/Calibration/prior-v-posterior.pdf",
width = 10, height = 7)
ggsave(prior_v_posterior,
filename = "Plots/Calibration/prior-v-posterior.png",
width = 10, height = 7)
#ggsave(prior_v_posterior,
#       filename = "Plots/Calibration/prior-v-posterior.jpeg",
#       width = 10, height = 7)
View(df_calib_prior_post)
prior_v_posterior <- ggplot(df_calib_prior_post,
aes(x = value, y = ..density.., fill = Distribution)) +
facet_wrap(~Parameter, scales = "free",
ncol = 3,
labeller = label_parsed) +
#geom_vline(data = df_posterior_summ,
#           aes(xintercept = value, linetype = Type, color = Type)) +
#scale_x_continuous(breaks = dampack::number_ticks(5)) +
geom_vline(data = df_posterior_summ,
aes(xintercept = value, colour = "black"), MAP) +
scale_color_manual("", values = c("black", "navy blue", "tomato")) +
geom_density(alpha=0.5) +
theme_bw(base_size = 16) +
guides(fill = guide_legend(title = "", order = 1),
linetype = guide_legend(title = "", order = 2),
color = guide_legend(title = "", order = 2)) +
theme(legend.position = "bottom",
legend.box = "vertical",
legend.margin=margin(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
strip.background = element_rect(fill = "white",
color = "white"),
strip.text = element_text(hjust = 0))
