file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv",
file.imis_output = "outputs/imis_output.RData")
### Run decision model on each parameter set of PSA input dataset to produce
### PSA outputs for cost and effects
n_sim <- 500 # just to test function (will be set as n_sim)
# Initialize data frames
df_outcomes_MET_PSA <- data.frame()
df_outcomes_BUP_PSA <- data.frame()
df_ICER_PSA <- data.frame()
v_outcomes_names <- c("Total Costs (1-year)", "Total Costs (5-year)", "Total Costs (10-year)", "Total Costs (Lifetime)", "Health Sector Costs (1-year)", "Health Sector Costs (5-year)", "Health Sector Costs (10-year)", "Health Sector Costs (Lifetime)",
"Criminal Costs (1-year)", "Criminal Costs (5-year)", "Criminal Costs (10-year)", "Criminal Costs (Lifetime)", "Treatment Costs (1-year)", "Treatment Costs (5-year)", "Treatment Costs (10-year)", "Treatment Costs (Lifetime)",
"Total QALYs (1-year)", "Total QALYs (5-year)", "Total QALYs (10-year)", "Total QALYs (Lifetime)")
v_ICER_names <- c("ICER (1-year)", "ICER (5-year)", "ICER (10-year)", "ICER (Lifetime)", "ICER (Health Sector 1-year)", "ICER (Health Sector 5-year)", "ICER (Health Sector 10-year)", "ICER (Health Sector Lifetime)")
for(i in 1:n_sim){ # i <- 1
# Update parameter set for each scenario with next set of PSA drawn parameters
l_psa_input_MET <- update_param_list(l_params_all = l_params_MET, params_updated = df_psa_params[i,])
l_psa_input_BUP <- update_param_list(l_params_all = l_params_BUP, params_updated = df_psa_params[i,])
# Run model and generate outputs
l_outcomes_MET <- outcomes(l_params_all = l_psa_input_MET, v_params_calib = v_calib_post_map)
l_outcomes_BUP <- outcomes(l_params_all = l_psa_input_BUP, v_params_calib = v_calib_post_map)
# Extract cost and QALY outputs
df_outcomes_MET_PSA <- rbind(df_outcomes_MET_PSA, l_outcomes_MET$df_outcomes)
df_outcomes_BUP_PSA <- rbind(df_outcomes_BUP_PSA, l_outcomes_BUP$df_outcomes)
# Calculate ICER (societal and health sector perspective)
l_ICER <- ICER(outcomes_comp = l_outcomes_MET, outcomes_int = l_outcomes_BUP)
df_ICER_PSA <- rbind(df_ICER_PSA, l_ICER$df_icer)
}
### Output results
## As .RData
save(df_outcomes_MET_PSA,
file = "outputs/PSA/outcomes_MET_PSA.RData")
save(df_outcomes_BUP_PSA,
file = "outputs/PSA/outcomes_BUP_PSA.RData")
save(df_ICER_PSA,
file = "outputs/PSA/ICER_PSA.RData")
## As .csv
write.csv(df_outcomes_MET_PSA,
file = "outputs/PSA/outcomes_MET_PSA.csv",
row.names = FALSE)
write.csv(df_outcomes_BUP_PSA,
file = "outputs/PSA/outcomes_BUP_PSA.csv",
row.names = FALSE)
write.csv(df_ICER_PSA,
file = "outputs/PSA/ICER_PSA.csv",
row.names = FALSE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(rBeta2009)
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
source("R/generate_psa_parameters.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
# Calibrated parameter values
load(file = "outputs/imis_output.RData")
# All parameters
# BNX scenario (primary model definition)
l_params_BUP <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_bup.csv", # Change initial distributions (100% in BUP)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Methadone scenario (primary model definition)
l_params_MET <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_met.csv", # Change initial distributions (100% in MET)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
### PSA model outputs
### Run Markov model for PSA draws and return outputs ###
# Generate PSA parameter draws
df_psa_params <- generate_psa_params(n_sim = 1000, seed = 3730687, n_samp = 250,
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv",
file.imis_output = "outputs/imis_output.RData")
### Run decision model on each parameter set of PSA input dataset to produce
### PSA outputs for cost and effects
n_sim <- 500 # just to test function (will be set as n_sim)
# Initialize data frames
df_outcomes_MET_PSA <- data.frame()
df_outcomes_BUP_PSA <- data.frame()
df_ICER_PSA <- data.frame()
v_outcomes_names <- c("Total Costs (1-year)", "Total Costs (5-year)", "Total Costs (10-year)", "Total Costs (Lifetime)", "Health Sector Costs (1-year)", "Health Sector Costs (5-year)", "Health Sector Costs (10-year)", "Health Sector Costs (Lifetime)",
"Criminal Costs (1-year)", "Criminal Costs (5-year)", "Criminal Costs (10-year)", "Criminal Costs (Lifetime)", "Treatment Costs (1-year)", "Treatment Costs (5-year)", "Treatment Costs (10-year)", "Treatment Costs (Lifetime)",
"Total QALYs (1-year)", "Total QALYs (5-year)", "Total QALYs (10-year)", "Total QALYs (Lifetime)")
v_ICER_names <- c("ICER (1-year)", "ICER (5-year)", "ICER (10-year)", "ICER (Lifetime)",
"ICER (Health Sector 1-year)", "ICER (Health Sector 5-year)", "ICER (Health Sector 10-year)", "ICER (Health Sector Lifetime)",
"Incremental Costs (1-year)", "Incremental QALYs (1-year)", "Incremental Costs (5-year)", "Incremental QALYs (5-year)", "Incremental Costs (10-year)", "Incremental QALYs (10-year)", "Incremental Costs (Lifetime)", "Incremental QALYs (Lifetime)",
"Incremental Costs (Health Sector 1-year)", "Incremental QALYs (Health Sector 1-year)", "Incremental Costs (Health Sector 5-year)", "Incremental QALYs (Health Sector 5-year)", "Incremental Costs (Health Sector 10-year)", "Incremental QALYs (Health Sector 10-year)", "Incremental Costs (Health Sector Lifetime)", "Incremental QALYs (Health Sector Lifetime)")
for(i in 1:n_sim){ # i <- 1
# Update parameter set for each scenario with next set of PSA drawn parameters
l_psa_input_MET <- update_param_list(l_params_all = l_params_MET, params_updated = df_psa_params[i,])
l_psa_input_BUP <- update_param_list(l_params_all = l_params_BUP, params_updated = df_psa_params[i,])
# Run model and generate outputs
l_outcomes_MET <- outcomes(l_params_all = l_psa_input_MET, v_params_calib = v_calib_post_map)
l_outcomes_BUP <- outcomes(l_params_all = l_psa_input_BUP, v_params_calib = v_calib_post_map)
# Extract cost and QALY outputs
df_outcomes_MET_PSA <- rbind(df_outcomes_MET_PSA, l_outcomes_MET$df_outcomes)
df_outcomes_BUP_PSA <- rbind(df_outcomes_BUP_PSA, l_outcomes_BUP$df_outcomes)
# Calculate ICER (societal and health sector perspective)
l_ICER <- ICER(outcomes_comp = l_outcomes_MET, outcomes_int = l_outcomes_BUP)
df_ICER_PSA <- rbind(df_ICER_PSA, l_ICER$df_icer)
}
### Output results
## As .RData
save(df_outcomes_MET_PSA,
file = "outputs/PSA/outcomes_MET_PSA.RData")
save(df_outcomes_BUP_PSA,
file = "outputs/PSA/outcomes_BUP_PSA.RData")
save(df_ICER_PSA,
file = "outputs/PSA/ICER_PSA.RData")
## As .csv
write.csv(df_outcomes_MET_PSA,
file = "outputs/PSA/outcomes_MET_PSA.csv",
row.names = FALSE)
write.csv(df_outcomes_BUP_PSA,
file = "outputs/PSA/outcomes_BUP_PSA.csv",
row.names = FALSE)
write.csv(df_ICER_PSA,
file = "outputs/PSA/ICER_PSA.csv",
row.names = FALSE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(rBeta2009)
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
source("R/generate_psa_parameters.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
# Calibrated parameter values
load(file = "outputs/imis_output.RData")
# All parameters
# BNX scenario (primary model definition)
l_params_BUP <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_bup.csv", # Change initial distributions (100% in BUP)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Methadone scenario (primary model definition)
l_params_MET <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_met.csv", # Change initial distributions (100% in MET)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
### PSA model outputs
### Run Markov model for PSA draws and return outputs ###
# Generate PSA parameter draws
df_psa_params <- generate_psa_params(n_sim = 1000, seed = 3730687, n_samp = 250,
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv",
file.imis_output = "outputs/imis_output.RData")
### Run decision model on each parameter set of PSA input dataset to produce
### PSA outputs for cost and effects
n_sim <- 250 # just to test function (will be set as n_sim)
# Initialize data frames
df_outcomes_MET_PSA <- data.frame()
df_outcomes_BUP_PSA <- data.frame()
df_ICER_PSA <- data.frame()
v_outcomes_names <- c("Total Costs (1-year)", "Total Costs (5-year)", "Total Costs (10-year)", "Total Costs (Lifetime)", "Health Sector Costs (1-year)", "Health Sector Costs (5-year)", "Health Sector Costs (10-year)", "Health Sector Costs (Lifetime)",
"Criminal Costs (1-year)", "Criminal Costs (5-year)", "Criminal Costs (10-year)", "Criminal Costs (Lifetime)", "Treatment Costs (1-year)", "Treatment Costs (5-year)", "Treatment Costs (10-year)", "Treatment Costs (Lifetime)",
"Total QALYs (1-year)", "Total QALYs (5-year)", "Total QALYs (10-year)", "Total QALYs (Lifetime)")
v_ICER_names <- c("ICER (1-year)", "ICER (5-year)", "ICER (10-year)", "ICER (Lifetime)",
"ICER (Health Sector 1-year)", "ICER (Health Sector 5-year)", "ICER (Health Sector 10-year)", "ICER (Health Sector Lifetime)",
"Incremental Costs (1-year)", "Incremental QALYs (1-year)", "Incremental Costs (5-year)", "Incremental QALYs (5-year)", "Incremental Costs (10-year)", "Incremental QALYs (10-year)", "Incremental Costs (Lifetime)", "Incremental QALYs (Lifetime)",
"Incremental Costs (Health Sector 1-year)", "Incremental QALYs (Health Sector 1-year)", "Incremental Costs (Health Sector 5-year)", "Incremental QALYs (Health Sector 5-year)", "Incremental Costs (Health Sector 10-year)", "Incremental QALYs (Health Sector 10-year)", "Incremental Costs (Health Sector Lifetime)", "Incremental QALYs (Health Sector Lifetime)")
for(i in 1:n_sim){ # i <- 1
# Update parameter set for each scenario with next set of PSA drawn parameters
l_psa_input_MET <- update_param_list(l_params_all = l_params_MET, params_updated = df_psa_params[i,])
l_psa_input_BUP <- update_param_list(l_params_all = l_params_BUP, params_updated = df_psa_params[i,])
# Run model and generate outputs
l_outcomes_MET <- outcomes(l_params_all = l_psa_input_MET, v_params_calib = v_calib_post_map)
l_outcomes_BUP <- outcomes(l_params_all = l_psa_input_BUP, v_params_calib = v_calib_post_map)
# Extract cost and QALY outputs
df_outcomes_MET_PSA <- rbind(df_outcomes_MET_PSA, l_outcomes_MET$df_outcomes)
df_outcomes_BUP_PSA <- rbind(df_outcomes_BUP_PSA, l_outcomes_BUP$df_outcomes)
# Calculate ICER (societal and health sector perspective)
l_ICER <- ICER(outcomes_comp = l_outcomes_MET, outcomes_int = l_outcomes_BUP)
df_ICER_PSA <- rbind(df_ICER_PSA, l_ICER$df_icer)
}
### Output results
## As .RData
save(df_outcomes_MET_PSA,
file = "outputs/PSA/outcomes_MET_PSA.RData")
save(df_outcomes_BUP_PSA,
file = "outputs/PSA/outcomes_BUP_PSA.RData")
save(df_ICER_PSA,
file = "outputs/PSA/ICER_PSA.RData")
## As .csv
write.csv(df_outcomes_MET_PSA,
file = "outputs/PSA/outcomes_MET_PSA.csv",
row.names = FALSE)
write.csv(df_outcomes_BUP_PSA,
file = "outputs/PSA/outcomes_BUP_PSA.csv",
row.names = FALSE)
write.csv(df_ICER_PSA,
file = "outputs/PSA/ICER_PSA.csv",
row.names = FALSE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(rBeta2009)
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
source("R/generate_psa_parameters.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
# Calibrated parameter values
load(file = "outputs/imis_output.RData")
# All parameters
# BNX scenario (primary model definition)
l_params_BUP <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_bup.csv", # Change initial distributions (100% in BUP)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Methadone scenario (primary model definition)
l_params_MET <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_met.csv", # Change initial distributions (100% in MET)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
### PSA model outputs
### Run Markov model for PSA draws and return outputs ###
# Generate PSA parameter draws
df_psa_params <- generate_psa_params(n_sim = 1000, seed = 3730687, n_samp = 250,
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv",
file.imis_output = "outputs/imis_output.RData")
### Run decision model on each parameter set of PSA input dataset to produce
### PSA outputs for cost and effects
n_sim <- 500 # just to test function (will be set as n_sim)
# Initialize data frames
df_outcomes_MET_PSA <- data.frame()
df_outcomes_BUP_PSA <- data.frame()
df_ICER_PSA <- data.frame()
v_outcomes_names <- c("Total Costs (1-year)", "Total Costs (5-year)", "Total Costs (10-year)", "Total Costs (Lifetime)", "Health Sector Costs (1-year)", "Health Sector Costs (5-year)", "Health Sector Costs (10-year)", "Health Sector Costs (Lifetime)",
"Criminal Costs (1-year)", "Criminal Costs (5-year)", "Criminal Costs (10-year)", "Criminal Costs (Lifetime)", "Treatment Costs (1-year)", "Treatment Costs (5-year)", "Treatment Costs (10-year)", "Treatment Costs (Lifetime)",
"Total QALYs (1-year)", "Total QALYs (5-year)", "Total QALYs (10-year)", "Total QALYs (Lifetime)")
v_ICER_names <- c("ICER (1-year)", "ICER (5-year)", "ICER (10-year)", "ICER (Lifetime)",
"ICER (Health Sector 1-year)", "ICER (Health Sector 5-year)", "ICER (Health Sector 10-year)", "ICER (Health Sector Lifetime)",
"Incremental Costs (1-year)", "Incremental QALYs (1-year)", "Incremental Costs (5-year)", "Incremental QALYs (5-year)", "Incremental Costs (10-year)", "Incremental QALYs (10-year)", "Incremental Costs (Lifetime)", "Incremental QALYs (Lifetime)",
"Incremental Costs (Health Sector 1-year)", "Incremental QALYs (Health Sector 1-year)", "Incremental Costs (Health Sector 5-year)", "Incremental QALYs (Health Sector 5-year)", "Incremental Costs (Health Sector 10-year)", "Incremental QALYs (Health Sector 10-year)", "Incremental Costs (Health Sector Lifetime)", "Incremental QALYs (Health Sector Lifetime)")
for(i in 1:n_sim){ # i <- 1
# Update parameter set for each scenario with next set of PSA drawn parameters
l_psa_input_MET <- update_param_list(l_params_all = l_params_MET, params_updated = df_psa_params[i,])
l_psa_input_BUP <- update_param_list(l_params_all = l_params_BUP, params_updated = df_psa_params[i,])
# Run model and generate outputs
l_outcomes_MET <- outcomes(l_params_all = l_psa_input_MET, v_params_calib = v_calib_post_map)
l_outcomes_BUP <- outcomes(l_params_all = l_psa_input_BUP, v_params_calib = v_calib_post_map)
# Extract cost and QALY outputs
df_outcomes_MET_PSA <- rbind(df_outcomes_MET_PSA, l_outcomes_MET$df_outcomes)
df_outcomes_BUP_PSA <- rbind(df_outcomes_BUP_PSA, l_outcomes_BUP$df_outcomes)
# Calculate ICER (societal and health sector perspective)
l_ICER <- ICER(outcomes_comp = l_outcomes_MET, outcomes_int = l_outcomes_BUP)
df_ICER_PSA <- rbind(df_ICER_PSA, l_ICER$df_icer)
}
### Output results
## As .RData
save(df_outcomes_MET_PSA,
file = "outputs/PSA/outcomes_MET_PSA.RData")
save(df_outcomes_BUP_PSA,
file = "outputs/PSA/outcomes_BUP_PSA.RData")
save(df_ICER_PSA,
file = "outputs/PSA/ICER_PSA.RData")
## As .csv
write.csv(df_outcomes_MET_PSA,
file = "outputs/PSA/outcomes_MET_PSA.csv",
row.names = FALSE)
write.csv(df_outcomes_BUP_PSA,
file = "outputs/PSA/outcomes_BUP_PSA.csv",
row.names = FALSE)
write.csv(df_ICER_PSA,
file = "outputs/PSA/ICER_PSA.csv",
row.names = FALSE)
View(df_ICER_PSA)
df_fentanyl_prevalence <- read.csv(file = "G:/My Drive/Work/OPTIMA/Model Inputs/Overdose/Fentanyl/fentanyl_prevalence.csv", header = TRUE)
View(df_fentanyl_prevalence)
View(df_fentanyl_prevalence)
canada <- lm(log(CAN) ~ Year)
df_fentanyl_prevalence <- read.csv(file = "G:/My Drive/Work/OPTIMA/Model Inputs/Overdose/Fentanyl/fentanyl_prevalence.csv", header = TRUE)
View(df_fentanyl_prevalence)
canada <- lm(log(df_fentanyl_prevalence$CAN) ~ df_fentanyl_prevalence$Year)
summary(canada)
x <- seq(from = 1, to = 60, by = 1)
y <- exp(-810.74029 + 0.40138 * x)
y
y <- exp(-0.269476729 + 0.40138 * x)
x <- seq(from = 1, to = 60, by = 1)
set.seed(1)
e <- rnorm(100, mean = 0, sd = 0.2)
y <- exp(-810.74029 + 0.40138 * x)
exp(-810)
exp(-10)
View(df_fentanyl_prevalence)
df_fentanyl_prevalence$time <- (Year - 2011)
df_fentanyl_prevalence$time <- (df_fentanyl_prevalenceYear - 2011)
df_fentanyl_prevalence$time <- (df_fentanyl_prevalence$Year - 2011)
View(df_fentanyl_prevalence)
canada <- lm(log(df_fentanyl_prevalence$CAN) ~ df_fentanyl_prevalence$time)
summary(canada)
canada$coefficients
View(canada)
canada$coefficients$intercept
df_coefficients <- data.frame(canada$coefficients)
View(df_coefficients)
View(canada)
df_coefficients <- canada$coefficients
df_coefficients <- canada$coefficients
v_coefficients <- canada$coefficients
v_coefficients
v_coefficients[1]
y <- exp(v_coefficients[1] + v_coefficients[2] * x)
y
library(betareg)
df_fentanyl_prevalence <- read.csv(file = "G:/My Drive/Work/OPTIMA/Model Inputs/Overdose/Fentanyl/fentanyl_prevalence.csv", header = TRUE)
df_fentanyl_prevalence$time <- (df_fentanyl_prevalence$Year - 2011)
canada <- betareg(df_fentanyl_prevalence$CAN ~ df_fentanyl_prevalence$time, data = df_fentanyl_prevalence)
library(betareg)
df_fentanyl_prevalence <- read.csv(file = "G:/My Drive/Work/OPTIMA/Model Inputs/Overdose/Fentanyl/fentanyl_prevalence.csv", header = TRUE)
df_fentanyl_prevalence$time <- (df_fentanyl_prevalence$Year - 2011)
canada <- betareg(df_fentanyl_prevalence$CAN ~ df_fentanyl_prevalence$time, data = df_fentanyl_prevalence)
View(canada)
summary(canada)
cbind(
predict(canada, type = "response"),
predict(canada, type = "link"),
predict(canada, type = "precision"),
predict(canada, type = "variance"),
predict(canada, type = "quantile", at = c(0.25, 0.5, 0.75))
)
df_predict <- data.frame(df_fentanyl_prevalence$time = seq(from = 1, to = 60, by = 1))
df_predict <- data.frame(time = seq(from = 1, to = 60, by = 1))
View(df_predict)
cbind(
predict(canada, newdata = df_predict, type = "response"),
#predict(canada, type = "link"),
predict(canada, newdata = df_predict, type = "precision"),
predict(canada, newdata = df_predict, type = "variance"),
predict(canada, newdata = df_predict, type = "quantile", at = c(0.25, 0.5, 0.75))
)
library(betareg)
library(dplyr)
df_fentanyl_prevalence <- read.csv(file = "G:/My Drive/Work/OPTIMA/Model Inputs/Overdose/Fentanyl/fentanyl_prevalence.csv", header = TRUE)
tbl_fentanyl_prevalence <- as.tibble(df_fentanyl_prevalence) %>% mutate(time = prevalence - 2011)
library(betareg)
library(dplyr)
library(tidyverse)
df_fentanyl_prevalence <- read.csv(file = "G:/My Drive/Work/OPTIMA/Model Inputs/Overdose/Fentanyl/fentanyl_prevalence.csv", header = TRUE)
tbl_fentanyl_prevalence <- as.tibble(df_fentanyl_prevalence) %>% mutate(time = prevalence - 2011)
df_fentanyl_prevalence <- read.csv(file = "G:/My Drive/Work/OPTIMA/Model Inputs/Overdose/Fentanyl/fentanyl_prevalence.csv", header = TRUE)
tbl_fentanyl_prevalence <- as.tibble(df_fentanyl_prevalence) %>% mutate(time = Year - 2011)
View(tbl_fentanyl_prevalence)
canada <- betareg(CAN ~ time, data = tbl_fentanyl_prevalence)
summary(canada)
df_predict <- data.frame(time = seq(from = 1, to = 60, by = 1))
cbind(
predict(canada, newdata = df_predict, type = "response"),
#predict(canada, type = "link"),
predict(canada, newdata = df_predict, type = "precision"),
predict(canada, newdata = df_predict, type = "variance"),
predict(canada, newdata = df_predict, type = "quantile", at = c(0.25, 0.5, 0.75))
)
View(df_fentanyl_prevalence)
df_fentanyl_prevalence["Year" == 2020, "CAN"]
df_fentanyl_prevalence["Year" == 2020]
df_fentanyl_prevalence["Year" == "2020"]
df_fentanyl_prevalence["Year" = 2020]
df_fentanyl_prevalence["Year" == 2020]
df_fentanyl_prevalence[Year == 2020]
df_fentanyl_prevalence["Year" == 2020]
test <- df_fentanyl_prevalence["Year" == 2020]
View(test)
test <- df_fentanyl_prevalence["Year" == 2020,]
df_fentanyl_prevalence <- read.csv(file = "G:/My Drive/Work/OPTIMA/Model Inputs/Overdose/Fentanyl/fentanyl_prevalence.csv", row.names = 1, header = TRUE)
View(df_fentanyl_prevalence)
test <- df_fentanyl_prevalence["2020", "CAN"]
n_t <- 10
p_fent_exp_base <- 0.50
n_fent_growth_rate <- 0.0131
for(i in 2:n_t){
v_fent_exp[1] <- -log(1- p_fent_exp_base)
v_fent_exp[i] <- v_fent_exp[i-1] + n_fent_growth_rate
}
v_fent_exp <- rep(0, n_t)
for(i in 2:n_t){
v_fent_exp[1] <- -log(1- p_fent_exp_base)
v_fent_exp[i] <- v_fent_exp[i-1] + n_fent_growth_rate
}
n_t <- 720
p_fent_exp_base <- 0.50
n_fent_growth_rate <- 0.0131
v_fent_exp <- rep(0, n_t)
for(i in 2:n_t){
v_fent_exp[1] <- -log(1- p_fent_exp_base)
v_fent_exp[i] <- v_fent_exp[i-1] + n_fent_growth_rate
}
v_fent_exp
test <- -log(1- p_fent_exp_base)
n_t <- 720
p_fent_exp_base <- 0.50
n_fent_growth_rate <- 0.0131
v_fent_exp_rate <- rep(0, n_t)
#test <- -log(1- p_fent_exp_base)
for(i in 2:n_t){
v_fent_exp_rate[1] <- -log(1- p_fent_exp_base)
v_fent_exp_rate[i] <- v_fent_exp[i-1] + n_fent_growth_rate
}
v_fent_exp_prob <- 1 - exp(-v_fent_exp_rate)
v_fent_exp_prob
