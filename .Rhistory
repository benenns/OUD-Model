file.hcv = "data/hcv_sero.csv",
file.costs = "data/Trial Specification/costs.csv",
file.crime_costs = "data/Trial Specification/crime_costs.csv",
file.qalys = "data/Trial Specification/qalys.csv",
file.imis_output = "outputs/Calibration/imis_output.RData")
# MET scenario
df_psa_params_MET_TS <- generate_psa_params(n_sim = n_sim, seed = 3730687, n_pop = n_pop_trial, scenario = "TS_MET",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Trial Specification/weibull.csv",
file.unconditional = "data/Trial Specification/unconditional_met.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Trial Specification/costs.csv",
file.crime_costs = "data/Trial Specification/crime_costs.csv",
file.qalys = "data/Trial Specification/qalys.csv",
file.imis_output = "outputs/Calibration/imis_output.RData")
################################
#### Original Specification ####
################################
# BNX scenario
df_psa_params_BUP_OS <- generate_psa_params(n_sim = n_sim, seed = 3730687, n_pop = n_pop_cohort, scenario = "OS",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Original Specification/weibull.csv",
file.unconditional = "data/Original Specification/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Original Specification/costs.csv",
file.crime_costs = "data/Original Specification/crime_costs.csv",
file.qalys = "data/Original Specification/qalys.csv",
file.imis_output = "outputs/Calibration/imis_output.RData")
# Load parameters
source("Analysis/00_load_parameters.R")
################################
#### Original Specification ####
################################
# BNX scenario
df_psa_params_BUP_OS <- generate_psa_params(n_sim = n_sim, seed = 3730687, n_pop = n_pop_cohort, scenario = "OS",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Original Specification/weibull.csv",
file.unconditional = "data/Original Specification/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Original Specification/costs.csv",
file.crime_costs = "data/Original Specification/crime_costs.csv",
file.qalys = "data/Original Specification/qalys.csv",
file.imis_output = "outputs/Calibration/imis_output.RData")
# MET scenario
df_psa_params_MET_OS <- generate_psa_params(n_sim = n_sim, seed = 3730687, n_pop = n_pop_cohort, scenario = "OS",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Original Specification/weibull.csv",
file.unconditional = "data/Original Specification/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Original Specification/costs.csv",
file.crime_costs = "data/Original Specification/crime_costs.csv",
file.qalys = "data/Original Specification/qalys.csv",
file.imis_output = "outputs/Calibration/imis_output.RData")
df <- data.frame(c(1, 2, 3, 4))
View(df)
df <- df[1:2]
View(df)
df2 <- df[1:2]
df <- df[1:2,]
df <- df[1:3,]
df <- data.frame(c(1, 2, 3, 4))
df_calib_post <- as.data.frame(m_calib_post)
df_calib_post <- df_calib_post[1:n_sim, ]
n_sim <- 10
df_calib_post <- as.data.frame(m_calib_post)
df_calib_post <- df_calib_post[1:n_sim, ]
View(df_calib_post)
detectCores()
library(parallel)
detectCores()
# Set number of cores
n_cores <- detectCores()
cl <- makeCluster(n_cores)
# Set number of cores
n_cores <- detectCores()
registerDoParallel(n_cores)
#library(parallel)
library(foreach)
library(doParallel)
# Set number of cores
n_cores <- detectCores()
registerDoParallel(n_cores)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(rBeta2009)
#library(parallel)
library(foreach)
library(doParallel)
# Set number of cores
n_cores <- detectCores()
registerDoParallel(n_cores)
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
source("R/generate_psa_parameters.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
source("Analysis/00_load_parameters.R")
# Set population size for dirichlet draws
n_pop_cohort <- 29000
n_pop_trial  <- 272
n_sim <- 50 # just to test function (will be set as n_sim)
######################################
#### Modified Model Specification ####
######################################
# BNX scenario
df_psa_params_BUP_MMS <- generate_psa_params(n_sim = n_sim, seed = 3730687, n_pop = n_pop_cohort, scenario = "MMS",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Modified Model Specification/weibull.csv",
file.unconditional = "data/Modified Model Specification/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Modified Model Specification/costs.csv",
file.crime_costs = "data/Modified Model Specification/crime_costs.csv",
file.qalys = "data/Modified Model Specification/qalys.csv",
file.imis_output = "outputs/Calibration/imis_output.RData")
# MET scenario
df_psa_params_MET_MMS <- generate_psa_params(n_sim = n_sim, seed = 3730687, n_pop = n_pop_cohort, scenario = "MMS",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Modified Model Specification/weibull.csv",
file.unconditional = "data/Modified Model Specification/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Modified Model Specification/costs.csv",
file.crime_costs = "data/Modified Model Specification/crime_costs.csv",
file.qalys = "data/Modified Model Specification/qalys.csv",
file.imis_output = "outputs/Calibration/imis_output.RData")
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(rBeta2009)
#library(parallel)
library(foreach)
library(doParallel)
# Set number of cores
n_cores <- detectCores()
registerDoParallel(n_cores)
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
source("R/generate_psa_parameters.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
source("Analysis/00_load_parameters.R")
# Set population size for dirichlet draws
n_pop_cohort <- 29000
n_pop_trial  <- 272
n_sim <- 5 # just to test function (will be set as n_sim)
######################################
#### Modified Model Specification ####
######################################
# BNX scenario
df_psa_params_BUP_MMS <- generate_psa_params(n_sim = n_sim, seed = 3730687, n_pop = n_pop_cohort, scenario = "MMS",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Modified Model Specification/weibull.csv",
file.unconditional = "data/Modified Model Specification/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Modified Model Specification/costs.csv",
file.crime_costs = "data/Modified Model Specification/crime_costs.csv",
file.qalys = "data/Modified Model Specification/qalys.csv",
file.imis_output = "outputs/Calibration/imis_output.RData")
# MET scenario
df_psa_params_MET_MMS <- generate_psa_params(n_sim = n_sim, seed = 3730687, n_pop = n_pop_cohort, scenario = "MMS",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/Modified Model Specification/weibull.csv",
file.unconditional = "data/Modified Model Specification/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/Modified Model Specification/costs.csv",
file.crime_costs = "data/Modified Model Specification/crime_costs.csv",
file.qalys = "data/Modified Model Specification/qalys.csv",
file.imis_output = "outputs/Calibration/imis_output.RData")
# Initialize data frames
# Modified Model Specification
df_outcomes_MET_PSA_MMS <- data.frame()
df_outcomes_BUP_PSA_MMS <- data.frame()
df_ICER_PSA_MMS <- data.frame()
v_outcomes_names <- c("Total Costs (1-year)", "Total Costs (5-year)", "Total Costs (10-year)", "Total Costs (Lifetime)", "Health Sector Costs (1-year)", "Health Sector Costs (5-year)", "Health Sector Costs (10-year)", "Health Sector Costs (Lifetime)",
"Criminal Costs (1-year)", "Criminal Costs (5-year)", "Criminal Costs (10-year)", "Criminal Costs (Lifetime)", "Treatment Costs (1-year)", "Treatment Costs (5-year)", "Treatment Costs (10-year)", "Treatment Costs (Lifetime)",
"Total QALYs (1-year)", "Total QALYs (5-year)", "Total QALYs (10-year)", "Total QALYs (Lifetime)")
v_ICER_names <- c("ICER (1-year)", "ICER (5-year)", "ICER (10-year)", "ICER (Lifetime)",
"ICER (Health Sector 1-year)", "ICER (Health Sector 5-year)", "ICER (Health Sector 10-year)", "ICER (Health Sector Lifetime)",
"Incremental Costs (1-year)", "Incremental QALYs (1-year)", "Incremental Costs (5-year)", "Incremental QALYs (5-year)", "Incremental Costs (10-year)", "Incremental QALYs (10-year)", "Incremental Costs (Lifetime)", "Incremental QALYs (Lifetime)",
"Incremental Costs (Health Sector 1-year)", "Incremental QALYs (Health Sector 1-year)", "Incremental Costs (Health Sector 5-year)", "Incremental QALYs (Health Sector 5-year)", "Incremental Costs (Health Sector 10-year)", "Incremental QALYs (Health Sector 10-year)", "Incremental Costs (Health Sector Lifetime)", "Incremental QALYs (Health Sector Lifetime)")
######################################
#### Modified Model Specification ####
######################################
foreach(i = 1:n_sim) %dopar% { # i <- 1
# Update parameter set for each scenario with next set of PSA drawn parameters
l_psa_input_MET_MMS <- update_param_list(l_params_all = l_params_MET_MMS, params_updated = df_psa_params_MET_MMS[i, ])
l_psa_input_BUP_MMS <- update_param_list(l_params_all = l_params_BUP_MMS, params_updated = df_psa_params_BUP_MMS[i, ])
# Run model and generate outputs
l_outcomes_MET_MMS <- outcomes(l_params_all = l_psa_input_MET_MMS, v_params_calib = v_calib_post_map)
l_outcomes_BUP_MMS <- outcomes(l_params_all = l_psa_input_BUP_MMS, v_params_calib = v_calib_post_map)
# Extract cost and QALY outputs
df_outcomes_MET_PSA_MMS <- rbind(df_outcomes_MET_PSA_MMS, l_outcomes_MET_MMS$df_outcomes)
df_outcomes_BUP_PSA_MMS <- rbind(df_outcomes_BUP_PSA_MMS, l_outcomes_BUP_MMS$df_outcomes)
# Calculate ICER (societal and health sector perspective)
l_ICER_MMS <- ICER(outcomes_comp = l_outcomes_MET_MMS, outcomes_int = l_outcomes_BUP_MMS)
df_ICER_PSA_MMS <- rbind(df_ICER_PSA_MMS, l_ICER_MMS$df_icer)
}
######################################
#### Modified Model Specification ####
######################################
foreach(i = 1:n_sim, .combine = c) %dopar% { # i <- 1
# Update parameter set for each scenario with next set of PSA drawn parameters
l_psa_input_MET_MMS <- update_param_list(l_params_all = l_params_MET_MMS, params_updated = df_psa_params_MET_MMS[i, ])
l_psa_input_BUP_MMS <- update_param_list(l_params_all = l_params_BUP_MMS, params_updated = df_psa_params_BUP_MMS[i, ])
# Run model and generate outputs
l_outcomes_MET_MMS <- outcomes(l_params_all = l_psa_input_MET_MMS, v_params_calib = v_calib_post_map)
l_outcomes_BUP_MMS <- outcomes(l_params_all = l_psa_input_BUP_MMS, v_params_calib = v_calib_post_map)
# Extract cost and QALY outputs
df_outcomes_MET_PSA_MMS <- rbind(df_outcomes_MET_PSA_MMS, l_outcomes_MET_MMS$df_outcomes)
df_outcomes_BUP_PSA_MMS <- rbind(df_outcomes_BUP_PSA_MMS, l_outcomes_BUP_MMS$df_outcomes)
# Calculate ICER (societal and health sector perspective)
l_ICER_MMS <- ICER(outcomes_comp = l_outcomes_MET_MMS, outcomes_int = l_outcomes_BUP_MMS)
df_ICER_PSA_MMS <- rbind(df_ICER_PSA_MMS, l_ICER_MMS$df_icer)
}
######################################
#### Modified Model Specification ####
######################################
#foreach(i = 1:n_sim, .combine = c) %dopar% { # i <- 1
for (i in 1:n_sim){
# Update parameter set for each scenario with next set of PSA drawn parameters
l_psa_input_MET_MMS <- update_param_list(l_params_all = l_params_MET_MMS, params_updated = df_psa_params_MET_MMS[i, ])
l_psa_input_BUP_MMS <- update_param_list(l_params_all = l_params_BUP_MMS, params_updated = df_psa_params_BUP_MMS[i, ])
# Run model and generate outputs
l_outcomes_MET_MMS <- outcomes(l_params_all = l_psa_input_MET_MMS, v_params_calib = v_calib_post_map)
l_outcomes_BUP_MMS <- outcomes(l_params_all = l_psa_input_BUP_MMS, v_params_calib = v_calib_post_map)
# Extract cost and QALY outputs
df_outcomes_MET_PSA_MMS <- rbind(df_outcomes_MET_PSA_MMS, l_outcomes_MET_MMS$df_outcomes)
df_outcomes_BUP_PSA_MMS <- rbind(df_outcomes_BUP_PSA_MMS, l_outcomes_BUP_MMS$df_outcomes)
# Calculate ICER (societal and health sector perspective)
l_ICER_MMS <- ICER(outcomes_comp = l_outcomes_MET_MMS, outcomes_int = l_outcomes_BUP_MMS)
df_ICER_PSA_MMS <- rbind(df_ICER_PSA_MMS, l_ICER_MMS$df_icer)
}
View(df_ICER_PSA_MMS)
View(df_ICER_PSA_MMS)
View(df_outcomes_BUP_PSA_MMS)
source("R/ICER_functions.R")
# Initialize data frames
# Modified Model Specification
df_outcomes_MET_PSA_MMS <- data.frame()
df_outcomes_BUP_PSA_MMS <- data.frame()
df_incremental_PSA_MMS <- data.frame()
df_ICER_PSA_MMS <- data.frame()
# Trial Specification
df_outcomes_MET_PSA_TS <- data.frame()
df_outcomes_BUP_PSA_TS <- data.frame()
df_incremental_PSA_TS <- data.frame()
df_ICER_PSA_TS <- data.frame()
# Original Specification
df_outcomes_MET_PSA_OS <- data.frame()
df_outcomes_BUP_PSA_OS <- data.frame()
df_incremental_PSA_OS <- data.frame()
df_ICER_PSA_OS <- data.frame()
v_outcomes_names <- c("Total Costs (1-year)", "Total Costs (5-year)", "Total Costs (10-year)", "Total Costs (Lifetime)", "Health Sector Costs (1-year)", "Health Sector Costs (5-year)", "Health Sector Costs (10-year)", "Health Sector Costs (Lifetime)",
"Criminal Costs (1-year)", "Criminal Costs (5-year)", "Criminal Costs (10-year)", "Criminal Costs (Lifetime)", "Treatment Costs (1-year)", "Treatment Costs (5-year)", "Treatment Costs (10-year)", "Treatment Costs (Lifetime)",
"Total QALYs (1-year)", "Total QALYs (5-year)", "Total QALYs (10-year)", "Total QALYs (Lifetime)")
v_ICER_names <- c("ICER (1-year)", "ICER (5-year)", "ICER (10-year)", "ICER (Lifetime)",
"ICER (Health Sector 1-year)", "ICER (Health Sector 5-year)", "ICER (Health Sector 10-year)", "ICER (Health Sector Lifetime)",
"Incremental Costs (1-year)", "Incremental QALYs (1-year)", "Incremental Costs (5-year)", "Incremental QALYs (5-year)", "Incremental Costs (10-year)", "Incremental QALYs (10-year)", "Incremental Costs (Lifetime)", "Incremental QALYs (Lifetime)",
"Incremental Costs (Health Sector 1-year)", "Incremental QALYs (Health Sector 1-year)", "Incremental Costs (Health Sector 5-year)", "Incremental QALYs (Health Sector 5-year)", "Incremental Costs (Health Sector 10-year)", "Incremental QALYs (Health Sector 10-year)", "Incremental Costs (Health Sector Lifetime)", "Incremental QALYs (Health Sector Lifetime)")
######################################
#### Modified Model Specification ####
######################################
#foreach(i = 1:n_sim, .combine = c) %dopar% { # i <- 1
for (i in 1:n_sim){
# Update parameter set for each scenario with next set of PSA drawn parameters
l_psa_input_MET_MMS <- update_param_list(l_params_all = l_params_MET_MMS, params_updated = df_psa_params_MET_MMS[i, ])
l_psa_input_BUP_MMS <- update_param_list(l_params_all = l_params_BUP_MMS, params_updated = df_psa_params_BUP_MMS[i, ])
# Run model and generate outputs
l_outcomes_MET_MMS <- outcomes(l_params_all = l_psa_input_MET_MMS, v_params_calib = v_calib_post_map)
l_outcomes_BUP_MMS <- outcomes(l_params_all = l_psa_input_BUP_MMS, v_params_calib = v_calib_post_map)
# Extract cost and QALY outputs
df_outcomes_MET_PSA_MMS <- rbind(df_outcomes_MET_PSA_MMS, l_outcomes_MET_MMS$df_outcomes)
df_outcomes_BUP_PSA_MMS <- rbind(df_outcomes_BUP_PSA_MMS, l_outcomes_BUP_MMS$df_outcomes)
# Calculate ICER (societal and health sector perspective)
l_ICER_MMS <- ICER(outcomes_comp = l_outcomes_MET_MMS, outcomes_int = l_outcomes_BUP_MMS)
df_incremental_PSA_MMS <- rbind(df_ICER_PSA_MMS, l_ICER_MMS$df_incremental)
df_ICER_PSA_MMS <- rbind(df_ICER_PSA_MMS, l_ICER_MMS$df_icer)
}
######################################
#### Modified Model Specification ####
######################################
#foreach(i = 1:n_sim, .combine = c) %dopar% { # i <- 1
for (i in 1:n_sim){
# Update parameter set for each scenario with next set of PSA drawn parameters
l_psa_input_MET_MMS <- update_param_list(l_params_all = l_params_MET_MMS, params_updated = df_psa_params_MET_MMS[i, ])
l_psa_input_BUP_MMS <- update_param_list(l_params_all = l_params_BUP_MMS, params_updated = df_psa_params_BUP_MMS[i, ])
# Run model and generate outputs
l_outcomes_MET_MMS <- outcomes(l_params_all = l_psa_input_MET_MMS, v_params_calib = v_calib_post_map)
l_outcomes_BUP_MMS <- outcomes(l_params_all = l_psa_input_BUP_MMS, v_params_calib = v_calib_post_map)
# Extract cost and QALY outputs
df_outcomes_MET_PSA_MMS <- rbind(df_outcomes_MET_PSA_MMS, l_outcomes_MET_MMS$df_outcomes)
df_outcomes_BUP_PSA_MMS <- rbind(df_outcomes_BUP_PSA_MMS, l_outcomes_BUP_MMS$df_outcomes)
# Calculate ICER (societal and health sector perspective)
l_ICER_MMS <- ICER(outcomes_comp = l_outcomes_MET_MMS, outcomes_int = l_outcomes_BUP_MMS)
df_incremental_PSA_MMS <- rbind(df_incremental_PSA_MMS, l_ICER_MMS$df_incremental)
df_ICER_PSA_MMS <- rbind(df_ICER_PSA_MMS, l_ICER_MMS$df_icer)
}
source("R/ICER_functions.R")
######################################
#### Modified Model Specification ####
######################################
#foreach(i = 1:n_sim, .combine = c) %dopar% { # i <- 1
for (i in 1:n_sim){
# Update parameter set for each scenario with next set of PSA drawn parameters
l_psa_input_MET_MMS <- update_param_list(l_params_all = l_params_MET_MMS, params_updated = df_psa_params_MET_MMS[i, ])
l_psa_input_BUP_MMS <- update_param_list(l_params_all = l_params_BUP_MMS, params_updated = df_psa_params_BUP_MMS[i, ])
# Run model and generate outputs
l_outcomes_MET_MMS <- outcomes(l_params_all = l_psa_input_MET_MMS, v_params_calib = v_calib_post_map)
l_outcomes_BUP_MMS <- outcomes(l_params_all = l_psa_input_BUP_MMS, v_params_calib = v_calib_post_map)
# Extract cost and QALY outputs
df_outcomes_MET_PSA_MMS <- rbind(df_outcomes_MET_PSA_MMS, l_outcomes_MET_MMS$df_outcomes)
df_outcomes_BUP_PSA_MMS <- rbind(df_outcomes_BUP_PSA_MMS, l_outcomes_BUP_MMS$df_outcomes)
# Calculate ICER (societal and health sector perspective)
l_ICER_MMS <- ICER(outcomes_comp = l_outcomes_MET_MMS, outcomes_int = l_outcomes_BUP_MMS)
df_incremental_PSA_MMS <- rbind(df_incremental_PSA_MMS, l_ICER_MMS$df_incremental)
df_ICER_PSA_MMS <- rbind(df_ICER_PSA_MMS, l_ICER_MMS$df_icer)
}
View(df_incremental_PSA_MMS)
### Output results
## As .RData
save(df_outcomes_MET_PSA_MMS,
file = "outputs/PSA/Modified Model Specification/outcomes_MET_PSA_MMS.RData")
save(df_outcomes_BUP_PSA_MMS,
file = "outputs/PSA/Modified Model Specification/outcomes_BUP_PSA_MMS.RData")
save(df_ICER_PSA_MMS,
file = "outputs/PSA/Modified Model Specification/ICER_PSA_MMS.RData")
## As .csv
write.csv(df_outcomes_MET_PSA_MMS,
file = "outputs/PSA/Modified Model Specification/outcomes_MET_PSA_MMS.csv",
row.names = FALSE)
write.csv(df_outcomes_BUP_PSA_MMS,
file = "outputs/PSA/Modified Model Specification/outcomes_BUP_PSA_MMS.csv",
row.names = FALSE)
write.csv(df_ICER_PSA_MMS,
file = "outputs/PSA/ICER_PSA_MMS.csv",
row.names = FALSE)
save(df_incremental_PSA_MMS,
file = "outputs/PSA/Modified Model Specification/incremental_PSA_MMS.RData")
View(df_incremental_PSA_MMS)
### Produce scatter plot for ICERs
## Modified Model Specification ##
ggplot(df_incremental_PSA_MMS, aes(x = "Incremental QALYs (Lifetime)", y = "Incremental Costs (Lifetime)")) +
geom_point()
View(df_incremental_PSA_MMS)
### Produce scatter plot for ICERs
## Modified Model Specification ##
ggplot(df_incremental_PSA_MMS, aes(x = "Incremental QALYs (Lifetime)", y = "Incremental Costs (Lifetime)")) +
geom_point()
View(df_ICER_PSA_MMS)
View(df_incremental_PSA_MMS)
View(df_incremental_PSA_MMS)
### Produce scatter plot for ICERs
## Modified Model Specification ##
ggplot(df_incremental_PSA_MMS, aes(x = "Incremental QALYs (1-year)", y = "Incremental Costs (1-year)")) +
geom_point()
ggplot(df_incremental_PSA_MMS, aes(x = "Incremental QALYs (1-year)", y = "Incremensd Costs (1-year)")) +
geom_point()
### Produce scatter plot for ICERs
## Modified Model Specification ##
df_incremental_PSA_MMS[, "Incremental QALYs (1-year)"]
View(df_ICER_PSA_OS)
### Produce scatter plot for ICERs
## Modified Model Specification ##
a <- df_incremental_PSA_MMS[, "Incremental Costs (1-year)"]
b <- df_incremental_PSA_MMS[, "Incremental QALYs (1-year)"]
ggplot(df_incremental_PSA_MMS, aes(x = a, y = b)) +
geom_point()
ggplot(df_incremental_PSA_MMS, aes(x = a, y = b)) +
geom_point() +
geom_line(x = 0, y = 0)
ggplot(df_incremental_PSA_MMS, aes(x = a, y = b)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0)
ggplot(df_incremental_PSA_MMS, aes(x = a, y = b)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
xlim(min(a), max(a)) +
ylim(min(b), max(b))
### Produce scatter plot for ICERs
## Modified Model Specification ##
a <- df_incremental_PSA_MMS[, "Incremental QALYs (1-year)"]
b <- df_incremental_PSA_MMS[, "Incremental Costs (1-year)"]
ggplot(df_incremental_PSA_MMS, aes(x = a, y = b)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
xlim(min(a), max(a)) +
ylim(min(b), max(b))
ggplot(df_incremental_PSA_MMS, aes(x = a, y = b)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0)
ggplot(df_incremental_PSA_MMS, aes(x = a, y = b)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0)
# 5-year
inc_qalys_5yr <- df_incremental_PSA_MMS[, "Incremental QALYs (5-year)"]
inc_costs_5yr <- df_incremental_PSA_MMS[, "Incremental Costs (5-year)"]
ggplot(df_incremental_PSA_MMS, aes(x = inc_qalys_5yr, y = inc_costs_5yr)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0)
# 10-year
inc_qalys_10yr <- df_incremental_PSA_MMS[, "Incremental QALYs (10-year)"]
inc_costs_10yr <- df_incremental_PSA_MMS[, "Incremental Costs (10-year)"]
ggplot(df_incremental_PSA_MMS, aes(x = inc_qalys_10yr, y = inc_costs_10yr)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0)
### Produce scatter plot for ICERs
## Modified Model Specification ##
# 1-year
inc_qalys_1yr <- df_incremental_PSA_MMS[, "Incremental QALYs (1-year)"]
inc_costs_1yr <- df_incremental_PSA_MMS[, "Incremental Costs (1-year)"]
ggplot(df_incremental_PSA_MMS, aes(x = inc_qalys_1yr, y = inc_costs_1yr)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0)
#xlim(min(a), max(a)) +
#ylim(min(b), max(b))
# 5-year
inc_qalys_5yr <- df_incremental_PSA_MMS[, "Incremental QALYs (5-year)"]
inc_costs_5yr <- df_incremental_PSA_MMS[, "Incremental Costs (5-year)"]
ggplot(df_incremental_PSA_MMS, aes(x = inc_qalys_5yr, y = inc_costs_5yr)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0)
#xlim(min(a), max(a)) +
#ylim(min(b), max(b))
# 10-year
inc_qalys_10yr <- df_incremental_PSA_MMS[, "Incremental QALYs (10-year)"]
inc_costs_10yr <- df_incremental_PSA_MMS[, "Incremental Costs (10-year)"]
ggplot(df_incremental_PSA_MMS, aes(x = inc_qalys_10yr, y = inc_costs_10yr)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0)
#xlim(min(a), max(a)) +
#ylim(min(b), max(b))
# Lifetime
inc_qalys_lifetime <- df_incremental_PSA_MMS[, "Incremental QALYs (10-year)"]
inc_costs_lifetime <- df_incremental_PSA_MMS[, "Incremental Costs (10-year)"]
ggplot(df_incremental_PSA_MMS, aes(x = inc_qalys_lifetime, y = inc_costs_lifetime)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0)
ggplot(df_incremental_PSA_MMS, aes(x = inc_qalys_1yr, y = inc_costs_1yr)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
geom_abline(slope = 50000, intercept = 0)
ggplot(df_incremental_PSA_MMS, aes(x = inc_qalys_lifetime, y = inc_costs_lifetime)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0)
load(file = "outputs/PSA/Modified Model Specification/incremental_PSA_MMS.RData")
load(file = "outputs/PSA/Modified Model Specification/incremental_PSA_MMS.RData")
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
### Produce scatter plot for ICERs
## Modified Model Specification ##
# 1-year
inc_qalys_1yr <- df_incremental_PSA_MMS[, "Incremental QALYs (1-year)"]
inc_costs_1yr <- df_incremental_PSA_MMS[, "Incremental Costs (1-year)"]
ggplot(df_incremental_PSA_MMS, aes(x = inc_qalys_1yr, y = inc_costs_1yr)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0)
