l_params_BUP <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_bup.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Methadone scenario
l_params_MET <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_met.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
#### Set up model states ####
l_dim_s  <- list() # list of health states
# Base health states
BASE <- l_dim_s[[1]] <- c("MET", "METC", "BUP", "BUPC", "ABS", "REL", "ODN", "ODF")
# Injection/non-injection stratification
INJECT <- l_dim_s[[2]] <- c("NI", "INJ")
# Episodes (1-3)
EP <-  l_dim_s[[3]] <- c("1", "2", "3")
# HIV/HCV status
SERO <- l_dim_s[[4]] <- c("NEG", "HIV", "HCV", "COI")
df_flat <- expand.grid(l_dim_s) #combine all elements together into vector of health states
df_flat <- rename(df_flat, BASE    = Var1,
INJECT  = Var2,
EP      = Var3,
SERO    = Var4)
df_flat <- dplyr::rename(df_flat, BASE    = Var1,
INJECT  = Var2,
EP      = Var3,
SERO    = Var4)
View(df_flat)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# BNX scenario
l_params_BUP <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_bup.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Methadone scenario
l_params_MET <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_met.csv",
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
#### Create plots ####
trace_plots <- function(outcomes){
# Prepare data
df_M_agg_trace <- as.data.frame(outcomes$m_M_agg_trace)
df_M_agg_trace$month <- as.numeric(rownames(df_M_agg_trace))
df_M_agg_trace_plot <- df_M_agg_trace %>% gather(state, proportion, "Death", "ODF", "ODN", "REL", "BUP", "BUPC", "MET", "METC", "ABS") # health states to plot
df_M_agg_trace_sero <- as.data.frame(outcomes$m_M_agg_trace_sero)
df_M_agg_trace_sero$month <- as.numeric(rownames(df_M_agg_trace_sero))
df_M_agg_trace_sero_plot <- df_M_agg_trace_sero %>% gather(state, proportion, "NEG-Dead", "HIV-Dead", "HCV-Dead", "COI-Dead", "NEG-Alive", "HIV-Alive", "HCV-Alive", "COI-Alive") # health states to plot
df_M_agg_state_time <- df_M_agg_trace %>% gather(state, proportion, "ODF", "ODN", "REL", "BUP", "BUPC", "MET", "METC", "ABS") # alive health states to plot
df_M_agg_state_time <- df_M_agg_state_time %>%
group_by(state) %>%
summarise_each(funs(sum), proportion) %>%
mutate(percentage = round((proportion / sum(proportion)) * 100,1))
# Preserve order for plotting
state_order_trace <- factor(df_M_agg_trace_plot$state, levels = c("Death", "ODF", "ODN", "REL", "BUP", "BUPC", "MET", "METC", "ABS"))
state_order_trace_sero <- factor(df_M_agg_trace_sero_plot$state, levels = c("NEG-Dead", "HIV-Dead", "HCV-Dead", "COI-Dead", "NEG-Alive", "HIV-Alive", "HCV-Alive", "COI-Alive"))
state_order_time  <- factor(df_M_agg_state_time$state, levels = c("ODF", "ODN", "REL", "BUP", "BUPC", "MET", "METC", "ABS"))
#state_colours_trace <- c("#d9d9d9", "#d53e4f", "#f46d43", "#fdae61", "#ffffbf", "#e6f598", "#abdda4", "#9ecae1", "#bcbddc") # colour pallette 1
state_colours_trace2 <- c("#d9d9d9", "#252525", "#b2182b", "#d6604d", "#d9f0d3", "#1b7837", "#d1e5f0", "#9ecae1", "#bcbddc") # colour pallette 2
state_colours_trace_sero <- c("#252525", "#cb181d", "#2171b5", "#6a51a3", "#969696", "#fc9272", "#9ecae1", "#bcbddc")
#state_colours_time <- c("#d53e4f", "#f46d43", "#fdae61", "#ffffbf", "#e6f598")
state_colours_time2 <- c("#252525", "#b2182b", "#fddbc7", "#d6604d", "#d9f0d3", "#1b7837", "#9ecae1", "#bcbddc") # colour pallette 2
### Markov trace plots ###
# Model 1 (Primary health state definition)
# Base model states
main_states_trace_plot <- ggplot(df_M_agg_trace_plot, aes(x = month, y = proportion, fill = state_order_trace)) +
theme_bw() +
theme(legend.position = "bottom") +
xlab("Time (months)") + ylab("Proportion in state") +
geom_area() +
scale_fill_manual(name = "Health States", values = state_colours_trace2)
# Serostatus
sero_states_trace_plot <- ggplot(df_M_agg_trace_sero_plot, aes(x = month, y = proportion, fill = state_order_trace_sero)) +
theme_bw() +
theme(legend.position = "bottom") +
xlab("Time (months)") + ylab("Proportion in state") +
geom_area() +
scale_fill_manual(name = "Serostatus", values = state_colours_trace_sero)
### Time spent in health states ###
main_states_time <- ggplot(df_M_agg_state_time, aes(x = state_order_time, y = proportion, fill = state_order_time)) +
theme_bw() +
theme(legend.position = "none") +
xlab("Health State") + ylab("Time") +
geom_bar(stat = "identity") +
scale_fill_manual(values = state_colours_time2) +
geom_text(aes(label = paste0(round(proportion,1)," (",percentage,"%)")), hjust = -0.25, size = 3.5) +
coord_flip(ylim = c(0, 780))
### Combined plot ###
plots <- list()
plots[[1]] <- main_states_trace_plot
plots[[2]] <- main_states_time
layout <- matrix(c(1, 1, 2), nrow = 3, byrow = TRUE)
return(list(main_states_trace_plot,
sero_states_trace_plot,
main_states_time,
plots,
layout))
}
l_trace_original <- trace_plots(outcomes = l_out_markov)
### Outputs ###
pdf("Plots/Markov Trace/trace_states.pdf", width = 8, height = 6)
l_trace_original$main_states_trace_plot
dev.off()
l_trace_original$main_states_trace_plot
### Outputs ###
pdf("Plots/Markov Trace/trace_states.pdf", width = 8, height = 6)
main_states_trace_plot
dev.off()
### Outputs ###
pdf("Plots/Markov Trace/trace_states.pdf", width = 8, height = 6)
l_trace_original[[1]]
dev.off()
### Outputs ###
pdf("Plots/Markov Trace/trace_states.pdf", width = 8, height = 6)
l_trace_original[[1]]
dev.off()
pdf("Plots/Markov Trace/trace_sero.pdf", width = 8, height = 6)
l_trace_original[[2]]
dev.off()
pdf(file = "Plots/Markov Trace/time_states.pdf", width = 8, height = 3)
l_trace_original[[3]]
dev.off()
pdf(file = "Plots/Markov Trace/full_trace.pdf", width = 8, height = 9)
multiplot(plotlist = l_trace_original[[4]], layout = l_trace_original[[5]])
dev.off()
# Run model
l_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = TRUE)
l_out_markov_BUP  <- markov_model(l_params_all = l_params_BUP, err_stop = FALSE, verbose = TRUE, checks = TRUE)
l_out_markov_MET  <- markov_model(l_params_all = l_params_MET, err_stop = FALSE, verbose = TRUE, checks = TRUE)
#### Create plots ####
l_trace_base <- trace_plots(outcomes = l_out_markov_base)
l_trace_BUP  <- trace_plots(outcomes = l_out_markov_BUP)
l_trace_MET  <- trace_plots(outcomes = l_out_markov_MET)
### Outputs ###
# Health state trace
# Base
pdf("Plots/Markov Trace/trace_states_base.pdf", width = 8, height = 6)
l_trace_base[[1]]
dev.off()
# BUP
pdf("Plots/Markov Trace/trace_states_BUP.pdf", width = 8, height = 6)
l_trace_BUP[[1]]
dev.off()
# MET
pdf("Plots/Markov Trace/trace_states_MET.pdf", width = 8, height = 6)
l_trace_MET[[1]]
dev.off()
# Serostatus trace
# Base
pdf("Plots/Markov Trace/trace_sero_base.pdf", width = 8, height = 6)
l_trace_base[[2]]
dev.off()
# BUP
pdf("Plots/Markov Trace/trace_sero_BUP.pdf", width = 8, height = 6)
l_trace_BUP[[2]]
dev.off()
# MET
pdf("Plots/Markov Trace/trace_sero_MET.pdf", width = 8, height = 6)
l_trace_MET[[2]]
dev.off()
# Health state time
# Base
pdf(file = "Plots/Markov Trace/time_states_base.pdf", width = 8, height = 3)
l_trace_base[[3]]
dev.off()
# BUP
pdf(file = "Plots/Markov Trace/time_states_BUP.pdf", width = 8, height = 3)
l_trace_BUP[[3]]
dev.off()
# MET
pdf(file = "Plots/Markov Trace/time_states_MET.pdf", width = 8, height = 3)
l_trace_MET[[3]]
dev.off()
# Health state trace + time
# Base
pdf(file = "Plots/Markov Trace/full_trace_base.pdf", width = 8, height = 9)
multiplot(plotlist = l_trace_base[[4]], layout = l_trace_base[[5]])
dev.off()
# BUP
pdf(file = "Plots/Markov Trace/full_trace_BUP.pdf", width = 8, height = 9)
multiplot(plotlist = l_trace_BUP[[4]], layout = l_trace_BUP[[5]])
dev.off()
# MET
pdf(file = "Plots/Markov Trace/full_trace_MET.pdf", width = 8, height = 9)
multiplot(plotlist = l_trace_MET[[4]], layout = l_trace_MET[[5]])
dev.off()
# Model 2 (Trial health state definition)
# Model 3 (Original health state definition)
# Serostatus trace
# Base
pdf("Plots/Markov Trace/Modified Model Spec/trace_sero_base.pdf", width = 8, height = 6)
l_trace_base[[2]]
dev.off()
# BUP
pdf("Plots/Markov Trace/Modified Model Spec/trace_sero_BUP.pdf", width = 8, height = 6)
l_trace_BUP[[2]]
dev.off()
# MET
pdf("Plots/Markov Trace/Modified Model Spec/trace_sero_MET.pdf", width = 8, height = 6)
l_trace_MET[[2]]
dev.off()
# Health state time
# Base
#pdf(file = "Plots/Markov Trace/Modified Model Spec/time_states_base.pdf", width = 8, height = 3)
#l_trace_base[[3]]
#dev.off()
# Health state trace + time
# Base
pdf(file = "Plots/Markov Trace/Modified Model Spec/full_trace_base.pdf", width = 8, height = 9)
multiplot(plotlist = l_trace_base[[4]], layout = l_trace_base[[5]])
dev.off()
# BUP
pdf(file = "Plots/Markov Trace/Modified Model Spec/full_trace_BUP.pdf", width = 8, height = 9)
multiplot(plotlist = l_trace_BUP[[4]], layout = l_trace_BUP[[5]])
dev.off()
# MET
pdf(file = "Plots/Markov Trace/Modified Model Spec/full_trace_MET.pdf", width = 8, height = 9)
multiplot(plotlist = l_trace_MET[[4]], layout = l_trace_MET[[5]])
dev.off()
rm(list = ls()) # to clean the workspace
#### Load packages, data and functions ####
#### Load packages and functions ####
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(ggridges) # specialized ridge plots
library(tidyverse)
library(lhs)
library(IMIS)
# To-do: Move functions into R package for OUD model
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/calibration_functions.R")
# Load model inputs #
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv", # calibrate on full trial sample (x% bup; x% met)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull = "data/weibull.csv",
#file.weibull_scale = "data/weibull_scale.csv",
#file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv", # includes calibration-related parameters
file.fentanyl = "data/fentanyl.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Load calibration inputs #
v_cali_param_names <- c("'Overdose rate (treatment)'",
"'Overdose rate (treatment + opioid)'",
"'Overdose rate (active opioid)'",
"'Overdose rate (inactive opioid)'",
"'First month mult (treatment)'",
"'First month mult (treatment + opioid)'",
"'First month mult (active opioid)'",
"'Injection mult'",
"'Fentanyl mult'",
"'Fatal overdose rate'")
v_par1 <- c(n_TX_OD_shape   = l_params_all$n_TX_OD_shape,
n_TXC_OD_shape  = l_params_all$n_TXC_OD_shape,
n_REL_OD_shape   = l_params_all$n_REL_OD_shape,
n_ABS_OD_low    = l_params_all$n_ABS_OD_low,
n_TX_OD_mult_shape  = l_params_all$n_TX_OD_mult_shape,
n_TXC_OD_mult_shape = l_params_all$n_TXC_OD_mult_shape,
n_REL_OD_mult_shape = l_params_all$n_REL_OD_mult_shape,
n_INJ_OD_mult_shape = l_params_all$n_INJ_OD_mult_shape,
n_fent_OD_mult_shape = l_params_all$n_fent_OD_mult_shape,
n_fatal_OD_shape    = l_params_all$n_fatal_OD_shape) # lower bound estimate for each param
v_par2 <- c(n_TX_OD_scale   = l_params_all$n_TX_OD_scale,
n_TXC_OD_scale  = l_params_all$n_TXC_OD_scale,
n_REL_OD_scale   = l_params_all$n_REL_OD_scale,
n_ABS_OD_high    = l_params_all$n_ABS_OD_high,
n_TX_OD_mult_scale  = l_params_all$n_TX_OD_mult_scale,
n_TXC_OD_mult_scale = l_params_all$n_TXC_OD_mult_scale,
n_REL_OD_mult_scale = l_params_all$n_REL_OD_mult_scale,
n_INJ_OD_mult_scale = l_params_all$n_INJ_OD_mult_scale,
n_fent_OD_mult_scale = l_params_all$n_fent_OD_mult_scale,
n_fatal_OD_scale    = l_params_all$n_fatal_OD_scale)
#### Load calibration targets ####
l_cali_targets <- list(ODF = read.csv(file = "data/cali_target_odf.csv", header = TRUE),
ODN = read.csv(file = "data/cali_target_odn.csv", header = TRUE))
# Max calibration periods
n_cali_max_per <- max(c(l_cali_targets$ODF$Time, l_cali_targets$ODN$Time))
#### Visualize targets ####
### TARGET 1: Overdose deaths ("ODF")
plotrix::plotCI(x    = l_cali_targets$ODF$Time,
y    = l_cali_targets$ODF$pe,
ui   = l_cali_targets$ODF$high,
li   = l_cali_targets$ODF$low,
#ylim = c(0, 1),
xlab = "Month", ylab = "Fatal Overdoses")
### TARGET 2: Non-fatal overdose ("ODN")
plotrix::plotCI(x    = l_cali_targets$ODN$Time,
y    = l_cali_targets$ODN$pe,
ui   = l_cali_targets$ODN$high,
li   = l_cali_targets$ODN$low,
#ylim = c(0, 1),
xlab = "Month", ylab = "Non-fatal Overdoses")
#### Specify calibration parameters ####
### Specify seed (for reproducible sequence of random numbers)
set.seed(3730687)
### Number of random samples to obtain from the posterior distribution
n_resamp <- 2000 # to match number of PSA draws
### Names and number of input parameters to be calibrated
#v_param_names  <- c("Overdose Rate (TX)",
#                   "Overdose Rate (TXC)",
#                  "Overdose Rate (REL)",
#                 "First-month Mult (TX)",
#                "First-month Mult (TXC)",
#               "First-month Mult (REL)",
#              "Injection Mult",
#             "Fatal Overdose Rate")
### Number of calibration targets
v_target_names <- c("Fatal Overdoses", "Non-fatal Overdoses")
n_target       <- length(v_target_names)
#### Run IMIS algorithm ####
l_fit_imis <- IMIS(B = 1000,      # n_samp = B*10 (was 100 incremental sample size at each iteration of IMIS)
B.re = n_resamp,      # "n_resamp" desired posterior sample size
number_k = 100,      # maximum number of iterations in IMIS (originally 10)
D = 0) # originally 0
### Obtain posterior
m_calib_post <- l_fit_imis$resample
#### Exploring posterior distribution ####
#### Summary statistics of posterior distribution ####
### Compute posterior mean
v_calib_post_mean <- colMeans(m_calib_post)
### Compute posterior median and 95% credible interval
m_calib_post_95cr <- matrixStats::colQuantiles(m_calib_post,
probs = c(0.025, 0.5, 0.975))
### Compute posterior values for draw
v_calib_post      <- exp(log_post(m_calib_post))
### Compute maximum-a-posteriori (MAP) as the mode of the sampled values
v_calib_post_map  <- m_calib_post[which.max(v_calib_post), ]
# Summary statistics
df_posterior_summ <- data.frame(
Parameter = v_cali_param_names,
Mean      = v_calib_post_mean,
m_calib_post_95cr,
MAP       = v_calib_post_map,
check.names = FALSE)
df_posterior_summ
### Save summary statistics of posterior distribution
## As .RData
save(df_posterior_summ,
file = "outputs/summary_posterior.RData")
## As .csv
write.csv(df_posterior_summ,
file = "tables/summary_posterior.csv",
row.names = FALSE)
#### Visualization of posterior distribution ####
### Rescale posterior to plot density of plots
v_calib_alpha <- scales::rescale(v_calib_post)
### Plot the 1000 draws from the posterior
png("plots/posterior_distribution_joint.png",
width = 8, height = 6, units = 'in', res = 300)
s3d <- scatterplot3d::scatterplot3d(x = m_calib_post[, 1],
y = m_calib_post[, 2],
z = m_calib_post[, 3],
color = scales::alpha("black", v_calib_alpha),
xlim = c(v_lb[1], v_ub[1]),
ylim = c(v_lb[2], v_ub[2]),
zlim = c(v_lb[3], v_ub[3]),
xlab = v_cali_param_names[1],
ylab = v_cali_param_names[2],
zlab = v_cali_param_names[3])
## Add center of Gaussian components
s3d$points3d(l_fit_imis$center, col = "red", pch = 8)
## Add legend
legend(s3d$xyz.convert(0.05, 1.0, 5),
col = c("black", "red"),
bg = "white", pch = c(1, 8), yjust = 0,
legend = c("Posterior sample", "Center of Gaussian components"),
cex = 1.1)
dev.off()
### Plot the 1000 draws from the posterior with marginal histograms
png("plots/posterior_distribution_marginal.png",
width = 8, height = 6, units = 'in', res = 300)
psych::pairs.panels(m_calib_post)
dev.off()
#### Store posterior and MAP from IMIS calibration ####
save(m_calib_post,
v_calib_post_map,
file = "outputs/imis_output.RData")
#### Plot prior vs. posterior distribution for calibration parameters ####
# Load posterior
imis_output <- load(file = "outputs/imis_output.RData")
# Draw sample prior
m_calib_prior <- sample.prior(n_samp = n_resamp)
# Prepare data
#colnames(m_calib_post)[8] <- "n_fatal_OD" #This step just for now due to naming discrepancy (remove later)
df_samp_prior <- melt(cbind(Distribution = "Prior",
as.data.frame(m_calib_prior[1:n_resamp, ])),
variable.name = "Parameter")
df_samp_post_imis  <- melt(cbind(Distribution = "Posterior",
as.data.frame(m_calib_post[1:n_resamp, ])),
variable.name = "Parameter")
df_calib_prior_post <- rbind(df_samp_prior, df_samp_post_imis)
df_calib_prior_post$Distribution <- ordered(df_calib_prior_post$Distribution,
levels = c("Prior",
"Posterior"))
df_calib_prior_post$Parameter <- factor(df_calib_prior_post$Parameter,
levels = levels(df_calib_prior_post$Parameter),
ordered = TRUE,
labels = v_cali_param_names)
### Plot priors and IMIS posteriors
# TO-DO: Add vertical lines for prior mean and MAP
prior_v_posterior <- ggplot(df_calib_prior_post,
aes(x = value, y = ..density.., fill = Distribution)) +
facet_wrap(~Parameter, scales = "free",
ncol = 3,
labeller = label_parsed) +
#geom_vline(data = df_posterior_summ,
#           aes(xintercept = value, linetype = Type, color = Type)) +
#scale_x_continuous(breaks = dampack::number_ticks(5)) +
scale_color_manual("", values = c("black", "navy blue", "tomato")) +
geom_density(alpha=0.5) +
theme_bw(base_size = 16) +
guides(fill = guide_legend(title = "", order = 1),
linetype = guide_legend(title = "", order = 2),
color = guide_legend(title = "", order = 2)) +
theme(legend.position = "bottom",
legend.box = "vertical",
legend.margin = margin(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.background = element_rect(fill = "white",
color = "white"),
strip.text = element_text(hjust = 0))
prior_v_posterior
ggsave(prior_v_posterior,
filename = "Plots/Calibration/prior-v-posterior.pdf",
width = 10, height = 7)
ggsave(prior_v_posterior,
filename = "Plots/Calibration/prior-v-posterior.png",
width = 10, height = 7)
#ggsave(prior_v_posterior,
#       filename = "Plots/Calibration/prior-v-posterior.jpeg",
#       width = 10, height = 7)
