<<<<<<< Updated upstream
#"n_METC_OD",
"n_REL_OD",
#"n_ABS_OD",
"n_TX_OD_mult",
"n_TXC_OD_mult",
"n_REL_OD_mult",
"n_INJ_OD_mult",
"n_fatal_OD")
#n_param        <- length(v_param_names)
### Vector with range on input search space
v_lb = c(n_TX_OD_lb   = l_params_all$n_TX_OD_lb,
n_TXC_OD_lb  = l_params_all$n_TXC_OD_lb,
#n_MET_OD_lb   = l_params_all$n_MET_OD_lb,
#n_METC_OD_lb  = l_params_all$n_METC_OD_lb,
n_REL_OD_lb   = l_params_all$n_REL_OD_lb,
#n_ABS_OD_lb   = l_params_all$n_ABS_OD_lb,
n_TX_OD_mult_lb  = l_params_all$n_TX_OD_mult_lb,
n_TXC_OD_mult_lb = l_params_all$n_TXC_OD_mult_lb,
n_REL_OD_mult_lb = l_params_all$n_REL_OD_mult_lb,
n_INJ_OD_mult_lb = l_params_all$n_INJ_OD_mult_lb,
n_fatal_OD_lb    = l_params_all$n_fatal_OD_lb) # lower bound estimate for each param
v_ub = c(n_TX_OD_ub   = l_params_all$n_TX_OD_ub,
n_TXC_OD_ub  = l_params_all$n_TXC_OD_ub,
#n_MET_OD_ub   = l_params_all$n_MET_OD_ub,
#n_METC_OD_ub  = l_params_all$n_METC_OD_ub,
n_REL_OD_ub   = l_params_all$n_REL_OD_ub,
#n_ABS_OD_ub   = l_params_all$n_ABS_OD_ub,
n_TX_OD_mult_ub  = l_params_all$n_TX_OD_mult_ub,
n_TXC_OD_mult_ub = l_params_all$n_TXC_OD_mult_ub,
n_REL_OD_mult_ub = l_params_all$n_REL_OD_mult_ub,
n_INJ_OD_mult_ub = l_params_all$n_INJ_OD_mult_ub,
n_fatal_OD_ub    = l_params_all$n_fatal_OD_ub) # higher bound estimate for each param
### Number of calibration targets
v_target_names <- c("Fatal Overdoses", "Non-fatal Overdoses")
n_target       <- length(v_target_names)
#### Run IMIS algorithm ####
# CHECK THIS STEP
l_fit_imis <- IMIS(B = 10,      # n_samp = B*10 (was 100 incremental sample size at each iteration of IMIS)
B.re = n_resamp,      # "n_resamp" desired posterior sample size
number_k = 10,      # maximum number of iterations in IMIS
D = 0)
### Obtain posterior
m_calib_post <- l_fit_imis$resample
#### Exploring posterior distribution ####
#### Summary statistics of posterior distribution ####
### Compute posterior mean
v_calib_post_mean <- colMeans(m_calib_post)
### Compute posterior median and 95% credible interval
m_calib_post_95cr <- matrixStats::colQuantiles(m_calib_post,
probs = c(0.025, 0.5, 0.975))
### Compute posterior values for draw
v_calib_post      <- exp(log_post(m_calib_post))
### Compute maximum-a-posteriori (MAP) as the mode of the sampled values
v_calib_post_map  <- m_calib_post[which.max(v_calib_post), ]
# Summary statistics
df_posterior_summ <- data.frame(
Parameter = v_param_names,
Mean      = v_calib_post_mean,
m_calib_post_95cr,
MAP       = v_calib_post_map,
check.names = FALSE)
df_posterior_summ
### Save summary statistics of posterior distribution
## As .RData
save(df_posterior_summ,
file = "outputs/summary_posterior.RData")
## As .csv
write.csv(df_posterior_summ,
file = "tables/summary_posterior.csv",
row.names = FALSE)
#### Visualization of posterior distribution ####
### Rescale posterior to plot density of plots
v_calib_alpha <- scales::rescale(v_calib_post)
### Plot the 1000 draws from the posterior
png("plots/posterior_distribution_joint.png",
width = 8, height = 6, units = 'in', res = 300)
s3d <- scatterplot3d::scatterplot3d(x = m_calib_post[, 1],
y = m_calib_post[, 2],
z = m_calib_post[, 3],
color = scales::alpha("black", v_calib_alpha),
xlim = c(v_lb[1], v_ub[1]),
ylim = c(v_lb[2], v_ub[2]),
zlim = c(v_lb[3], v_ub[3]),
xlab = v_param_names[1],
ylab = v_param_names[2],
zlab = v_param_names[3])
## Add center of Gaussian components
s3d$points3d(l_fit_imis$center, col = "red", pch = 8)
## Add legend
legend(s3d$xyz.convert(0.05, 1.0, 5),
col = c("black", "red"),
bg = "white", pch = c(1, 8), yjust = 0,
legend = c("Posterior sample", "Center of Gaussian components"),
cex = 1.1)
dev.off()
### Plot the 1000 draws from the posterior with marginal histograms
png("plots/posterior_distribution_marginal.png",
width = 8, height = 6, units = 'in', res = 300)
psych::pairs.panels(m_calib_post)
dev.off()
#### Store posterior and MAP from IMIS calibration ####
save(m_calib_post,
v_calib_post_map,
file = "outputs/imis_output.RData")
rm(list = ls()) # to clean the workspace
#### Load packages, data and functions ####
#### Load packages and functions ####
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(lhs)
library(IMIS)
# To-do: Move functions into R package for OUD model
source("R/OPTIMA_00_input_parameter_functions.R")
source("R/OPTIMA_01_model_setup_functions.R")
source("R/OPTIMA_02_calibration_functions.R")
# Load model inputs #
l_params_all <- load_all_params(file.init = "data/init_params.csv",
=======
source("R/OPTIMA_01_model_setup_functions.R")
source("R/OPTIMA_05b_ICER_functions.R")
# Load parameters
# BNX scenario
l_params_BUP <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_bup.csv", # Change initial distributions (100% in BUP)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Methadone scenario
l_params_MET <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_met.csv", # Change initial distributions (100% in MET)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
### Main deterministic model outputs ###
# Run Markov model and return outputs
outcomes_MET <- outcomes(l_params_all = l_params_MET)
outcomes_BUP <- outcomes(l_params_all = l_params_BUP)
# Calculate ICERs
ICER <- ICER(outcomes_comp = outcomes_MET, outcomes_int = outcomes_BUP)
# Output to csv files
# Full model trace
write.csv(outcomes_MET$m_M_trace,"outputs/trace/trace_MET.csv", row.names = TRUE)
write.csv(outcomes_BUP$m_M_trace,"outputs/trace/trace_BUP.csv", row.names = TRUE)
# Full model costs
write.csv(outcomes_MET$m_TOTAL_costs_states,"outputs/trace/full_trace_costs_MET.csv", row.names = TRUE)
write.csv(outcomes_BUP$m_TOTAL_costs_states,"outputs/trace/full_trace_costs_BUP.csv", row.names = TRUE)
# Costs
# Total
write.csv(outcomes_MET$v_costs,"outputs/costs/costs_MET.csv", row.names = TRUE)
write.csv(outcomes_BUP$v_costs,"outputs/costs/costs_BUP.csv", row.names = TRUE)
# Treatment
write.csv(outcomes_MET$m_TX_costs,"outputs/costs/tx_costs_MET.csv", row.names = TRUE)
write.csv(outcomes_BUP$m_TX_costs,"outputs/costs/tx_costs_BUP.csv", row.names = TRUE)
# Health sector
write.csv(outcomes_MET$m_HRU_costs,"outputs/costs/hru_costs_MET.csv", row.names = TRUE)
write.csv(outcomes_BUP$m_HRU_costs,"outputs/costs/hru_costs_BUP.csv", row.names = TRUE)
# Crime
write.csv(outcomes_MET$m_crime_costs,"outputs/costs/crime_costs_MET.csv", row.names = TRUE)
write.csv(outcomes_BUP$m_crime_costs,"outputs/costs/crime_costs_BUP.csv", row.names = TRUE)
# QALYs
write.csv(outcomes_MET$v_qalys,"outputs/qalys/qalys_MET.csv", row.names = TRUE)
write.csv(outcomes_BUP$v_qalys,"outputs/qalys/qalys_BUP.csv", row.names = TRUE)
# ICER
write.csv(ICER$v_icer,"outputs/ICER/ICER.csv", row.names = TRUE)
### PSA model outputs
### Run Markov model for PSA draws and return outputs ###
View(outcomes_BUP)
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(scales)   # for dollar signs and commas
library(tidyverse)
# Call model setup functions
source("R/OPTIMA_00_input_parameter_functions.R")
source("R/OPTIMA_01_model_setup_functions.R")
# Load parameters
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv", # Change initial distributions (100% in BUP)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Run model
l_out_markov <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE)
#### Create plots ####
# Prepare data
df_M_agg_trace <- as.data.frame(l_out_markov$m_M_agg_trace)
df_M_agg_trace$month <- as.numeric(rownames(df_M_agg_trace))
df_M_agg_trace_plot <- df_M_agg_trace %>% gather(state, proportion, "Death", "ODF", "ODN", "REL", "BUP", "BUPC", "MET", "METC", "ABS") # health states to plot
df_M_agg_trace_sero <- as.data.frame(l_out_markov$m_M_agg_trace_sero)
df_M_agg_trace_sero$month <- as.numeric(rownames(df_M_agg_trace_sero))
df_M_agg_trace_sero_plot <- df_M_agg_trace_sero %>% gather(state, proportion, "NEG-Dead", "HIV-Dead", "HCV-Dead", "COI-Dead", "NEG-Alive", "HIV-Alive", "HCV-Alive", "COI-Alive") # health states to plot
df_M_agg_state_time <- df_M_agg_trace %>% gather(state, proportion, "ODF", "ODN", "REL", "BUP", "BUPC", "MET", "METC", "ABS") # alive health states to plot
df_M_agg_state_time <- df_M_agg_state_time %>%
group_by(state) %>%
summarise_each(funs(sum), proportion) %>%
mutate(percentage = round((proportion / sum(proportion)) * 100,1))
# Preserve order for plotting
state_order_trace <- factor(df_M_agg_trace_plot$state, levels = c("Death", "ODF", "ODN", "REL", "BUP", "BUPC", "MET", "METC", "ABS"))
state_order_trace_sero <- factor(df_M_agg_trace_sero_plot$state, levels = c("NEG-Dead", "HIV-Dead", "HCV-Dead", "COI-Dead", "NEG-Alive", "HIV-Alive", "HCV-Alive", "COI-Alive"))
state_order_time  <- factor(df_M_agg_state_time$state, levels = c("ODF", "ODN", "REL", "BUP", "BUPC", "MET", "METC", "ABS"))
#state_colours_trace <- c("#d9d9d9", "#d53e4f", "#f46d43", "#fdae61", "#ffffbf", "#e6f598", "#abdda4", "#9ecae1", "#bcbddc") # colour pallette 1
state_colours_trace2 <- c("#d9d9d9", "#252525", "#b2182b", "#d6604d", "#d9f0d3", "#1b7837", "#d1e5f0", "#9ecae1", "#bcbddc") # colour pallette 2
state_colours_trace_sero <- c("#252525", "#cb181d", "#2171b5", "#6a51a3", "#969696", "#fc9272", "#9ecae1", "#bcbddc")
#state_colours_time <- c("#d53e4f", "#f46d43", "#fdae61", "#ffffbf", "#e6f598")
state_colours_time2 <- c("#252525", "#b2182b", "#fddbc7", "#d6604d", "#d9f0d3", "#1b7837", "#9ecae1", "#bcbddc") # colour pallette 2
### Markov trace plots ###
# Model 1 (Primary health state definition)
# Base model states
main_states_trace_plot <- ggplot(df_M_agg_trace_plot, aes(x = month, y = proportion, fill = state_order_trace)) +
theme_bw() +
theme(legend.position = "bottom") +
xlab("Time (months)") + ylab("Proportion in state") +
geom_area() +
scale_fill_manual(name = "Health States", values = state_colours_trace2)
pdf("Plots/Markov Trace/trace_states.pdf", width = 8, height = 6)
main_states_trace_plot
dev.off()
# Serostatus
sero_states_trace_plot <- ggplot(df_M_agg_trace_sero_plot, aes(x = month, y = proportion, fill = state_order_trace_sero)) +
theme_bw() +
theme(legend.position = "bottom") +
xlab("Time (months)") + ylab("Proportion in state") +
geom_area() +
scale_fill_manual(name = "Serostatus", values = state_colours_trace_sero)
pdf("Plots/Markov Trace/trace_sero.pdf", width = 8, height = 6)
sero_states_trace_plot
dev.off()
### Time spent in health states ###
main_states_time <- ggplot(df_M_agg_state_time, aes(x = state_order_time, y = proportion, fill = state_order_time)) +
theme_bw() +
theme(legend.position = "none") +
xlab("Health State") + ylab("Time") +
geom_bar(stat = "identity") +
scale_fill_manual(values = state_colours_time2) +
geom_text(aes(label = paste0(round(proportion,1)," (",percentage,"%)")), hjust = -0.25, size = 3.5) +
coord_flip(ylim = c(0, 780))
pdf(file = "Plots/Markov Trace/time_states.pdf", width = 8, height = 3)
main_states_time
dev.off()
### Combined plot ###
#plots <- list()
#plots[[1]] <- main_states_trace_plot
#plots[[2]] <- main_states_time
#layout <- matrix(c(1, 1, 2), nrow = 3, byrow = TRUE)
#pdf(file = "Plots/Markov Trace/full_trace.pdf", width = 8, height = 9)
#multiplot(plotlist = plots, layout = layout)
#dev.off()
# Model 2 (Trial health state definition)
# Model 3 (Original health state definition)
# Load model inputs #
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv", # calibrate on full trial sample (x% bup; x% met)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv", # includes calibration-related parameters
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Load calibration inputs #
v_cali_param_names <- c("n_TX_OD",
"n_TXC_OD",
"n_REL_OD",
#"n_ABS_OD",
"n_TX_OD_mult",
"n_TXC_OD_mult",
"n_REL_OD_mult",
"n_INJ_OD_mult",
"n_fatal_OD")
v_shape <- c(n_TX_OD_shape   = l_params_all$n_TX_OD_shape,
n_TXC_OD_shape  = l_params_all$n_TXC_OD_shape,
#n_MET_OD_shape   = l_params_all$n_MET_OD_shape,
#n_METC_OD_shape  = l_params_all$n_METC_OD_shape,
n_REL_OD_shape   = l_params_all$n_REL_OD_shape,
#n_ABS_OD_shape   = l_params_all$n_ABS_OD_shape,
n_TX_OD_mult_shape  = l_params_all$n_TX_OD_mult_shape,
n_TXC_OD_mult_shape = l_params_all$n_TXC_OD_mult_shape,
n_REL_OD_mult_shape = l_params_all$n_REL_OD_mult_shape,
n_INJ_OD_mult_shape = l_params_all$n_INJ_OD_mult_shape,
n_fatal_OD_shape    = l_params_all$n_fatal_OD_shape) # lower bound estimate for each param
v_scale <- c(n_TX_OD_scale   = l_params_all$n_TX_OD_scale,
n_TXC_OD_scale  = l_params_all$n_TXC_OD_scale,
#n_MET_OD_scale   = l_params_all$n_MET_OD_scale,
#n_METC_OD_scale  = l_params_all$n_METC_OD_scale,
n_REL_OD_scale   = l_params_all$n_REL_OD_scale,
#n_ABS_OD_scale   = l_params_all$n_ABS_OD_scale,
n_TX_OD_mult_scale  = l_params_all$n_TX_OD_mult_scale,
n_TXC_OD_mult_scale = l_params_all$n_TXC_OD_mult_scale,
n_REL_OD_mult_scale = l_params_all$n_REL_OD_mult_scale,
n_INJ_OD_mult_scale = l_params_all$n_INJ_OD_mult_scale,
n_fatal_OD_scale    = l_params_all$n_fatal_OD_scale)
# To-do: Move functions into R package for OUD model
source("R/OPTIMA_00_input_parameter_functions.R")
source("R/OPTIMA_01_model_setup_functions.R")
source("R/OPTIMA_02_calibration_functions.R")
# Load model inputs #
l_params_all <- load_all_params(file.init = "data/init_params.csv",
>>>>>>> Stashed changes
file.init_dist = "data/init_dist.csv", # calibrate on full trial sample (x% bup; x% met)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv", # includes calibration-related parameters
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Load calibration inputs #
v_cali_param_names <- c("n_TX_OD",
"n_TXC_OD",
"n_REL_OD",
#"n_ABS_OD",
"n_TX_OD_mult",
"n_TXC_OD_mult",
"n_REL_OD_mult",
"n_INJ_OD_mult",
"n_fatal_OD")
v_shape <- c(n_TX_OD_shape   = l_params_all$n_TX_OD_shape,
n_TXC_OD_shape  = l_params_all$n_TXC_OD_shape,
#n_MET_OD_shape   = l_params_all$n_MET_OD_shape,
#n_METC_OD_shape  = l_params_all$n_METC_OD_shape,
n_REL_OD_shape   = l_params_all$n_REL_OD_shape,
#n_ABS_OD_shape   = l_params_all$n_ABS_OD_shape,
n_TX_OD_mult_shape  = l_params_all$n_TX_OD_mult_shape,
n_TXC_OD_mult_shape = l_params_all$n_TXC_OD_mult_shape,
n_REL_OD_mult_shape = l_params_all$n_REL_OD_mult_shape,
n_INJ_OD_mult_shape = l_params_all$n_INJ_OD_mult_shape,
n_fatal_OD_shape    = l_params_all$n_fatal_OD_shape) # lower bound estimate for each param
v_scale <- c(n_TX_OD_scale   = l_params_all$n_TX_OD_scale,
n_TXC_OD_scale  = l_params_all$n_TXC_OD_scale,
#n_MET_OD_scale   = l_params_all$n_MET_OD_scale,
#n_METC_OD_scale  = l_params_all$n_METC_OD_scale,
n_REL_OD_scale   = l_params_all$n_REL_OD_scale,
#n_ABS_OD_scale   = l_params_all$n_ABS_OD_scale,
n_TX_OD_mult_scale  = l_params_all$n_TX_OD_mult_scale,
n_TXC_OD_mult_scale = l_params_all$n_TXC_OD_mult_scale,
n_REL_OD_mult_scale = l_params_all$n_REL_OD_mult_scale,
n_INJ_OD_mult_scale = l_params_all$n_INJ_OD_mult_scale,
n_fatal_OD_scale    = l_params_all$n_fatal_OD_scale)
<<<<<<< Updated upstream
#### Load calibration targets ####
#data("03_calibration_targets")
l_cali_targets <- list(ODF = read.csv(file = "data/cali_target_odf.csv", header = TRUE),
ODN = read.csv(file = "data/cali_target_odn.csv", header = TRUE))
#### Visualize targets ####
### TARGET 1: Overdose deaths ("ODF")
plotrix::plotCI(x    = l_cali_targets$ODF$Time,
y    = l_cali_targets$ODF$pe,
ui   = l_cali_targets$ODF$high,
li   = l_cali_targets$ODF$low,
#ylim = c(0, 1),
xlab = "Month", ylab = "Fatal Overdoses")
### TARGET 2: Non-fatal overdose ("ODN")
plotrix::plotCI(x    = l_cali_targets$ODN$Time,
y    = l_cali_targets$ODN$pe,
ui   = l_cali_targets$ODN$high,
li   = l_cali_targets$ODN$low,
#ylim = c(0, 1),
xlab = "Month", ylab = "Non-fatal Overdoses")
#### Run calibration algorithms ####
# Check that it works
#v_params_calib <- c(p_BUP_OD_NI = l_params_all$p_BUP_OD_NI,
#              p_MET_OD_NI = l_params_all$p_MET_OD_NI,
#              p_REL_OD_NI = l_params_all$p_REL_OD_NI,
#              p_ABS_OD_NI = l_params_all$p_ABS_OD_NI,
#              p_BUP_OD_INJ = l_params_all$p_BUP_OD_INJ,
#              p_MET_OD_INJ = l_params_all$p_MET_OD_INJ,
#              p_REL_OD_INJ = l_params_all$p_REL_OD_INJ,
#              p_ABS_OD_INJ = l_params_all$p_ABS_OD_INJ)
#test <- calibration_out(v_params_calib = v_params_calib, l_params_all = l_params_all)
#### Specify calibration parameters ####
### Specify seed (for reproducible sequence of random numbers)
set.seed(3730687)
### Number of random samples to obtain from the posterior distribution
n_resamp <- 1000
### Names and number of input parameters to be calibrated
v_param_names  <- c("n_TX_OD",
"n_TXC_OD",
#"n_MET_OD",
#"n_METC_OD",
=======
rm(list = ls()) # to clean the workspace
#### Load packages, data and functions ####
#### Load packages and functions ####
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(lhs)
library(IMIS)
# To-do: Move functions into R package for OUD model
source("R/OPTIMA_00_input_parameter_functions.R")
source("R/OPTIMA_01_model_setup_functions.R")
source("R/OPTIMA_02_calibration_functions.R")
# Load model inputs #
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv", # calibrate on full trial sample (x% bup; x% met)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv", # includes calibration-related parameters
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Load calibration inputs #
v_cali_param_names <- c("n_TX_OD",
"n_TXC_OD",
>>>>>>> Stashed changes
"n_REL_OD",
#"n_ABS_OD",
"n_TX_OD_mult",
"n_TXC_OD_mult",
"n_REL_OD_mult",
"n_INJ_OD_mult",
"n_fatal_OD")
<<<<<<< Updated upstream
#n_param        <- length(v_param_names)
### Vector with range on input search space
#v_lb = c(n_TX_OD_lb   = l_params_all$n_TX_OD_lb,
#         n_TXC_OD_lb  = l_params_all$n_TXC_OD_lb,
#         #n_MET_OD_lb   = l_params_all$n_MET_OD_lb,
#         #n_METC_OD_lb  = l_params_all$n_METC_OD_lb,
#         n_REL_OD_lb   = l_params_all$n_REL_OD_lb,
#         #n_ABS_OD_lb   = l_params_all$n_ABS_OD_lb,
#         n_TX_OD_mult_lb  = l_params_all$n_TX_OD_mult_lb,
#         n_TXC_OD_mult_lb = l_params_all$n_TXC_OD_mult_lb,
#         n_REL_OD_mult_lb = l_params_all$n_REL_OD_mult_lb,
#         n_INJ_OD_mult_lb = l_params_all$n_INJ_OD_mult_lb,
#         n_fatal_OD_lb    = l_params_all$n_fatal_OD_lb) # lower bound estimate for each param
#
#v_ub = c(n_TX_OD_ub   = l_params_all$n_TX_OD_ub,
#         n_TXC_OD_ub  = l_params_all$n_TXC_OD_ub,
#         #n_MET_OD_ub   = l_params_all$n_MET_OD_ub,
#         #n_METC_OD_ub  = l_params_all$n_METC_OD_ub,
#         n_REL_OD_ub   = l_params_all$n_REL_OD_ub,
#         #n_ABS_OD_ub   = l_params_all$n_ABS_OD_ub,
#         n_TX_OD_mult_ub  = l_params_all$n_TX_OD_mult_ub,
#         n_TXC_OD_mult_ub = l_params_all$n_TXC_OD_mult_ub,
#         n_REL_OD_mult_ub = l_params_all$n_REL_OD_mult_ub,
#         n_INJ_OD_mult_ub = l_params_all$n_INJ_OD_mult_ub,
#         n_fatal_OD_ub    = l_params_all$n_fatal_OD_ub) # higher bound estimate for each param
### Number of calibration targets
v_target_names <- c("Fatal Overdoses", "Non-fatal Overdoses")
n_target       <- length(v_target_names)
#### Run IMIS algorithm ####
# CHECK THIS STEP
l_fit_imis <- IMIS(B = 10,      # n_samp = B*10 (was 100 incremental sample size at each iteration of IMIS)
B.re = n_resamp,      # "n_resamp" desired posterior sample size
number_k = 10,      # maximum number of iterations in IMIS
D = 0)
### Obtain posterior
m_calib_post <- l_fit_imis$resample
#### Exploring posterior distribution ####
#### Summary statistics of posterior distribution ####
### Compute posterior mean
v_calib_post_mean <- colMeans(m_calib_post)
### Compute posterior median and 95% credible interval
m_calib_post_95cr <- matrixStats::colQuantiles(m_calib_post,
probs = c(0.025, 0.5, 0.975))
### Compute posterior values for draw
v_calib_post      <- exp(log_post(m_calib_post))
### Compute maximum-a-posteriori (MAP) as the mode of the sampled values
v_calib_post_map  <- m_calib_post[which.max(v_calib_post), ]
# Summary statistics
df_posterior_summ <- data.frame(
Parameter = v_param_names,
Mean      = v_calib_post_mean,
m_calib_post_95cr,
MAP       = v_calib_post_map,
check.names = FALSE)
df_posterior_summ
### Save summary statistics of posterior distribution
## As .RData
save(df_posterior_summ,
file = "outputs/summary_posterior.RData")
## As .csv
write.csv(df_posterior_summ,
file = "tables/summary_posterior.csv",
row.names = FALSE)
#### Visualization of posterior distribution ####
### Rescale posterior to plot density of plots
v_calib_alpha <- scales::rescale(v_calib_post)
### Plot the 1000 draws from the posterior
png("plots/posterior_distribution_joint.png",
width = 8, height = 6, units = 'in', res = 300)
s3d <- scatterplot3d::scatterplot3d(x = m_calib_post[, 1],
y = m_calib_post[, 2],
z = m_calib_post[, 3],
color = scales::alpha("black", v_calib_alpha),
xlim = c(v_lb[1], v_ub[1]),
ylim = c(v_lb[2], v_ub[2]),
zlim = c(v_lb[3], v_ub[3]),
xlab = v_param_names[1],
ylab = v_param_names[2],
zlab = v_param_names[3])
## Add center of Gaussian components
s3d$points3d(l_fit_imis$center, col = "red", pch = 8)
## Add legend
legend(s3d$xyz.convert(0.05, 1.0, 5),
col = c("black", "red"),
bg = "white", pch = c(1, 8), yjust = 0,
legend = c("Posterior sample", "Center of Gaussian components"),
cex = 1.1)
dev.off()
### Plot the 1000 draws from the posterior with marginal histograms
png("plots/posterior_distribution_marginal.png",
width = 8, height = 6, units = 'in', res = 300)
psych::pairs.panels(m_calib_post)
dev.off()
#### Store posterior and MAP from IMIS calibration ####
save(m_calib_post,
v_calib_post_map,
file = "outputs/imis_output.RData")
rm(list = ls()) # to clean the workspace
#### Load packages, data and functions ####
#### Load packages and functions ####
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(lhs)
library(IMIS)
# To-do: Move functions into R package for OUD model
source("R/OPTIMA_00_input_parameter_functions.R")
source("R/OPTIMA_01_model_setup_functions.R")
source("R/OPTIMA_02_calibration_functions.R")
=======
v_shape <- c(n_TX_OD_shape   = l_params_all$n_TX_OD_shape,
n_TXC_OD_shape  = l_params_all$n_TXC_OD_shape,
#n_MET_OD_shape   = l_params_all$n_MET_OD_shape,
#n_METC_OD_shape  = l_params_all$n_METC_OD_shape,
n_REL_OD_shape   = l_params_all$n_REL_OD_shape,
#n_ABS_OD_shape   = l_params_all$n_ABS_OD_shape,
n_TX_OD_mult_shape  = l_params_all$n_TX_OD_mult_shape,
n_TXC_OD_mult_shape = l_params_all$n_TXC_OD_mult_shape,
n_REL_OD_mult_shape = l_params_all$n_REL_OD_mult_shape,
n_INJ_OD_mult_shape = l_params_all$n_INJ_OD_mult_shape,
n_fatal_OD_shape    = l_params_all$n_fatal_OD_shape) # lower bound estimate for each param
v_scale <- c(n_TX_OD_scale   = l_params_all$n_TX_OD_scale,
n_TXC_OD_scale  = l_params_all$n_TXC_OD_scale,
#n_MET_OD_scale   = l_params_all$n_MET_OD_scale,
#n_METC_OD_scale  = l_params_all$n_METC_OD_scale,
n_REL_OD_scale   = l_params_all$n_REL_OD_scale,
#n_ABS_OD_scale   = l_params_all$n_ABS_OD_scale,
n_TX_OD_mult_scale  = l_params_all$n_TX_OD_mult_scale,
n_TXC_OD_mult_scale = l_params_all$n_TXC_OD_mult_scale,
n_REL_OD_mult_scale = l_params_all$n_REL_OD_mult_scale,
n_INJ_OD_mult_scale = l_params_all$n_INJ_OD_mult_scale,
n_fatal_OD_scale    = l_params_all$n_fatal_OD_scale)
test2 <- sample.prior(n_samp = 100)
View(test2)
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
# Call model setup functions
# To-do: Move into package eventually
source("R/OPTIMA_00_input_parameter_functions.R")
source("R/OPTIMA_01_model_setup_functions.R")
source("R/OPTIMA_05b_ICER_functions.R")
# Load parameters
# BNX scenario
l_params_BUP <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_bup.csv", # Change initial distributions (100% in BUP)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Methadone scenario
l_params_MET <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_met.csv", # Change initial distributions (100% in MET)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
### Main deterministic model outputs ###
# Run Markov model and return outputs
outcomes_MET <- outcomes(l_params_all = l_params_MET)
outcomes_BUP <- outcomes(l_params_all = l_params_BUP)
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
# Call model setup functions
# To-do: Move into package eventually
source("R/OPTIMA_00_input_parameter_functions.R")
source("R/OPTIMA_01_model_setup_functions.R")
source("R/OPTIMA_05b_ICER_functions.R")
# Load parameters
# BNX scenario
l_params_BUP <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_bup.csv", # Change initial distributions (100% in BUP)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Methadone scenario
l_params_MET <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_met.csv", # Change initial distributions (100% in MET)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
### Main deterministic model outputs ###
# Run Markov model and return outputs
outcomes_MET <- outcomes(l_params_all = l_params_MET)
outcomes_BUP <- outcomes(l_params_all = l_params_BUP)
View(test2)
write.csv(test2, row.names = TRUE)
write.csv(test2,"checks/priors.csv", row.names = TRUE)
load("~/GitHub/OPTIMA-Model/outputs/imis_output.RData")
View(m_calib_post)
data_long <- gather(m_calib_post, parameter, draw, factor_key=TRUE)
data_long
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(ggridges) # specialized ridge plots
library(tidyverse)
library(lhs)
library(IMIS)
# Prepare data
data_long <- gather(m_calib_post, parameter, draw, factor_key=TRUE)
data_long
#### Plot prior vs. posterior distribution for calibration parameters ####
# Prepare data
data_wide <- as.data.frame(m_calib_post)
data_long <- gather(data_wide, parameter, draw, factor_key=TRUE)
View(data_long)
View(data_long)
View(data_wide)
df_calib_post <- as.data.frame(m_calib_post)
# Base overdose rates
df_calib_plot <- gather(df_calib_post, parameter, draw, factor_key = TRUE) %>% filter(parameter == "n_BUP_OD" | parameter == "n_BUPC_OD" | parameter == "n_MET_OD" | parameter == "n_METC_OD" | parameter == "n_REL_OD")
View(data_wide)
ggplot(
df_calib_post_plot_base,
aes(x = draw, y = parameter, fill = stat(x))) +
geom_density_ridges_gradient(scale = 3, size = 0.3, rel_min_height = 0.01) +
scale_fill_viridis_c(name = "Temp. [F]", option = "C") +
labs(title = 'Temperatures in Lincoln NE')
# Base overdose rates
df_calib_post_plot_base <- gather(df_calib_post, parameter, draw, factor_key = TRUE) %>% filter(parameter == "n_BUP_OD" | parameter == "n_BUPC_OD" | parameter == "n_MET_OD" | parameter == "n_METC_OD" | parameter == "n_REL_OD")
# Overdose rate multipliers
df_calib_post_plot_mult <- gather(df_calib_post, parameter, draw, factor_key = TRUE) %>% filter(parameter == "n_TX_OD_mult" | parameter == "n_TXC_OD_mult" | parameter == "n_REL_OD_mult" | parameter == "n_INJ_OD_mult")
# Fatal overdose rate
df_calib_post_plot_mult <- gather(df_calib_post, parameter, draw, factor_key = TRUE) %>% filter(parameter == "n_TX_OD_mult" | parameter == "n_TXC_OD_mult" | parameter == "n_REL_OD_mult" | parameter == "n_INJ_OD_mult")
# Base overdose rates
ggplot(
df_calib_post_plot_base,
aes(x = draw, y = parameter, fill = stat(x))) +
geom_density_ridges_gradient(scale = 3, size = 0.3, rel_min_height = 0.01) +
scale_fill_viridis_c(name = "Temp. [F]", option = "C") +
labs(title = 'Temperatures in Lincoln NE')
# Base overdose rates
cali_base_od_prior_post <- ggplot(df_calib_post_plot_base,
aes(x = draw, y = parameter, fill = stat(x))) +
geom_density_ridges_gradient(scale = 3, size = 0.3, rel_min_height = 0.01) +
scale_fill_viridis_c(name = "Monthly rate", option = "C") +
labs(title = 'Base Overdose Rates')
pdf("Plots/Calibration/cali_base_od_prior_post.pdf", width = 8, height = 6)
cali_base_od_prior_post
dev.off()
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/calibration_functions.R")
#### Plot prior vs. posterior distribution for calibration parameters ####
# Draw sample prior
m_calib_prior <- sample.prior(n_samp = 2000)
>>>>>>> Stashed changes
# Load model inputs #
l_params_all <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist.csv", # calibrate on full trial sample (x% bup; x% met)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv", # includes calibration-related parameters
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Load calibration inputs #
v_cali_param_names <- c("n_TX_OD",
"n_TXC_OD",
"n_REL_OD",
<<<<<<< Updated upstream
#"n_ABS_OD",
=======
>>>>>>> Stashed changes
"n_TX_OD_mult",
"n_TXC_OD_mult",
"n_REL_OD_mult",
"n_INJ_OD_mult",
"n_fatal_OD")
v_shape <- c(n_TX_OD_shape   = l_params_all$n_TX_OD_shape,
n_TXC_OD_shape  = l_params_all$n_TXC_OD_shape,
<<<<<<< Updated upstream
#n_MET_OD_shape   = l_params_all$n_MET_OD_shape,
#n_METC_OD_shape  = l_params_all$n_METC_OD_shape,
n_REL_OD_shape   = l_params_all$n_REL_OD_shape,
#n_ABS_OD_shape   = l_params_all$n_ABS_OD_shape,
=======
n_REL_OD_shape   = l_params_all$n_REL_OD_shape,
>>>>>>> Stashed changes
n_TX_OD_mult_shape  = l_params_all$n_TX_OD_mult_shape,
n_TXC_OD_mult_shape = l_params_all$n_TXC_OD_mult_shape,
n_REL_OD_mult_shape = l_params_all$n_REL_OD_mult_shape,
n_INJ_OD_mult_shape = l_params_all$n_INJ_OD_mult_shape,
n_fatal_OD_shape    = l_params_all$n_fatal_OD_shape) # lower bound estimate for each param
v_scale <- c(n_TX_OD_scale   = l_params_all$n_TX_OD_scale,
n_TXC_OD_scale  = l_params_all$n_TXC_OD_scale,
<<<<<<< Updated upstream
#n_MET_OD_scale   = l_params_all$n_MET_OD_scale,
#n_METC_OD_scale  = l_params_all$n_METC_OD_scale,
n_REL_OD_scale   = l_params_all$n_REL_OD_scale,
#n_ABS_OD_scale   = l_params_all$n_ABS_OD_scale,
=======
n_REL_OD_scale   = l_params_all$n_REL_OD_scale,
>>>>>>> Stashed changes
n_TX_OD_mult_scale  = l_params_all$n_TX_OD_mult_scale,
n_TXC_OD_mult_scale = l_params_all$n_TXC_OD_mult_scale,
n_REL_OD_mult_scale = l_params_all$n_REL_OD_mult_scale,
n_INJ_OD_mult_scale = l_params_all$n_INJ_OD_mult_scale,
n_fatal_OD_scale    = l_params_all$n_fatal_OD_scale)
<<<<<<< Updated upstream
#### Load calibration targets ####
#data("03_calibration_targets")
l_cali_targets <- list(ODF = read.csv(file = "data/cali_target_odf.csv", header = TRUE),
ODN = read.csv(file = "data/cali_target_odn.csv", header = TRUE))
#### Visualize targets ####
### TARGET 1: Overdose deaths ("ODF")
plotrix::plotCI(x    = l_cali_targets$ODF$Time,
y    = l_cali_targets$ODF$pe,
ui   = l_cali_targets$ODF$high,
li   = l_cali_targets$ODF$low,
#ylim = c(0, 1),
xlab = "Month", ylab = "Fatal Overdoses")
### TARGET 2: Non-fatal overdose ("ODN")
plotrix::plotCI(x    = l_cali_targets$ODN$Time,
y    = l_cali_targets$ODN$pe,
ui   = l_cali_targets$ODN$high,
li   = l_cali_targets$ODN$low,
#ylim = c(0, 1),
xlab = "Month", ylab = "Non-fatal Overdoses")
#### Run calibration algorithms ####
# Check that it works
#v_params_calib <- c(p_BUP_OD_NI = l_params_all$p_BUP_OD_NI,
#              p_MET_OD_NI = l_params_all$p_MET_OD_NI,
#              p_REL_OD_NI = l_params_all$p_REL_OD_NI,
#              p_ABS_OD_NI = l_params_all$p_ABS_OD_NI,
#              p_BUP_OD_INJ = l_params_all$p_BUP_OD_INJ,
#              p_MET_OD_INJ = l_params_all$p_MET_OD_INJ,
#              p_REL_OD_INJ = l_params_all$p_REL_OD_INJ,
#              p_ABS_OD_INJ = l_params_all$p_ABS_OD_INJ)
#test <- calibration_out(v_params_calib = v_params_calib, l_params_all = l_params_all)
#### Specify calibration parameters ####
### Specify seed (for reproducible sequence of random numbers)
set.seed(3730687)
### Number of random samples to obtain from the posterior distribution
n_resamp <- 1000
### Names and number of input parameters to be calibrated
v_param_names  <- c("n_TX_OD",
"n_TXC_OD",
#"n_MET_OD",
#"n_METC_OD",
"n_REL_OD",
#"n_ABS_OD",
"n_TX_OD_mult",
"n_TXC_OD_mult",
"n_REL_OD_mult",
"n_INJ_OD_mult",
"n_fatal_OD")
#n_param        <- length(v_param_names)
### Vector with range on input search space
#v_lb = c(n_TX_OD_lb   = l_params_all$n_TX_OD_lb,
#         n_TXC_OD_lb  = l_params_all$n_TXC_OD_lb,
#         #n_MET_OD_lb   = l_params_all$n_MET_OD_lb,
#         #n_METC_OD_lb  = l_params_all$n_METC_OD_lb,
#         n_REL_OD_lb   = l_params_all$n_REL_OD_lb,
#         #n_ABS_OD_lb   = l_params_all$n_ABS_OD_lb,
#         n_TX_OD_mult_lb  = l_params_all$n_TX_OD_mult_lb,
#         n_TXC_OD_mult_lb = l_params_all$n_TXC_OD_mult_lb,
#         n_REL_OD_mult_lb = l_params_all$n_REL_OD_mult_lb,
#         n_INJ_OD_mult_lb = l_params_all$n_INJ_OD_mult_lb,
#         n_fatal_OD_lb    = l_params_all$n_fatal_OD_lb) # lower bound estimate for each param
#
#v_ub = c(n_TX_OD_ub   = l_params_all$n_TX_OD_ub,
#         n_TXC_OD_ub  = l_params_all$n_TXC_OD_ub,
#         #n_MET_OD_ub   = l_params_all$n_MET_OD_ub,
#         #n_METC_OD_ub  = l_params_all$n_METC_OD_ub,
#         n_REL_OD_ub   = l_params_all$n_REL_OD_ub,
#         #n_ABS_OD_ub   = l_params_all$n_ABS_OD_ub,
#         n_TX_OD_mult_ub  = l_params_all$n_TX_OD_mult_ub,
#         n_TXC_OD_mult_ub = l_params_all$n_TXC_OD_mult_ub,
#         n_REL_OD_mult_ub = l_params_all$n_REL_OD_mult_ub,
#         n_INJ_OD_mult_ub = l_params_all$n_INJ_OD_mult_ub,
#         n_fatal_OD_ub    = l_params_all$n_fatal_OD_ub) # higher bound estimate for each param
### Number of calibration targets
v_target_names <- c("Fatal Overdoses", "Non-fatal Overdoses")
n_target       <- length(v_target_names)
#### Run IMIS algorithm ####
# CHECK THIS STEP
l_fit_imis <- IMIS(B = 10,      # n_samp = B*10 (was 100 incremental sample size at each iteration of IMIS)
B.re = n_resamp,      # "n_resamp" desired posterior sample size
number_k = 10,      # maximum number of iterations in IMIS
D = 0)
### Obtain posterior
m_calib_post <- l_fit_imis$resample
#### Exploring posterior distribution ####
#### Summary statistics of posterior distribution ####
### Compute posterior mean
v_calib_post_mean <- colMeans(m_calib_post)
### Compute posterior median and 95% credible interval
m_calib_post_95cr <- matrixStats::colQuantiles(m_calib_post,
probs = c(0.025, 0.5, 0.975))
### Compute posterior values for draw
v_calib_post      <- exp(log_post(m_calib_post))
### Compute maximum-a-posteriori (MAP) as the mode of the sampled values
v_calib_post_map  <- m_calib_post[which.max(v_calib_post), ]
# Summary statistics
df_posterior_summ <- data.frame(
Parameter = v_param_names,
Mean      = v_calib_post_mean,
m_calib_post_95cr,
MAP       = v_calib_post_map,
check.names = FALSE)
df_posterior_summ
### Save summary statistics of posterior distribution
## As .RData
save(df_posterior_summ,
file = "outputs/summary_posterior.RData")
## As .csv
write.csv(df_posterior_summ,
file = "tables/summary_posterior.csv",
row.names = FALSE)
#### Visualization of posterior distribution ####
### Rescale posterior to plot density of plots
v_calib_alpha <- scales::rescale(v_calib_post)
### Plot the 1000 draws from the posterior
png("plots/posterior_distribution_joint.png",
width = 8, height = 6, units = 'in', res = 300)
s3d <- scatterplot3d::scatterplot3d(x = m_calib_post[, 1],
y = m_calib_post[, 2],
z = m_calib_post[, 3],
color = scales::alpha("black", v_calib_alpha),
xlim = c(v_lb[1], v_ub[1]),
ylim = c(v_lb[2], v_ub[2]),
zlim = c(v_lb[3], v_ub[3]),
xlab = v_param_names[1],
ylab = v_param_names[2],
zlab = v_param_names[3])
## Add center of Gaussian components
s3d$points3d(l_fit_imis$center, col = "red", pch = 8)
## Add legend
legend(s3d$xyz.convert(0.05, 1.0, 5),
col = c("black", "red"),
bg = "white", pch = c(1, 8), yjust = 0,
legend = c("Posterior sample", "Center of Gaussian components"),
cex = 1.1)
dev.off()
### Plot the 1000 draws from the posterior with marginal histograms
png("plots/posterior_distribution_marginal.png",
width = 8, height = 6, units = 'in', res = 300)
psych::pairs.panels(m_calib_post)
dev.off()
#### Store posterior and MAP from IMIS calibration ####
save(m_calib_post,
v_calib_post_map,
file = "outputs/imis_output.RData")
=======
#### Plot prior vs. posterior distribution for calibration parameters ####
# Draw sample prior
m_calib_prior <- sample.prior(n_samp = 2000)
View(m_calib_prior)
>>>>>>> Stashed changes
