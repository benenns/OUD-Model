labels = scales::number_format(scale = .000001, suffix = "M"),
# Add a second axis and specify its features
sec.axis = sec_axis(~./(1.2 * (min(transformation * 1.2), na.rm = TRUE)), name = "Test positivity (%)", breaks = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0))
)
plot_test_volume_positivity <- ggplot(df_testing_volumes, aes(x = year))  +
#geom_bar(aes(x = year, y = n_test_cdc_total), stat = "identity", fill = "tan1", colour = "sienna3") +
#geom_line(aes(x = year, y = n_test_pos_total), stat = "identity") +
theme_bw() +
geom_bar( aes(y = n_test_cdc), stat="identity", size=.1, fill=temperatureColor, color="black", alpha=.4) +
geom_point(aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = 'black') +
geom_line( aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = priceColor) +
scale_x_continuous(breaks = c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020)) +
scale_y_continuous(
# Features of the first axis
name = "CDC-funded test volume (Number of tests)",
labels = scales::number_format(scale = .000001, suffix = "M"),
# Add a second axis and specify its features
sec.axis = sec_axis(~./(1.2 * (min(transformation * 1.2), na.rm = TRUE)), name = "Test positivity (%)", breaks = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0))
)
plot_test_volume_positivity <- ggplot(df_testing_volumes, aes(x = year))  +
#geom_bar(aes(x = year, y = n_test_cdc_total), stat = "identity", fill = "tan1", colour = "sienna3") +
#geom_line(aes(x = year, y = n_test_pos_total), stat = "identity") +
theme_bw() +
geom_bar( aes(y = n_test_cdc), stat="identity", size=.1, fill=temperatureColor, color="black", alpha=.4) +
geom_point(aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = 'black') +
geom_line( aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = priceColor) +
scale_x_continuous(breaks = c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020)) +
scale_y_continuous(
# Features of the first axis
name = "CDC-funded test volume (Number of tests)",
labels = scales::number_format(scale = .000001, suffix = "M"),
# Add a second axis and specify its features
sec.axis = sec_axis(~./(1.2 * (min(transformation, na.rm = TRUE))), name = "Test positivity (%)", breaks = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0))
)
plot_test_volume_positivity
plot_test_volume_positivity <- ggplot(df_testing_volumes, aes(x = year))  +
#geom_bar(aes(x = year, y = n_test_cdc_total), stat = "identity", fill = "tan1", colour = "sienna3") +
#geom_line(aes(x = year, y = n_test_pos_total), stat = "identity") +
theme_bw() +
geom_bar( aes(y = n_test_cdc), stat="identity", size=.1, fill=temperatureColor, color="black", alpha=.4) +
geom_point(aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = 'black') +
geom_line( aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = priceColor) +
scale_x_continuous(breaks = c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020)) +
scale_y_continuous(
# Features of the first axis
name = "CDC-funded test volume (Number of tests)",
labels = scales::number_format(scale = .000001, suffix = "M"),
# Add a second axis and specify its features
sec.axis = sec_axis(~./(1.2 * (min(df_testing_volumes$transformation, na.rm = TRUE))), name = "Test positivity (%)", breaks = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0))
)
plot_test_volume_positivity
plot_test_volume_positivity <- ggplot(df_testing_volumes, aes(x = year))  +
#geom_bar(aes(x = year, y = n_test_cdc_total), stat = "identity", fill = "tan1", colour = "sienna3") +
#geom_line(aes(x = year, y = n_test_pos_total), stat = "identity") +
theme_bw() +
geom_bar( aes(y = n_test_cdc), stat="identity", size=.1, fill=temperatureColor, color="black", alpha=.4) +
geom_point(aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = 'black') +
geom_line( aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = priceColor) +
scale_x_continuous(breaks = c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020)) +
scale_y_continuous(
# Features of the first axis
name = "CDC-funded test volume (Number of tests)",
labels = scales::number_format(scale = .000001, suffix = "M"),
# Add a second axis and specify its features
sec.axis = sec_axis(~./(1.2 * (min(df_testing_volumes$transformation, na.rm = TRUE))), name = "Test positivity (%)", breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0))
)
plot_test_volume_positivity
ggsave(plot_test_volume_positivity,
filename = "G:/My Drive/Work/LEM/LEM 2.0 - Testing Editorial/Plot/test-volume-positivity.png",
width = 6, height = 6, dpi = 350)
volume_colour <- "#ffffbf"
positivity_colour <- "#91bfdb"
plot_test_volume_positivity <- ggplot(df_testing_volumes, aes(x = year))  +
#geom_bar(aes(x = year, y = n_test_cdc_total), stat = "identity", fill = "tan1", colour = "sienna3") +
#geom_line(aes(x = year, y = n_test_pos_total), stat = "identity") +
theme_bw() +
geom_bar( aes(y = n_test_cdc), stat="identity", size=.1, fill = volume_colour, color="black", alpha=.4) +
geom_point(aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = 'black') +
geom_line( aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = positivity_colour) +
scale_x_continuous(breaks = c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020)) +
scale_y_continuous(
# Features of the first axis
name = "CDC-funded test volume (Number of tests)",
labels = scales::number_format(scale = .000001, suffix = "M"),
# Add a second axis and specify its features
sec.axis = sec_axis(~./(1.2 * (min(df_testing_volumes$transformation, na.rm = TRUE))), name = "Test positivity (%)", breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0))
)
plot_test_volume_positivity
volume_colour <- "#69b3a2"
positivity_colour <- rgb(0.2, 0.6, 0.9, 1)
plot_test_volume_positivity <- ggplot(df_testing_volumes, aes(x = year))  +
#geom_bar(aes(x = year, y = n_test_cdc_total), stat = "identity", fill = "tan1", colour = "sienna3") +
#geom_line(aes(x = year, y = n_test_pos_total), stat = "identity") +
theme_bw() +
geom_bar( aes(y = n_test_cdc), stat="identity", size=.1, fill = volume_colour, color="black", alpha=.4) +
geom_point(aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = 'black') +
geom_line( aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = positivity_colour) +
scale_x_continuous(breaks = c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020)) +
scale_y_continuous(
# Features of the first axis
name = "CDC-funded test volume (Number of tests)",
labels = scales::number_format(scale = .000001, suffix = "M"),
# Add a second axis and specify its features
sec.axis = sec_axis(~./(1.2 * (min(df_testing_volumes$transformation, na.rm = TRUE))), name = "Test positivity (%)", breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0))
)
plot_test_volume_positivity
ggsave(plot_test_volume_positivity,
filename = "G:/My Drive/Work/LEM/LEM 2.0 - Testing Editorial/Plot/test-volume-positivity.png",
width = 6, height = 6, dpi = 350)
plot_test_volume_positivity <- ggplot(df_testing_volumes, aes(x = year))  +
#geom_bar(aes(x = year, y = n_test_cdc_total), stat = "identity", fill = "tan1", colour = "sienna3") +
#geom_line(aes(x = year, y = n_test_pos_total), stat = "identity") +
theme_bw() +
geom_bar( aes(y = n_test_cdc), stat="identity", size=.1, fill = volume_colour, color="black", alpha=.4) +
geom_point(aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = 'black') +
geom_line( aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = positivity_colour) +
scale_x_continuous(breaks = c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020)) +
scale_y_continuous(
# Features of the first axis
name = "CDC-funded test volume (Number of tests)",
labels = scales::number_format(scale = .000001, suffix = "M"),
# Add a second axis and specify its features
sec.axis = sec_axis(~./(1.2 * (min(df_testing_volumes$transformation, na.rm = TRUE))), name = "Test positivity (newly diagnosed)",
breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0), labels = scales::number_format(suffix = "%"))
)
plot_test_volume_positivity
plot_test_volume_positivity <- ggplot(df_testing_volumes, aes(x = year))  +
#geom_bar(aes(x = year, y = n_test_cdc_total), stat = "identity", fill = "tan1", colour = "sienna3") +
#geom_line(aes(x = year, y = n_test_pos_total), stat = "identity") +
theme_bw() +
geom_bar( aes(y = n_test_cdc), stat="identity", size=.1, fill = volume_colour, color="black", alpha=.4) +
geom_point(aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = 'black') +
geom_line( aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = positivity_colour) +
scale_x_continuous(breaks = c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020)) +
scale_y_continuous(
# Features of the first axis
name = "CDC-funded test volume (Number of tests)",
labels = scales::number_format(scale = .000001, suffix = "M"),
# Add a second axis and specify its features
sec.axis = sec_axis(~./(1.2 * (min(df_testing_volumes$transformation, na.rm = TRUE))), name = "Test positivity (newly diagnosed)",
breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0), labels = scales::number_format(accuracy = 1,suffix = "%"))
)
plot_test_volume_positivity
plot_test_volume_positivity <- ggplot(df_testing_volumes, aes(x = year))  +
#geom_bar(aes(x = year, y = n_test_cdc_total), stat = "identity", fill = "tan1", colour = "sienna3") +
#geom_line(aes(x = year, y = n_test_pos_total), stat = "identity") +
theme_bw() +
geom_bar( aes(y = n_test_cdc), stat="identity", size=.1, fill = volume_colour, color="black", alpha=.4) +
geom_point(aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = 'black') +
geom_line( aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = positivity_colour) +
scale_x_continuous(breaks = c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020)) +
scale_y_continuous(
# Features of the first axis
name = "CDC-funded test volume (Number of tests)",
labels = scales::number_format(scale = .000001, suffix = "M"),
# Add a second axis and specify its features
sec.axis = sec_axis(~./(1.2 * (min(df_testing_volumes$transformation, na.rm = TRUE))), name = "Test positivity (newly diagnosed)",
breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0), labels = scales::number_format(accuracy = 2,suffix = "%"))
)
plot_test_volume_positivity
plot_test_volume_positivity <- ggplot(df_testing_volumes, aes(x = year))  +
#geom_bar(aes(x = year, y = n_test_cdc_total), stat = "identity", fill = "tan1", colour = "sienna3") +
#geom_line(aes(x = year, y = n_test_pos_total), stat = "identity") +
theme_bw() +
geom_bar( aes(y = n_test_cdc), stat="identity", size=.1, fill = volume_colour, color="black", alpha=.4) +
geom_point(aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = 'black') +
geom_line( aes(y = n_perc_pos_cdc * 1.2 * (min(transformation, na.rm = TRUE))), size = 1, color = positivity_colour) +
scale_x_continuous(breaks = c(2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020)) +
scale_y_continuous(
# Features of the first axis
name = "CDC-funded test volume (Number of tests)",
labels = scales::number_format(scale = .000001, suffix = "M"),
# Add a second axis and specify its features
sec.axis = sec_axis(~./(1.2 * (min(df_testing_volumes$transformation, na.rm = TRUE))), name = "Test positivity (newly diagnosed)",
breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0), labels = scales::number_format(accuracy = 0.1,suffix = "%"))
)
plot_test_volume_positivity
ggsave(plot_test_volume_positivity,
filename = "G:/My Drive/Work/LEM/LEM 2.0 - Testing Editorial/Plot/test-volume-positivity.png",
width = 6, height = 6, dpi = 350)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(rBeta2009)
library(parallel)
library(foreach)
library(doParallel)
library(tidyr)
### Process PSA results
## Read-in saved results
## Modified Model Specification
load(file = "outputs/PSA/Modified Model Specification/outcomes_MET_PSA_MMS.RData")
load(file = "outputs/PSA/Modified Model Specification/outcomes_BUP_PSA_MMS.RData")
load(file = "outputs/PSA/Modified Model Specification/incremental_PSA_MMS.RData")
load(file = "outputs/PSA/Modified Model Specification/ICER_PSA_MMS.RData")
### Summary stats ###
## Modified Model Specification ##
# Methadone
tbl_df_summary_MET_MMS <- df_outcomes_MET_PSA_MMS %>% as.tibble() %>% select(n_TOTAL_costs_6mo,
n_HEALTH_SECTOR_costs_6mo,
n_CRIMINAL_costs_6mo,
n_TX_costs_6mo,
n_HRU_costs_6mo,
n_TOTAL_qalys_6mo,
#n_TOTAL_costs_10yr,
#n_HEALTH_SECTOR_costs_10yr,
#n_CRIMINAL_costs_10yr,
#n_TX_costs_10yr,
#n_HRU_costs_10yr,
#n_TOTAL_qalys_10yr,
n_TOTAL_costs_life,
n_HEALTH_SECTOR_costs_life,
n_CRIMINAL_costs_life,
n_TX_costs_life,
n_HRU_costs_life,
n_TOTAL_qalys_life) %>%
gather("variable", "value") %>%
group_by(variable) %>%
summarize(mean = mean(value),
sd = sd(value),
q50 = quantile(value, probs = .5),
q025 = quantile(value, probs = .025),
q975 = quantile(value, probs = .975),
min = min(value),
max = max(value))
View(tbl_df_summary_MET_MMS)
# BNX
tbl_df_summary_BUP_MMS <- df_outcomes_BUP_PSA_MMS %>% as.tibble() %>% select(n_TOTAL_costs_6mo,
n_HEALTH_SECTOR_costs_6mo,
n_CRIMINAL_costs_6mo,
n_TX_costs_6mo,
n_HRU_costs_6mo,
n_TOTAL_qalys_6mo,
#n_TOTAL_costs_10yr,
#n_HEALTH_SECTOR_costs_10yr,
#n_CRIMINAL_costs_10yr,
#n_TX_costs_10yr,
#n_HRU_costs_10yr,
#n_TOTAL_qalys_10yr,
n_TOTAL_costs_life,
n_HEALTH_SECTOR_costs_life,
n_CRIMINAL_costs_life,
n_TX_costs_life,
n_HRU_costs_life,
n_TOTAL_qalys_life) %>%
gather("variable", "value") %>%
group_by(variable) %>%
summarize(mean = mean(value),
sd = sd(value),
q50 = quantile(value, probs = .5),
q025 = quantile(value, probs = .025),
q975 = quantile(value, probs = .975),
min = min(value),
max = max(value))
View(tbl_df_summary_MET_MMS)
### Summary stats ###
## Modified Model Specification ##
# Methadone
tbl_df_summary_MET_MMS <- df_outcomes_MET_PSA_MMS %>% as.tibble() %>% select(n_TOTAL_costs_6mo,
n_HEALTH_SECTOR_costs_6mo,
n_CRIMINAL_costs_6mo,
n_TX_costs_6mo,
n_HRU_costs_6mo,
n_TOTAL_qalys_6mo,
n_TOTAL_costs_10yr,
n_HEALTH_SECTOR_costs_10yr,
n_CRIMINAL_costs_10yr,
n_TX_costs_10yr,
n_HRU_costs_10yr,
n_TOTAL_qalys_10yr,
n_TOTAL_costs_life,
n_HEALTH_SECTOR_costs_life,
n_CRIMINAL_costs_life,
n_TX_costs_life,
n_HRU_costs_life,
n_TOTAL_qalys_life) %>%
gather("variable", "value") %>%
group_by(variable) %>%
summarize(mean = mean(value),
sd = sd(value),
q50 = quantile(value, probs = .5),
q025 = quantile(value, probs = .025),
q975 = quantile(value, probs = .975),
min = min(value),
max = max(value))
### Summary stats ###
## Modified Model Specification ##
# Methadone
tbl_df_summary_MET_MMS <- df_outcomes_MET_PSA_MMS %>% as.tibble() %>% select(n_TOTAL_costs_6mo,
n_HEALTH_SECTOR_costs_6mo,
n_CRIMINAL_costs_6mo,
n_TX_costs_6mo,
n_HRU_costs_6mo,
n_TOTAL_qalys_6mo,
n_TOTAL_costs_10yr,
n_HEALTH_SECTOR_costs_10yr,
n_CRIMINAL_costs_10yr,
n_TX_costs_10yr,
n_HRU_costs_10yr,
n_TOTAL_qalys_10yr,
n_TOTAL_costs_life,
n_HEALTH_SECTOR_costs_life,
n_CRIMINAL_costs_life,
n_TX_costs_life,
n_HRU_costs_life,
n_TOTAL_qalys_life) %>%
gather("variable", "value") %>%
group_by(variable) %>%
summarize(mean = mean(value),
sd = sd(value),
q50 = quantile(value, probs = .5),
q025 = quantile(value, probs = .025),
q975 = quantile(value, probs = .975),
min = min(value),
max = max(value))
View(tbl_df_summary_BUP_MMS)
# BNX
tbl_df_summary_BUP_MMS <- df_outcomes_BUP_PSA_MMS %>% as.tibble() %>% select(n_TOTAL_costs_6mo,
n_HEALTH_SECTOR_costs_6mo,
n_CRIMINAL_costs_6mo,
n_TX_costs_6mo,
n_HRU_costs_6mo,
n_TOTAL_qalys_6mo,
n_TOTAL_costs_10yr,
n_HEALTH_SECTOR_costs_10yr,
n_CRIMINAL_costs_10yr,
n_TX_costs_10yr,
n_HRU_costs_10yr,
n_TOTAL_qalys_10yr,
n_TOTAL_costs_life,
n_HEALTH_SECTOR_costs_life,
n_CRIMINAL_costs_life,
n_TX_costs_life,
n_HRU_costs_life,
n_TOTAL_qalys_life) %>%
gather("variable", "value") %>%
group_by(variable) %>%
summarize(mean = mean(value),
sd = sd(value),
q50 = quantile(value, probs = .5),
q025 = quantile(value, probs = .025),
q975 = quantile(value, probs = .975),
min = min(value),
max = max(value))
# Incremental
tbl_df_summary_incremental_MMS <- df_incremental_PSA_MMS %>% as.tibble() %>% select(n_inc_costs_TOTAL_6mo,
n_inc_costs_TOTAL_10yr,
n_inc_costs_TOTAL_life,
n_inc_costs_HEALTH_SECTOR_6mo,
n_inc_costs_HEALTH_SECTOR_10yr,
n_inc_costs_HEALTH_SECTOR_life,
n_inc_qalys_TOTAL_6mo,
n_inc_qalys_TOTAL_10yr,
n_inc_qalys_TOTAL_life,
n_inc_costs_TX_6mo,
n_inc_costs_TX_10yr,
n_inc_costs_TX_life,
n_inc_costs_HRU_6mo,
n_inc_costs_HRU_10yr,
n_inc_costs_HRU_life,
n_inc_costs_CRIMINAL_6mo,
n_inc_costs_CRIMINAL_10yr,
n_inc_costs_CRIMINAL_life) %>%
# tbl_df_summary_incremental_MMS <- df_incremental_PSA_MMS %>% as.tibble() %>% select(n_TOTAL_costs_6mo,
#                                                                                     n_TOTAL_costs_10yr,
#                                                                                     n_TOTAL_costs_life,
#                                                                                     n_HEALTH_SECTOR_costs_6mo,
#                                                                                     n_HEALTH_SECTOR_costs_10yr,
#                                                                                     n_HEALTH_SECTOR_costs_life,
#                                                                                     n_TOTAL_qalys_6mo,
#                                                                                     n_TOTAL_qalys_10yr,
#                                                                                     n_TOTAL_qalys_life,
#                                                                                     n_TX_costs_6mo,
#                                                                                     n_TX_costs_10yr,
#                                                                                     n_TX_costs_life,
#                                                                                     n_HRU_costs_6mo,
#                                                                                     n_HRU_costs_10yr,
#                                                                                     n_HRU_costs_life,
#                                                                                     n_CRIMINAL_costs_6mo,
#                                                                                     n_CRIMINAL_costs_10yr,
#                                                                                     n_CRIMINAL_costs_life) %>%
gather("variable", "value") %>%
group_by(variable) %>%
summarize(mean = mean(value),
sd = sd(value),
q50 = quantile(value, probs = .5),
q025 = quantile(value, probs = .025),
q975 = quantile(value, probs = .975),
min = min(value),
max = max(value))
View(tbl_df_summary_incremental_MMS)
# ICER
tbl_df_summary_ICER_MMS <- df_ICER_PSA_MMS %>% as.tibble() %>% select(n_icer_TOTAL_6mo,
n_icer_HEALTH_SECTOR_6mo,
n_icer_TOTAL_10yr,
n_icer_HEALTH_SECTOR_10yr,
n_icer_TOTAL_life,
n_icer_HEALTH_SECTOR_life) %>%
gather("variable", "value") %>%
group_by(variable) %>%
summarize(mean = mean(value),
sd = sd(value),
q50 = quantile(value, probs = .5),
q025 = quantile(value, probs = .025),
q975 = quantile(value, probs = .975),
min = min(value),
max = max(value))
## As .csv
write.csv(tbl_df_summary_MET_MMS,
file = "outputs/PSA/Modified Model Specification/summary_outcomes_MET_PSA_MMS.csv",
row.names = FALSE)
write.csv(tbl_df_summary_BUP_MMS,
file = "outputs/PSA/Modified Model Specification/summary_outcomes_BUP_PSA_MMS.csv",
row.names = FALSE)
write.csv(tbl_df_summary_incremental_MMS,
file = "outputs/PSA/Modified Model Specification/summary_incremental_PSA_MMS.csv",
row.names = FALSE)
write.csv(tbl_df_summary_ICER_MMS,
file = "outputs/PSA/Modified Model Specification/summary_ICER_PSA_MMS.csv",
row.names = FALSE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
#library(scales)   # for dollar signs and commas
library(tidyverse)
library(Rmisc)
library(grid)
library(gridExtra)
library(lattice)
# Call model setup functions
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/plot_functions.R")
# Load parameters
source("Analysis/00_load_parameters.R") # load all model parameters for each scenario + calibrated parameters
# Update parameter list with calibrated params
#l_params_all <- update_param_list(l_params_all = l_params_all, params_updated = v_calib_post_map)
l_params_BUP_MMS <- update_param_list(l_params_all = l_params_BUP_MMS, params_updated = v_calib_post_map)
l_params_MET_MMS <- update_param_list(l_params_all = l_params_MET_MMS, params_updated = v_calib_post_map)
# l_params_BUP_TS <- update_param_list(l_params_all = l_params_BUP_TS, params_updated = v_calib_post_map)
# l_params_MET_TS <- update_param_list(l_params_all = l_params_MET_TS, params_updated = v_calib_post_map)
# Run model
#_out_markov_base <- markov_model(l_params_all = l_params_all, err_stop = FALSE, verbose = TRUE, checks = FALSE)
l_out_markov_BUP_MMS  <- markov_model(l_params_all = l_params_BUP_MMS, err_stop = FALSE, verbose = TRUE, checks = FALSE)
l_out_markov_MET_MMS  <- markov_model(l_params_all = l_params_MET_MMS, err_stop = FALSE, verbose = TRUE, checks = FALSE)
# l_out_markov_BUP_TS  <- markov_model(l_params_all = l_params_BUP_TS, err_stop = FALSE, verbose = TRUE, checks = FALSE)
# l_out_markov_MET_TS  <- markov_model(l_params_all = l_params_MET_TS, err_stop = FALSE, verbose = TRUE, checks = FALSE)
#### Create plots ####
#l_trace_base <- trace_plots(outcomes = l_out_markov_base)
l_trace_BUP_MMS  <- trace_plots(outcomes = l_out_markov_BUP_MMS)
l_trace_MET_MMS  <- trace_plots(outcomes = l_out_markov_MET_MMS)
# l_trace_BUP_TS  <- trace_plots(outcomes = l_out_markov_BUP_TS)
# l_trace_MET_TS  <- trace_plots(outcomes = l_out_markov_MET_TS)
### Outputs ###
# Model 1 (Modified model specification)
# Health state trace
# Base
#pdf("Plots/Markov Trace/Modified Model Spec/trace_states_base.pdf", width = 8, height = 6)
#l_trace_base[[1]]
#dev.off()
# Serostatus trace
# Base
#pdf("Plots/Markov Trace/Modified Model Spec/trace_sero_base.pdf", width = 8, height = 6)
#l_trace_base[[2]]
#dev.off()
# BUP
pdf("Plots/Markov Trace/Modified Model Spec/trace_sero_BUP.pdf", width = 8, height = 6)
l_trace_BUP_MMS[[2]]
dev.off()
# MET
pdf("Plots/Markov Trace/Modified Model Spec/trace_sero_MET.pdf", width = 8, height = 6)
l_trace_MET_MMS[[2]]
dev.off()
# Health state time
# Base
#pdf(file = "Plots/Markov Trace/Modified Model Spec/time_states_base.pdf", width = 8, height = 3)
#l_trace_base[[3]]
#dev.off()
# Health state trace + time
# Base
#pdf(file = "Plots/Markov Trace/Modified Model Spec/full_trace_base.pdf", width = 8, height = 9)
#multiplot(plotlist = l_trace_base[[4]], layout = l_trace_base[[5]])
#dev.off()
# BUP
#pdf(file = "Plots/Markov Trace/Modified Model Spec/full_trace_BUP_MMS.pdf", width = 8, height = 9)
#  multiplot(plotlist = l_trace_BUP_MMS[[4]], layout = l_trace_BUP_MMS[[5]])
#dev.off()
plot_full_trace_BUP_MMS <- grid.arrange(l_trace_BUP_MMS[[1]], l_trace_BUP_MMS[[3]], nrow = 2, ncol = 1, heights = 2:1)
ggsave(plot_full_trace_BUP_MMS,
filename = "Plots/Markov Trace/Modified Model Spec/full_trace_BUP_MMS.png",
width = 8, height = 9, dpi = 350)
# MET
#pdf(file = "Plots/Markov Trace/Modified Model Spec/full_trace_MET_MMS.pdf", width = 8, height = 9)
#multiplot(plotlist = l_trace_MET_MMS[[4]], layout = l_trace_MET_MMS[[5]])
#dev.off()
plot_full_trace_MET_MMS <- grid.arrange(l_trace_MET_MMS[[1]], l_trace_MET_MMS[[3]], nrow = 2, ncol = 1, heights = 2:1)
ggsave(plot_full_trace_MET_MMS,
filename = "Plots/Markov Trace/Modified Model Spec/full_trace_MET_MMS.png",
width = 8, height = 9, dpi = 350)
# Model 2 (Trial health state definition)
# Health state trace + time
# # BUP
# pdf(file = "Plots/Markov Trace/Trial Spec/full_trace_BUP_TS.pdf", width = 8, height = 9)
# multiplot(plotlist = l_trace_BUP_TS[[4]], layout = l_trace_BUP_TS[[5]])
# dev.off()
# # MET
# pdf(file = "Plots/Markov Trace/Trial Spec/full_trace_MET_TS.pdf", width = 8, height = 9)
# multiplot(plotlist = l_trace_MET_TS[[4]], layout = l_trace_MET_TS[[5]])
# dev.off()
