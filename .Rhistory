# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
source("R/generate_psa_parameters.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
# Calibrated parameter values
load(file = "outputs/imis_output.RData")
# All parameters
# BNX scenario (primary model definition)
l_params_BUP <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_bup.csv", # Change initial distributions (100% in BUP)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Methadone scenario (primary model definition)
l_params_MET <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_met.csv", # Change initial distributions (100% in MET)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
### PSA model outputs
### Run Markov model for PSA draws and return outputs ###
# Generate PSA parameter draws
df_psa_params <- generate_psa_params(n_sim = 1000, seed = 3730687, n_samp = 250,
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv",
file.imis_output = "outputs/imis_output.RData")
### Run decision model on each parameter set of PSA input dataset to produce
### PSA outputs for cost and effects
n_sim <- 3 # just to test function
for(i in 1:n_sim){ # i <- 1
# Model projected outcomes (costs and QALYs) for each scenario
l_psa_input_MET <- update_param_list(l_params_all = l_params_MET, params_updated = df_psa_params[i,])
l_psa_input_BUP <- update_param_list(l_params_all = l_params_BUP, params_updated = df_psa_params[i,])
l_outcomes_MET <- outcomes(l_params_all = l_psa_input_MET, v_params_calib = v_calib_post_map)
l_outcomes_BUP <- outcomes(l_params_all = l_psa_input_BUP, v_params_calib = v_calib_post_map)
n_outcomes_col <- ncol(l_outcomes_MET$df_outcomes)
v_outcomes_names <- c("Total Costs (1-year)", "Total Costs (5-year)", "Total Costs (10-year)", "Total Costs (Lifetime)", "Health Sector Costs (1-year)", "Health Sector Costs (5-year)", "Health Sector Costs (10-year)", "Health Sector Costs (Lifetime)",
"Criminal Costs (1-year)", "Criminal Costs (5-year)", "Criminal Costs (10-year)", "Criminal Costs (Lifetime)", "Treatment Costs (1-year)", "Treatment Costs (5-year)", "Treatment Costs (10-year)", "Treatment Costs (Lifetime)",
"Total QALYs (1-year)", "Total QALYs (5-year)", "Total QALYs (10-year)", "Total QALYs (Lifetime)")
#df_outcomes_MET_PSA <- data.frame(matrix(ncol = n_outcomes_col, nrow = n_sim))
#df_outcomes_BUP_PSA <- data.frame(matrix(ncol = n_outcomes_col, nrow = n_sim))
df_outcomes_MET_PSA <- data.frame()
df_outcomes_BUP_PSA <- data.frame()
#df_outcomes_MET_PSA[i,] <- l_outcomes_MET$df_outcomes
#df_outcomes_BUP_PSA[i,] <- l_outcomes_BUP$df_outcomes
#df2 <- data.frame()
#df2 <- rbind(df2, df_outcomes_MET_PSA)
#df2 <- rbind(df2, df_outcomes_BUP_PSA)
#df_outcomes_MET_PSA <- rbind(df_outcomes_MET_PSA, l_outcomes_MET$df_outcomes)
#df_outcomes_BUP_PSA <- rbind(df_outcomes_BUP_PSA, l_outcomes_BUP$df_outcomes)
#colnames(df_outcomes_MET_PSA) <- v_outcomes_names
#colnames(df_outcomes_BUP_PSA) <- v_outcomes_names
#df = rbind(df_outcomes_MET_PSA, l_outcomes_BUP$df_outcomes, l_outcomes_MET$df_outcomes)
# ICER (societal and health sector perspective)
l_ICER <- ICER(outcomes_comp = l_outcomes_MET, outcomes_int = l_outcomes_BUP)
n_ICER_col <- ncol(l_ICER$df_icer)
v_ICER_names <- c("ICER (1-year)", "ICER (5-year)", "ICER (10-year)", "ICER (Lifetime)", "ICER (Health Sector 1-year)", "ICER (Health Sector 5-year)", "ICER (Health Sector 10-year)", "ICER (Health Sector Lifetime)")
#df_ICER_PSA <- data.frame(matrix(ncol = n_ICER_col, nrow = n_sim))
df_ICER_PSA <- data.frame()
#colnames(df_ICER_PSA) <- v_ICER_names
df_ICER_PSA[i,] <- l_ICER$df_icer
#df_ICER_PSA = rbind(df_ICER_PSA, l_ICER$df_icer)
# Display simulation progress
if(i/(n_sim/10) == round(i/(n_sim/10),0)) {
cat('\r', paste(i/n_sim * 100, "% done", sep = " "))
}
}
View(df_ICER_PSA)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(rBeta2009)
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
source("R/generate_psa_parameters.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
# Calibrated parameter values
load(file = "outputs/imis_output.RData")
# All parameters
# BNX scenario (primary model definition)
l_params_BUP <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_bup.csv", # Change initial distributions (100% in BUP)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Methadone scenario (primary model definition)
l_params_MET <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_met.csv", # Change initial distributions (100% in MET)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
### PSA model outputs
### Run Markov model for PSA draws and return outputs ###
# Generate PSA parameter draws
df_psa_params <- generate_psa_params(n_sim = 1000, seed = 3730687, n_samp = 250,
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv",
file.imis_output = "outputs/imis_output.RData")
### Run decision model on each parameter set of PSA input dataset to produce
### PSA outputs for cost and effects
n_sim <- 3 # just to test function
for(i in 1:n_sim){ # i <- 1
# Model projected outcomes (costs and QALYs) for each scenario
l_psa_input_MET <- update_param_list(l_params_all = l_params_MET, params_updated = df_psa_params[i,])
l_psa_input_BUP <- update_param_list(l_params_all = l_params_BUP, params_updated = df_psa_params[i,])
l_outcomes_MET <- outcomes(l_params_all = l_psa_input_MET, v_params_calib = v_calib_post_map)
l_outcomes_BUP <- outcomes(l_params_all = l_psa_input_BUP, v_params_calib = v_calib_post_map)
n_outcomes_col <- ncol(l_outcomes_MET$df_outcomes)
v_outcomes_names <- c("Total Costs (1-year)", "Total Costs (5-year)", "Total Costs (10-year)", "Total Costs (Lifetime)", "Health Sector Costs (1-year)", "Health Sector Costs (5-year)", "Health Sector Costs (10-year)", "Health Sector Costs (Lifetime)",
"Criminal Costs (1-year)", "Criminal Costs (5-year)", "Criminal Costs (10-year)", "Criminal Costs (Lifetime)", "Treatment Costs (1-year)", "Treatment Costs (5-year)", "Treatment Costs (10-year)", "Treatment Costs (Lifetime)",
"Total QALYs (1-year)", "Total QALYs (5-year)", "Total QALYs (10-year)", "Total QALYs (Lifetime)")
#df_outcomes_MET_PSA <- data.frame(matrix(ncol = n_outcomes_col, nrow = n_sim))
#df_outcomes_BUP_PSA <- data.frame(matrix(ncol = n_outcomes_col, nrow = n_sim))
df_outcomes_MET_PSA <- data.frame()
df_outcomes_BUP_PSA <- data.frame()
#df_outcomes_MET_PSA[i,] <- l_outcomes_MET$df_outcomes
#df_outcomes_BUP_PSA[i,] <- l_outcomes_BUP$df_outcomes
#df2 <- data.frame()
#df2 <- rbind(df2, df_outcomes_MET_PSA)
#df2 <- rbind(df2, df_outcomes_BUP_PSA)
df_outcomes_MET_PSA <- rbind(df_outcomes_MET_PSA, l_outcomes_MET$df_outcomes)
df_outcomes_BUP_PSA <- rbind(df_outcomes_BUP_PSA, l_outcomes_BUP$df_outcomes)
#colnames(df_outcomes_MET_PSA) <- v_outcomes_names
#colnames(df_outcomes_BUP_PSA) <- v_outcomes_names
#df = rbind(df_outcomes_MET_PSA, l_outcomes_BUP$df_outcomes, l_outcomes_MET$df_outcomes)
# ICER (societal and health sector perspective)
l_ICER <- ICER(outcomes_comp = l_outcomes_MET, outcomes_int = l_outcomes_BUP)
n_ICER_col <- ncol(l_ICER$df_icer)
v_ICER_names <- c("ICER (1-year)", "ICER (5-year)", "ICER (10-year)", "ICER (Lifetime)", "ICER (Health Sector 1-year)", "ICER (Health Sector 5-year)", "ICER (Health Sector 10-year)", "ICER (Health Sector Lifetime)")
#df_ICER_PSA <- data.frame(matrix(ncol = n_ICER_col, nrow = n_sim))
df_ICER_PSA <- data.frame()
#colnames(df_ICER_PSA) <- v_ICER_names
#df_ICER_PSA[i,] <- l_ICER$df_icer
df_ICER_PSA = rbind(df_ICER_PSA, l_ICER$df_icer)
# Display simulation progress
#if(i/(n_sim/10) == round(i/(n_sim/10),0)) {
#  cat('\r', paste(i/n_sim * 100, "% done", sep = " "))
#}
}
View(df_ICER_PSA)
View(df_outcomes_BUP_PSA)
for(i in 1:5){
x <- i
df_x <- data.frame()
df_x <- rbind(df_x, x)
}
for(i in 1:5){
x <- i
df_x <- data.frame()
df_x[i,] <- rbind(df_x, x)
}
df_x <- data.frame(matrix(ncol = 1, nrow = 5))
View(df_x)
for(i in 1:5){
x <- i
df_x <- data.frame(matrix(ncol = 1, nrow = 5))
df_x[i,] <- rbind(df_x, x)
}
df_y = data.frame()
# Defining a for loop with 30 iterations
for (i in 1:30) {
output = c(i^3+3, i^2+2, i+1)
# Using rbind() to append the output of one iteration to the dataframe
df_y = rbind(df_y, output)
}
View(df_y)
df_x <- data.frame()
for(i in 1:5){
x <- i
#df_x <- data.frame(matrix(ncol = 1, nrow = 5))
df_x <- rbind(df_x, x)
}
View(df_x)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(rBeta2009)
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
source("R/generate_psa_parameters.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
# Calibrated parameter values
load(file = "outputs/imis_output.RData")
# All parameters
# BNX scenario (primary model definition)
l_params_BUP <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_bup.csv", # Change initial distributions (100% in BUP)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Methadone scenario (primary model definition)
l_params_MET <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_met.csv", # Change initial distributions (100% in MET)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
### PSA model outputs
### Run Markov model for PSA draws and return outputs ###
# Generate PSA parameter draws
df_psa_params <- generate_psa_params(n_sim = 1000, seed = 3730687, n_samp = 250,
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv",
file.imis_output = "outputs/imis_output.RData")
### Run decision model on each parameter set of PSA input dataset to produce
### PSA outputs for cost and effects
n_sim <- 3 # just to test function
# Initialize data frames
df_outcomes_MET_PSA <- data.frame()
df_outcomes_BUP_PSA <- data.frame()
df_ICER_PSA <- data.frame()
v_outcomes_names <- c("Total Costs (1-year)", "Total Costs (5-year)", "Total Costs (10-year)", "Total Costs (Lifetime)", "Health Sector Costs (1-year)", "Health Sector Costs (5-year)", "Health Sector Costs (10-year)", "Health Sector Costs (Lifetime)",
"Criminal Costs (1-year)", "Criminal Costs (5-year)", "Criminal Costs (10-year)", "Criminal Costs (Lifetime)", "Treatment Costs (1-year)", "Treatment Costs (5-year)", "Treatment Costs (10-year)", "Treatment Costs (Lifetime)",
"Total QALYs (1-year)", "Total QALYs (5-year)", "Total QALYs (10-year)", "Total QALYs (Lifetime)")
v_ICER_names <- c("ICER (1-year)", "ICER (5-year)", "ICER (10-year)", "ICER (Lifetime)", "ICER (Health Sector 1-year)", "ICER (Health Sector 5-year)", "ICER (Health Sector 10-year)", "ICER (Health Sector Lifetime)")
for(i in 1:n_sim){ # i <- 1
# Model projected outcomes (costs and QALYs) for each scenario
l_psa_input_MET <- update_param_list(l_params_all = l_params_MET, params_updated = df_psa_params[i,])
l_psa_input_BUP <- update_param_list(l_params_all = l_params_BUP, params_updated = df_psa_params[i,])
l_outcomes_MET <- outcomes(l_params_all = l_psa_input_MET, v_params_calib = v_calib_post_map)
l_outcomes_BUP <- outcomes(l_params_all = l_psa_input_BUP, v_params_calib = v_calib_post_map)
#n_outcomes_col <- ncol(l_outcomes_MET$df_outcomes)
#v_outcomes_names <- c("Total Costs (1-year)", "Total Costs (5-year)", "Total Costs (10-year)", "Total Costs (Lifetime)", "Health Sector Costs (1-year)", "Health Sector Costs (5-year)", "Health Sector Costs (10-year)", "Health Sector Costs (Lifetime)",
#                     "Criminal Costs (1-year)", "Criminal Costs (5-year)", "Criminal Costs (10-year)", "Criminal Costs (Lifetime)", "Treatment Costs (1-year)", "Treatment Costs (5-year)", "Treatment Costs (10-year)", "Treatment Costs (Lifetime)",
#                    "Total QALYs (1-year)", "Total QALYs (5-year)", "Total QALYs (10-year)", "Total QALYs (Lifetime)")
#df_outcomes_MET_PSA <- data.frame(matrix(ncol = n_outcomes_col, nrow = n_sim))
#df_outcomes_BUP_PSA <- data.frame(matrix(ncol = n_outcomes_col, nrow = n_sim))
#df_outcomes_MET_PSA <- data.frame()
#df_outcomes_BUP_PSA <- data.frame()
#df_outcomes_MET_PSA[i,] <- l_outcomes_MET$df_outcomes
#df_outcomes_BUP_PSA[i,] <- l_outcomes_BUP$df_outcomes
#df2 <- data.frame()
#df2 <- rbind(df2, df_outcomes_MET_PSA)
#df2 <- rbind(df2, df_outcomes_BUP_PSA)
df_outcomes_MET_PSA <- rbind(df_outcomes_MET_PSA, l_outcomes_MET$df_outcomes)
df_outcomes_BUP_PSA <- rbind(df_outcomes_BUP_PSA, l_outcomes_BUP$df_outcomes)
#colnames(df_outcomes_MET_PSA) <- v_outcomes_names
#colnames(df_outcomes_BUP_PSA) <- v_outcomes_names
#df = rbind(df_outcomes_MET_PSA, l_outcomes_BUP$df_outcomes, l_outcomes_MET$df_outcomes)
# ICER (societal and health sector perspective)
l_ICER <- ICER(outcomes_comp = l_outcomes_MET, outcomes_int = l_outcomes_BUP)
#n_ICER_col <- ncol(l_ICER$df_icer)
#df_ICER_PSA <- data.frame(matrix(ncol = n_ICER_col, nrow = n_sim))
#df_ICER_PSA <- data.frame()
#colnames(df_ICER_PSA) <- v_ICER_names
#df_ICER_PSA[i,] <- l_ICER$df_icer
df_ICER_PSA = rbind(df_ICER_PSA, l_ICER$df_icer)
# Display simulation progress
#if(i/(n_sim/10) == round(i/(n_sim/10),0)) {
#  cat('\r', paste(i/n_sim * 100, "% done", sep = " "))
#}
}
View(df_ICER_PSA)
View(df_outcomes_BUP_PSA)
View(df_outcomes_BUP_PSA)
df_x <- data.frame()
for(i in 1:5){
x <- i
#df_x <- data.frame(matrix(ncol = 1, nrow = 5))
df_x[i,] <- rbind(df_x, x)
}
### Output results
## As .RData
save(df_outcomes_MET_PSA,
file = "outputs/PSA/outcomes_MET_PSA.RData")
save(df_outcomes_BUP_PSA,
file = "outputs/PSA/outcomes_BUP_PSA.RData")
save(df_ICER_PSA,
file = "outputs/PSA/ICER_PSA.RData")
## As .csv
write.csv(df_outcomes_MET_PSA,
file = "outputs/PSA/outcomes_MET_PSA.csv",
row.names = TRUE)
write.csv(df_outcomes_BUP_PSA,
file = "outputs/PSA/outcomes_BUP_PSA.csv",
row.names = TRUE)
write.csv(df_ICER_PSA,
file = "outputs/PSA/ICER_PSA.csv",
row.names = TRUE)
## As .csv
write.csv(df_outcomes_MET_PSA,
file = "outputs/PSA/outcomes_MET_PSA.csv",
row.names = FALSE)
write.csv(df_outcomes_BUP_PSA,
file = "outputs/PSA/outcomes_BUP_PSA.csv",
row.names = FALSE)
write.csv(df_ICER_PSA,
file = "outputs/PSA/ICER_PSA.csv",
row.names = FALSE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(rBeta2009)
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
source("R/generate_psa_parameters.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
# Calibrated parameter values
load(file = "outputs/imis_output.RData")
# All parameters
# BNX scenario (primary model definition)
l_params_BUP <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_bup.csv", # Change initial distributions (100% in BUP)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
# Methadone scenario (primary model definition)
l_params_MET <- load_all_params(file.init = "data/init_params.csv",
file.init_dist = "data/init_dist_met.csv", # Change initial distributions (100% in MET)
file.mort = "data/all_cause_mortality.csv",
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv")
### PSA model outputs
### Run Markov model for PSA draws and return outputs ###
# Generate PSA parameter draws
df_psa_params <- generate_psa_params(n_sim = 1000, seed = 3730687, n_samp = 250,
file.death_hr = "data/death_hr.csv",
file.frailty = "data/frailty.csv",
file.weibull_scale = "data/weibull_scale.csv",
file.weibull_shape = "data/weibull_shape.csv",
file.unconditional = "data/unconditional.csv",
file.overdose = "data/overdose.csv",
file.hiv = "data/hiv_sero.csv",
file.hcv = "data/hcv_sero.csv",
file.costs = "data/costs.csv",
file.crime_costs = "data/crime_costs.csv",
file.qalys = "data/qalys.csv",
file.imis_output = "outputs/imis_output.RData")
### Run decision model on each parameter set of PSA input dataset to produce
### PSA outputs for cost and effects
n_sim <- 20 # just to test function
# Initialize data frames
df_outcomes_MET_PSA <- data.frame()
df_outcomes_BUP_PSA <- data.frame()
df_ICER_PSA <- data.frame()
v_outcomes_names <- c("Total Costs (1-year)", "Total Costs (5-year)", "Total Costs (10-year)", "Total Costs (Lifetime)", "Health Sector Costs (1-year)", "Health Sector Costs (5-year)", "Health Sector Costs (10-year)", "Health Sector Costs (Lifetime)",
"Criminal Costs (1-year)", "Criminal Costs (5-year)", "Criminal Costs (10-year)", "Criminal Costs (Lifetime)", "Treatment Costs (1-year)", "Treatment Costs (5-year)", "Treatment Costs (10-year)", "Treatment Costs (Lifetime)",
"Total QALYs (1-year)", "Total QALYs (5-year)", "Total QALYs (10-year)", "Total QALYs (Lifetime)")
v_ICER_names <- c("ICER (1-year)", "ICER (5-year)", "ICER (10-year)", "ICER (Lifetime)", "ICER (Health Sector 1-year)", "ICER (Health Sector 5-year)", "ICER (Health Sector 10-year)", "ICER (Health Sector Lifetime)")
for(i in 1:n_sim){ # i <- 1
# Model projected outcomes (costs and QALYs) for each scenario
l_psa_input_MET <- update_param_list(l_params_all = l_params_MET, params_updated = df_psa_params[i,])
l_psa_input_BUP <- update_param_list(l_params_all = l_params_BUP, params_updated = df_psa_params[i,])
l_outcomes_MET <- outcomes(l_params_all = l_psa_input_MET, v_params_calib = v_calib_post_map)
l_outcomes_BUP <- outcomes(l_params_all = l_psa_input_BUP, v_params_calib = v_calib_post_map)
#n_outcomes_col <- ncol(l_outcomes_MET$df_outcomes)
#v_outcomes_names <- c("Total Costs (1-year)", "Total Costs (5-year)", "Total Costs (10-year)", "Total Costs (Lifetime)", "Health Sector Costs (1-year)", "Health Sector Costs (5-year)", "Health Sector Costs (10-year)", "Health Sector Costs (Lifetime)",
#                     "Criminal Costs (1-year)", "Criminal Costs (5-year)", "Criminal Costs (10-year)", "Criminal Costs (Lifetime)", "Treatment Costs (1-year)", "Treatment Costs (5-year)", "Treatment Costs (10-year)", "Treatment Costs (Lifetime)",
#                    "Total QALYs (1-year)", "Total QALYs (5-year)", "Total QALYs (10-year)", "Total QALYs (Lifetime)")
#df_outcomes_MET_PSA <- data.frame(matrix(ncol = n_outcomes_col, nrow = n_sim))
#df_outcomes_BUP_PSA <- data.frame(matrix(ncol = n_outcomes_col, nrow = n_sim))
#df_outcomes_MET_PSA <- data.frame()
#df_outcomes_BUP_PSA <- data.frame()
#df_outcomes_MET_PSA[i,] <- l_outcomes_MET$df_outcomes
#df_outcomes_BUP_PSA[i,] <- l_outcomes_BUP$df_outcomes
#df2 <- data.frame()
#df2 <- rbind(df2, df_outcomes_MET_PSA)
#df2 <- rbind(df2, df_outcomes_BUP_PSA)
df_outcomes_MET_PSA <- rbind(df_outcomes_MET_PSA, l_outcomes_MET$df_outcomes)
df_outcomes_BUP_PSA <- rbind(df_outcomes_BUP_PSA, l_outcomes_BUP$df_outcomes)
#colnames(df_outcomes_MET_PSA) <- v_outcomes_names
#colnames(df_outcomes_BUP_PSA) <- v_outcomes_names
#df = rbind(df_outcomes_MET_PSA, l_outcomes_BUP$df_outcomes, l_outcomes_MET$df_outcomes)
# ICER (societal and health sector perspective)
l_ICER <- ICER(outcomes_comp = l_outcomes_MET, outcomes_int = l_outcomes_BUP)
#n_ICER_col <- ncol(l_ICER$df_icer)
#df_ICER_PSA <- data.frame(matrix(ncol = n_ICER_col, nrow = n_sim))
#df_ICER_PSA <- data.frame()
#colnames(df_ICER_PSA) <- v_ICER_names
#df_ICER_PSA[i,] <- l_ICER$df_icer
df_ICER_PSA = rbind(df_ICER_PSA, l_ICER$df_icer)
# Display simulation progress
#if(i/(n_sim/10) == round(i/(n_sim/10),0)) {
#  cat('\r', paste(i/n_sim * 100, "% done", sep = " "))
#}
}
### Output results
## As .RData
save(df_outcomes_MET_PSA,
file = "outputs/PSA/outcomes_MET_PSA.RData")
save(df_outcomes_BUP_PSA,
file = "outputs/PSA/outcomes_BUP_PSA.RData")
save(df_ICER_PSA,
file = "outputs/PSA/ICER_PSA.RData")
## As .csv
write.csv(df_outcomes_MET_PSA,
file = "outputs/PSA/outcomes_MET_PSA.csv",
row.names = FALSE)
write.csv(df_outcomes_BUP_PSA,
file = "outputs/PSA/outcomes_BUP_PSA.csv",
row.names = FALSE)
write.csv(df_ICER_PSA,
file = "outputs/PSA/ICER_PSA.csv",
row.names = FALSE)
View(df_ICER_PSA)
View(df_ICER_PSA)
