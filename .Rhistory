# MMS
# l_outcomes_MET_qalys_reduced_eq_5d_5l_MMS <- outcomes(l_params_all = l_params_MET_MMS, v_params_calib = v_calib_post_map, v_params_dsa = v_dsa_qalys_reduced_eq_5d_5l_MMS)
# l_outcomes_BUP_qalys_reduced_eq_5d_5l_MMS <- outcomes(l_params_all = l_params_BUP_MMS, v_params_calib = v_calib_post_map, v_params_dsa = v_dsa_qalys_reduced_eq_5d_5l_MMS)
# ICER_qalys_reduced_eq_5d_5l_MMS <- ICER(outcomes_comp = l_outcomes_MET_qalys_reduced_eq_5d_5l_MMS, outcomes_int = l_outcomes_BUP_qalys_reduced_eq_5d_5l_MMS)
## Alternative (EQ-5D-3L) ##
# MMS
l_outcomes_MET_qalys_eq_5d_3l_MMS <- outcomes(l_params_all = l_params_MET_MMS, v_params_calib = v_calib_post_map, v_params_dsa = v_dsa_qalys_eq_5d_3l_MMS)
l_outcomes_BUP_qalys_eq_5d_3l_MMS <- outcomes(l_params_all = l_params_BUP_MMS, v_params_calib = v_calib_post_map, v_params_dsa = v_dsa_qalys_eq_5d_3l_MMS)
ICER_qalys_eq_5d_3l_MMS <- ICER(outcomes_comp = l_outcomes_MET_qalys_eq_5d_3l_MMS, outcomes_int = l_outcomes_BUP_qalys_eq_5d_3l_MMS)
## Alternative (HUI-3) ##
# MMS
l_outcomes_MET_qalys_hui_3_MMS <- outcomes(l_params_all = l_params_MET_MMS, v_params_calib = v_calib_post_map, v_params_dsa = v_dsa_qalys_hui_3_MMS)
l_outcomes_BUP_qalys_hui_3_MMS <- outcomes(l_params_all = l_params_BUP_MMS, v_params_calib = v_calib_post_map, v_params_dsa = v_dsa_qalys_hui_3_MMS)
ICER_qalys_hui_3_MMS <- ICER(outcomes_comp = l_outcomes_MET_qalys_hui_3_MMS, outcomes_int = l_outcomes_BUP_qalys_hui_3_MMS)
## Alternative overdose ##
# MMS
# l_outcomes_MET_qalys_odn_low_MMS <- outcomes(l_params_all = l_params_MET_MMS, v_params_calib = v_calib_post_map, v_params_dsa = v_dsa_qalys_odn_low_MMS)
# l_outcomes_BUP_qalys_odn_low_MMS <- outcomes(l_params_all = l_params_BUP_MMS, v_params_calib = v_calib_post_map, v_params_dsa = v_dsa_qalys_odn_low_MMS)
# ICER_qalys_odn_low_MMS <- ICER(outcomes_comp = l_outcomes_MET_qalys_odn_low_MMS, outcomes_int = l_outcomes_BUP_qalys_odn_low_MMS)
################
### Baseline ###
################
#df_baseline_MMS <- data.frame(ICER_MMS$df_incremental, ICER_MMS$df_icer)
#df_baseline_TS  <- data.frame(ICER_TS$df_incremental, ICER_TS$df_icer)
#############
### QALYs ###
#############
# Baseline
#v_qalys_baseline_MMS <- c(ICER_MMS$df_incremental$n_inc_qalys_TOTAL_life)
#df_qalys_baseline_TS <- data.frame(ICER_TS$df_incremental$n_inc_qalys_TOTAL_1yr, ICER_TS$df_icer$n_icer_TOTAL_1yr)
# Combined Tx
#v_qalys_reduced_eq_5d_5l_MMS <- c(ICER_qalys_reduced_eq_5d_5l_MMS$df_incremental$n_inc_qalys_TOTAL_life)
#df_qalys_reduced_eq_5d_5l_TS <- data.frame(ICER_qalys_reduced_eq_5d_5l_TS$df_incremental$n_inc_qalys_TOTAL_1yr, ICER_qalys_reduced_eq_5d_5l_TS$df_icer$n_icer_TOTAL_1yr)
# Low
#v_qalys_range_MMS <- c(ICER_qalys_low_MMS$df_incremental$n_inc_qalys_TOTAL_life, ICER_qalys_high_MMS$df_incremental$n_inc_qalys_TOTAL_life)
#df_qalys_low_TS <- data.frame(ICER_qalys_low_TS$df_incremental$n_inc_qalys_TOTAL_1yr, ICER_qalys_low_TS$df_icer$n_icer_TOTAL_1yr)
# High
#v_qalys_high_MMS <- c(ICER_qalys_high_MMS$df_incremental$n_inc_qalys_TOTAL_life, ICER_qalys_high_MMS$df_icer$n_icer_TOTAL_life)
#df_qalys_high_TS <- data.frame(ICER_qalys_high_TS$df_incremental$n_inc_qalys_TOTAL_1yr, ICER_qalys_high_TS$df_icer$n_icer_TOTAL_1yr)
# Alt (EQ-5d-3L)
v_qalys_eq_5d_3l_MMS <- c(ICER_qalys_eq_5d_3l_MMS$df_incremental$n_inc_qalys_TOTAL_life)
#df_qalys_eq_5d_3l_TS <- data.frame(ICER_qalys_eq_5d_3l_TS$df_incremental$n_inc_qalys_TOTAL_1yr, ICER_qalys_eq_5d_3l_TS$df_icer$n_icer_TOTAL_1yr)
# Alt (HUI-3)
v_qalys_hui_3_MMS <- c(ICER_qalys_hui_3_MMS$df_incremental$n_inc_qalys_TOTAL_life)
#df_qalys_hui_3_TS <- data.frame(ICER_qalys_hui_3_TS$df_incremental$n_inc_qalys_TOTAL_1yr, ICER_qalys_hui_3_TS$df_icer$n_icer_TOTAL_1yr)
# ODN low
#v_qalys_odn_low_MMS <- c(ICER_qalys_odn_low_MMS$df_incremental$n_inc_qalys_TOTAL_life)
#df_qalys_odn_low_TS <- data.frame(ICER_qalys_odn_low_TS$df_incremental$n_inc_qalys_TOTAL_1yr, ICER_qalys_odn_low_TS$df_icer$n_icer_TOTAL_1yr)
m_qalys_MMS <- rbind(v_qalys_eq_5d_3l_MMS, v_qalys_hui_3_MMS)
df_qalys_MMS <- as.data.frame(m_qalys_MMS)
colnames(df_qalys_MMS) <- c("Lower", "Upper")
df_qalys_MMS <- as_data_frame(df_qalys_MMS) %>% #mutate(diff = abs(Upper - Lower),
#      base = ICER_MMS$df_incremental$n_inc_qalys_TOTAL_life) %>%
add_column(var_name = c("Alternative instrument (EQ-5D-3L)", "Alternative instrument (HUI-3)"))
tbl_df_summary_incremental_MMS$mean
## As .RData ##
save(df_qalys_MMS,
file = "outputs/DSA/Modified Model Specification/df_qalys_MMS.RData")
## Load DSA output files
# Costs
load(file = "outputs/DSA/Modified Model Specification/df_transitions_costs_MMS.RData")
load(file = "outputs/DSA/Modified Model Specification/df_overdose_costs_MMS.RData")
load(file = "outputs/DSA/Modified Model Specification/df_costs_MMS.RData")
# QALYs
load(file = "outputs/DSA/Modified Model Specification/df_transitions_qalys_MMS.RData")
load(file = "outputs/DSA/Modified Model Specification/df_overdose_qalys_MMS.RData")
load(file = "outputs/DSA/Modified Model Specification/df_qalys_MMS.RData")
## Load deterministic outputs for baseline values
load(file = "outputs/ICER/incremental_det_MMS.RData")
## Load PSA outputs for baseline values
load(file = "outputs/PSA/Modified Model Specification/summary_incremental_PSA_MMS.RData")
# Subset by mean
# Deterministic
base_costs <- df_incremental_MMS$n_inc_costs_TOTAL_life[1]
base_qalys <- df_incremental_MMS$n_inc_qalys_TOTAL_life[1]
# PSA
# tbl_df_PSA_mean <- tbl_df_summary_incremental_MMS %>% select(variable, mean)
# base_costs <- tbl_df_PSA_mean %>% deframe %>% getElement("n_inc_costs_TOTAL_life")
# base_qalys <- tbl_df_PSA_mean %>% deframe %>% getElement("n_inc_qalys_TOTAL_life")
## Combine data frames
# Costs
df_DSA_costs_MMS <- rbind(df_transitions_costs_MMS, df_overdose_costs_MMS, df_costs_MMS) %>%
mutate(base = base_costs) %>%
mutate(diff = ifelse(abs(Upper - Lower) > 0, abs(Upper - Lower), abs(base - Upper)))
# QALYs
df_DSA_qalys_MMS <- rbind(df_transitions_qalys_MMS, df_overdose_qalys_MMS, df_qalys_MMS) %>%
mutate(base = base_qalys) %>%
mutate(diff = ifelse(abs(Upper - Lower) > 0, abs(Upper - Lower), abs(base - Upper)))
#########################
#### Tornado diagram ####
#########################
### Costs ###
v_order_parameters <- df_DSA_costs_MMS %>% arrange(diff) %>%
mutate(var_name = factor(x = var_name, levels = var_name)) %>%
select(var_name) %>% unlist() %>% levels()
v_cost_labels_lower <- c("test1", "test2", "test3", "test4", "test5", "test6", "test7", "test8", "test9", "test10", "test11", "test12", "test13", "test14", "test15", "test16", "test17")
v_cost_labels_upper <- c("test1", "test2", "test3", "test4", "test5", "test6", "test7", "test8", "test9", "test10", "test11", "test12", "test13", "test14", "test15", "test16", "test17")
#eggcounts <- cbind(df_DSA_costs_MMS[, "var_name"], counts)
# width of columns in plot (value between 0 and 1)
width <- 0.6
# get data frame in shape for ggplot and geom_rect
df.2 <- df_DSA_costs_MMS %>%
# gather columns Lower_Bound and Upper_Bound into a single column using gather
gather(key = 'type', value = 'output.value', Lower:Upper) %>%
# just reordering columns
select(var_name, type, output.value, diff, base) %>%
# create the columns for geom_rect
mutate(var_name = factor(var_name, levels = v_order_parameters),
ymin = pmin(output.value, base),
ymax = pmax(output.value, base),
xmin = as.numeric(var_name) - width/2,
xmax = as.numeric(var_name) + width/2)
# create plot
# (use scale_x_continuous to change labels in y axis to name of parameters)
p_tornado_costs <- ggplot() +
geom_rect(data = df.2,
aes(ymax = ymax, ymin = ymin, xmax = xmax, xmin = xmin, fill = type)) +
#geom_text(data = eggcounts, aes(y = 1, label = counts), size = 4) +
theme_bw() +
scale_fill_manual(values = c("Upper" = "midnightblue",
"Lower" = "slategray2")) +
theme(axis.title.y = element_blank(), legend.position = 'none', legend.title = element_blank()) +
geom_hline(yintercept = df.2$base) +
scale_x_continuous(breaks = c(1:length(v_order_parameters)),
labels = v_order_parameters) +
xlab("Parameter") + ylab("Incremental Cost") +
coord_flip()
p_tornado_costs
ggsave("Plots/DSA/Modified Model Spec/tornado_costs.png", p_tornado_costs, height = 5, width = 7, dpi = 320)
### QALYs ###
v_order_parameters <- df_DSA_qalys_MMS %>% arrange(diff) %>%
mutate(var_name = factor(x = var_name, levels = var_name)) %>%
select(var_name) %>% unlist() %>% levels()
# width of columns in plot (value between 0 and 1)
width <- 0.6
# get data frame in shape for ggplot and geom_rect
df.2 <- df_DSA_qalys_MMS %>%
# gather columns Lower_Bound and Upper_Bound into a single column using gather
gather(key = 'type', value = 'output.value', Lower:Upper) %>%
# just reordering columns
select(var_name, type, output.value, diff, base) %>%
# create the columns for geom_rect
mutate(var_name = factor(var_name, levels = v_order_parameters),
ymin = pmin(output.value, base),
ymax = pmax(output.value, base),
xmin = as.numeric(var_name) - width/2,
xmax = as.numeric(var_name) + width/2)
# create plot
# (use scale_x_continuous to change labels in y axis to name of parameters)
p_tornado_qalys <- ggplot() +
geom_rect(data = df.2,
aes(ymax = ymax, ymin = ymin, xmax = xmax, xmin = xmin, fill = type)) +
theme_bw() +
scale_fill_manual(values = c("Upper" = "midnightblue",
"Lower" = "slategray2")) +
theme(axis.title.y = element_blank(), legend.position = 'none',
legend.title = element_blank()) +
geom_hline(yintercept = df.2$base) +
scale_x_continuous(breaks = c(1:length(v_order_parameters)),
labels = v_order_parameters) +
xlab("Parameter") + ylab("Incremental QALYs") +
coord_flip()
p_tornado_qalys
ggsave("Plots/DSA/Modified Model Spec/tornado_qalys.png", p_tornado_qalys, height = 5, width = 7, dpi = 320)
## Load DSA output files
# Costs
load(file = "outputs/DSA/Modified Model Specification/df_transitions_costs_MMS.RData")
load(file = "outputs/DSA/Modified Model Specification/df_overdose_costs_MMS.RData")
load(file = "outputs/DSA/Modified Model Specification/df_costs_MMS.RData")
# QALYs
load(file = "outputs/DSA/Modified Model Specification/df_transitions_qalys_MMS.RData")
load(file = "outputs/DSA/Modified Model Specification/df_overdose_qalys_MMS.RData")
load(file = "outputs/DSA/Modified Model Specification/df_qalys_MMS.RData")
## Load deterministic outputs for baseline values
load(file = "outputs/ICER/incremental_det_MMS.RData")
## Load PSA outputs for baseline values
load(file = "outputs/PSA/Modified Model Specification/summary_incremental_PSA_MMS.RData")
# Subset by mean
# Deterministic
base_costs <- df_incremental_MMS$n_inc_costs_TOTAL_life[1]
base_qalys <- df_incremental_MMS$n_inc_qalys_TOTAL_life[1]
# PSA
# tbl_df_PSA_mean <- tbl_df_summary_incremental_MMS %>% select(variable, mean)
# base_costs <- tbl_df_PSA_mean %>% deframe %>% getElement("n_inc_costs_TOTAL_life")
# base_qalys <- tbl_df_PSA_mean %>% deframe %>% getElement("n_inc_qalys_TOTAL_life")
## Combine data frames
# Costs
df_DSA_costs_MMS <- rbind(df_transitions_costs_MMS, df_overdose_costs_MMS, df_costs_MMS) %>%
mutate(base = base_costs) %>%
mutate(diff = ifelse(abs(Upper - Lower) > 0, abs(Upper - Lower), abs(base - Upper)))
# QALYs
df_DSA_qalys_MMS <- rbind(df_transitions_qalys_MMS, df_overdose_qalys_MMS, df_qalys_MMS) %>%
mutate(base = base_qalys) %>%
mutate(diff = ifelse(abs(Upper - Lower) > 0, abs(Upper - Lower), abs(base - Upper)))
#########################
#### Tornado diagram ####
#########################
### Costs ###
v_order_parameters <- df_DSA_costs_MMS %>% arrange(diff) %>%
mutate(var_name = factor(x = var_name, levels = var_name)) %>%
select(var_name) %>% unlist() %>% levels()
v_cost_labels_lower <- c("test1", "test2", "test3", "test4", "test5", "test6", "test7", "test8", "test9", "test10", "test11", "test12", "test13", "test14", "test15", "test16", "test17")
v_cost_labels_upper <- c("test1", "test2", "test3", "test4", "test5", "test6", "test7", "test8", "test9", "test10", "test11", "test12", "test13", "test14", "test15", "test16", "test17")
#eggcounts <- cbind(df_DSA_costs_MMS[, "var_name"], counts)
# width of columns in plot (value between 0 and 1)
width <- 0.6
# get data frame in shape for ggplot and geom_rect
df.2 <- df_DSA_costs_MMS %>%
# gather columns Lower_Bound and Upper_Bound into a single column using gather
gather(key = 'type', value = 'output.value', Lower:Upper) %>%
# just reordering columns
select(var_name, type, output.value, diff, base) %>%
# create the columns for geom_rect
mutate(var_name = factor(var_name, levels = v_order_parameters),
ymin = pmin(output.value, base),
ymax = pmax(output.value, base),
xmin = as.numeric(var_name) - width/2,
xmax = as.numeric(var_name) + width/2)
# create plot
# (use scale_x_continuous to change labels in y axis to name of parameters)
p_tornado_costs <- ggplot() +
geom_rect(data = df.2,
aes(ymax = ymax, ymin = ymin, xmax = xmax, xmin = xmin, fill = type)) +
#geom_text(data = eggcounts, aes(y = 1, label = counts), size = 4) +
theme_bw() +
scale_fill_manual(values = c("Upper" = "midnightblue",
"Lower" = "slategray2")) +
theme(axis.title.y = element_blank(), legend.position = 'none', legend.title = element_blank()) +
geom_hline(yintercept = df.2$base) +
scale_x_continuous(breaks = c(1:length(v_order_parameters)),
labels = v_order_parameters) +
xlab("Parameter") + ylab("Incremental Cost") +
coord_flip()
p_tornado_costs
ggsave("Plots/DSA/Modified Model Spec/tornado_costs.png", p_tornado_costs, height = 5, width = 7, dpi = 320)
### QALYs ###
v_order_parameters <- df_DSA_qalys_MMS %>% arrange(diff) %>%
mutate(var_name = factor(x = var_name, levels = var_name)) %>%
select(var_name) %>% unlist() %>% levels()
# width of columns in plot (value between 0 and 1)
width <- 0.6
# get data frame in shape for ggplot and geom_rect
df.2 <- df_DSA_qalys_MMS %>%
# gather columns Lower_Bound and Upper_Bound into a single column using gather
gather(key = 'type', value = 'output.value', Lower:Upper) %>%
# just reordering columns
select(var_name, type, output.value, diff, base) %>%
# create the columns for geom_rect
mutate(var_name = factor(var_name, levels = v_order_parameters),
ymin = pmin(output.value, base),
ymax = pmax(output.value, base),
xmin = as.numeric(var_name) - width/2,
xmax = as.numeric(var_name) + width/2)
# create plot
# (use scale_x_continuous to change labels in y axis to name of parameters)
p_tornado_qalys <- ggplot() +
geom_rect(data = df.2,
aes(ymax = ymax, ymin = ymin, xmax = xmax, xmin = xmin, fill = type)) +
theme_bw() +
scale_fill_manual(values = c("Upper" = "midnightblue",
"Lower" = "slategray2")) +
theme(axis.title.y = element_blank(), legend.position = 'none',
legend.title = element_blank()) +
geom_hline(yintercept = df.2$base) +
scale_x_continuous(breaks = c(1:length(v_order_parameters)),
labels = v_order_parameters) +
xlab("Parameter") + ylab("Incremental QALYs") +
coord_flip()
p_tornado_qalys
ggsave("Plots/DSA/Modified Model Spec/tornado_qalys.png", p_tornado_qalys, height = 5, width = 7, dpi = 320)
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(data.table)
library(formattable)
library(tidyr)
library(RColorBrewer)
## Load DSA output files
# Costs
load(file = "outputs/DSA/Modified Model Specification/df_transitions_costs_MMS.RData")
load(file = "outputs/DSA/Modified Model Specification/df_overdose_costs_MMS.RData")
load(file = "outputs/DSA/Modified Model Specification/df_costs_MMS.RData")
# QALYs
load(file = "outputs/DSA/Modified Model Specification/df_transitions_qalys_MMS.RData")
load(file = "outputs/DSA/Modified Model Specification/df_overdose_qalys_MMS.RData")
load(file = "outputs/DSA/Modified Model Specification/df_qalys_MMS.RData")
## Load deterministic outputs for baseline values
load(file = "outputs/ICER/incremental_det_MMS.RData")
## Load PSA outputs for baseline values
load(file = "outputs/PSA/Modified Model Specification/summary_incremental_PSA_MMS.RData")
# Subset by mean
# Deterministic
base_costs <- df_incremental_MMS$n_inc_costs_TOTAL_life[1]
base_qalys <- df_incremental_MMS$n_inc_qalys_TOTAL_life[1]
# PSA
# tbl_df_PSA_mean <- tbl_df_summary_incremental_MMS %>% select(variable, mean)
# base_costs <- tbl_df_PSA_mean %>% deframe %>% getElement("n_inc_costs_TOTAL_life")
# base_qalys <- tbl_df_PSA_mean %>% deframe %>% getElement("n_inc_qalys_TOTAL_life")
## Combine data frames
# Costs
df_DSA_costs_MMS <- rbind(df_transitions_costs_MMS, df_overdose_costs_MMS, df_costs_MMS) %>%
mutate(base = base_costs) %>%
mutate(diff = ifelse(abs(Upper - Lower) > 0, abs(Upper - Lower), abs(base - Upper)))
# QALYs
df_DSA_qalys_MMS <- rbind(df_transitions_qalys_MMS, df_overdose_qalys_MMS, df_qalys_MMS) %>%
mutate(base = base_qalys) %>%
mutate(diff = ifelse(abs(Upper - Lower) > 0, abs(Upper - Lower), abs(base - Upper)))
#########################
#### Tornado diagram ####
#########################
### Costs ###
v_order_parameters <- df_DSA_costs_MMS %>% arrange(diff) %>%
mutate(var_name = factor(x = var_name, levels = var_name)) %>%
select(var_name) %>% unlist() %>% levels()
v_cost_labels_lower <- c("test1", "test2", "test3", "test4", "test5", "test6", "test7", "test8", "test9", "test10", "test11", "test12", "test13", "test14", "test15", "test16", "test17")
v_cost_labels_upper <- c("test1", "test2", "test3", "test4", "test5", "test6", "test7", "test8", "test9", "test10", "test11", "test12", "test13", "test14", "test15", "test16", "test17")
#eggcounts <- cbind(df_DSA_costs_MMS[, "var_name"], counts)
# width of columns in plot (value between 0 and 1)
width <- 0.6
# get data frame in shape for ggplot and geom_rect
df.2 <- df_DSA_costs_MMS %>%
# gather columns Lower_Bound and Upper_Bound into a single column using gather
gather(key = 'type', value = 'output.value', Lower:Upper) %>%
# just reordering columns
select(var_name, type, output.value, diff, base) %>%
# create the columns for geom_rect
mutate(var_name = factor(var_name, levels = v_order_parameters),
ymin = pmin(output.value, base),
ymax = pmax(output.value, base),
xmin = as.numeric(var_name) - width/2,
xmax = as.numeric(var_name) + width/2)
# create plot
# (use scale_x_continuous to change labels in y axis to name of parameters)
p_tornado_costs <- ggplot() +
geom_rect(data = df.2,
aes(ymax = ymax, ymin = ymin, xmax = xmax, xmin = xmin, fill = type)) +
#geom_text(data = eggcounts, aes(y = 1, label = counts), size = 4) +
theme_bw() +
scale_fill_manual(values = c("Upper" = "midnightblue",
"Lower" = "slategray2")) +
theme(axis.title.y = element_blank(), legend.position = 'none', legend.title = element_blank()) +
geom_hline(yintercept = df.2$base) +
scale_x_continuous(breaks = c(1:length(v_order_parameters)),
labels = v_order_parameters) +
xlab("Parameter") + ylab("Incremental Cost") +
coord_flip()
p_tornado_costs
ggsave("Plots/DSA/Modified Model Spec/tornado_costs.png", p_tornado_costs, height = 5, width = 7, dpi = 320)
### QALYs ###
v_order_parameters <- df_DSA_qalys_MMS %>% arrange(diff) %>%
mutate(var_name = factor(x = var_name, levels = var_name)) %>%
select(var_name) %>% unlist() %>% levels()
# width of columns in plot (value between 0 and 1)
width <- 0.6
# get data frame in shape for ggplot and geom_rect
df.2 <- df_DSA_qalys_MMS %>%
# gather columns Lower_Bound and Upper_Bound into a single column using gather
gather(key = 'type', value = 'output.value', Lower:Upper) %>%
# just reordering columns
select(var_name, type, output.value, diff, base) %>%
# create the columns for geom_rect
mutate(var_name = factor(var_name, levels = v_order_parameters),
ymin = pmin(output.value, base),
ymax = pmax(output.value, base),
xmin = as.numeric(var_name) - width/2,
xmax = as.numeric(var_name) + width/2)
# create plot
# (use scale_x_continuous to change labels in y axis to name of parameters)
p_tornado_qalys <- ggplot() +
geom_rect(data = df.2,
aes(ymax = ymax, ymin = ymin, xmax = xmax, xmin = xmin, fill = type)) +
theme_bw() +
scale_fill_manual(values = c("Upper" = "midnightblue",
"Lower" = "slategray2")) +
theme(axis.title.y = element_blank(), legend.position = 'none',
legend.title = element_blank()) +
geom_hline(yintercept = df.2$base) +
scale_x_continuous(breaks = c(1:length(v_order_parameters)),
labels = v_order_parameters) +
xlab("Parameter") + ylab("Incremental QALYs") +
coord_flip()
p_tornado_qalys
ggsave("Plots/DSA/Modified Model Spec/tornado_qalys.png", p_tornado_qalys, height = 5, width = 7, dpi = 320)
load(file = "outputs/DSA/Modified Model Specification/df_qalys_MMS.RData")
# Subset by mean
# Deterministic
base_costs <- df_incremental_MMS$n_inc_costs_TOTAL_life[1]
base_qalys <- df_incremental_MMS$n_inc_qalys_TOTAL_life[1]
## Combine data frames
# Costs
df_DSA_costs_MMS <- rbind(df_transitions_costs_MMS, df_overdose_costs_MMS, df_costs_MMS) %>%
mutate(base = base_costs) %>%
mutate(diff = ifelse(abs(Upper - Lower) > 0, abs(Upper - Lower), abs(base - Upper)))
# QALYs
df_DSA_qalys_MMS <- rbind(df_transitions_qalys_MMS, df_overdose_qalys_MMS, df_qalys_MMS) %>%
mutate(base = base_qalys) %>%
mutate(diff = ifelse(abs(Upper - Lower) > 0, abs(Upper - Lower), abs(base - Upper)))
View(df_transitions_qalys_MMS)
View(df_qalys_MMS)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(formattable)
#library(xlsx)
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
source("Analysis/00_load_parameters.R")
l_outcomes_validation_MMS  <- outcomes(l_params_all = l_params_all_validation_MMS, v_params_calib = v_calib_post_map)
write.csv(l_outcomes_validation_MMS$m_M_trace,"outputs/trace/Modified Model Specification/trace_BUP.csv", row.names = TRUE)
write.csv(l_outcomes_validation_MMS$m_M_agg_trace,"outputs/trace/Modified Model Specification/trace_BUP.csv", row.names = TRUE)
rm(list = ls()) # to clean the workspace
library(dplyr)    # to manipulate data
library(reshape2) # to transform data
library(ggplot2)  # for nice looking plots
library(tidyverse)
library(formattable)
#library(xlsx)
# Call model setup functions
# To-do: Move into package eventually
source("R/input_parameter_functions.R")
source("R/model_setup_functions.R")
source("R/ICER_functions.R")
# Load parameters
source("Analysis/00_load_parameters.R") # load all model parameters for each scenario + calibrated parameters
### Main deterministic model outputs ###
# Run Markov model and return outputs (using MAP point estimates from posterior distribution for calibrated params)
#l_outcomes_MET <- outcomes(l_params_all = l_params_MET, v_params_calib = v_calib_post_map)
#l_outcomes_BUP <- outcomes(l_params_all = l_params_BUP, v_params_calib = v_calib_post_map)
# Calculate ICERs
#ICER <- ICER(outcomes_comp = l_outcomes_MET, outcomes_int = l_outcomes_BUP)
#### Produce model outputs ####
#### Modified Model Specification ####
l_outcomes_BUP_MMS  <- outcomes(l_params_all = l_params_BUP_MMS, v_params_calib = v_calib_post_map)
l_outcomes_MET_MMS  <- outcomes(l_params_all = l_params_MET_MMS, v_params_calib = v_calib_post_map)
l_outcomes_validation_MMS  <- outcomes(l_params_all = l_params_all_validation_MMS, v_params_calib = v_calib_post_map)
df_outcomes_MMS <- rbind(l_outcomes_BUP_MMS$df_outcomes, l_outcomes_MET_MMS$df_outcomes)
rownames(df_outcomes_MMS) <- c("Early take-home BNX", "Methadone")
# Save output
saveRDS(l_outcomes_BUP_MMS, file = "outputs/outcomes/outcomes_BUP_MMS.RData")
saveRDS(l_outcomes_MET_MMS, file = "outputs/outcomes/outcomes_MET_MMS.RData")
saveRDS(df_outcomes_MMS, file = "outputs/outcomes/outcomes_MMS.RData")
#### Trial Specification ####
# l_outcomes_BUP_TS  <- outcomes(l_params_all = l_params_BUP_TS, v_params_calib = v_calib_post_map)
# l_outcomes_MET_TS  <- outcomes(l_params_all = l_params_MET_TS, v_params_calib = v_calib_post_map)
#
# df_outcomes_TS <- rbind(l_outcomes_BUP_TS$df_outcomes, l_outcomes_MET_TS$df_outcomes)
# rownames(df_outcomes_TS) <- c("Early take-home BNX", "Methadone")
#
# # Save output
# saveRDS(l_outcomes_BUP_TS, file = "outputs/outcomes/outcomes_BUP_TS.RData")
# saveRDS(l_outcomes_MET_TS, file = "outputs/outcomes/outcomes_MET_TS.RData")
# saveRDS(df_outcomes_TS, file = "outputs/outcomes/df_outcomes_TS.RData")
# Generate ICERs
l_ICER_MMS <- ICER(outcomes_comp = l_outcomes_MET_MMS, outcomes_int = l_outcomes_BUP_MMS)
#l_ICER_TS <- ICER(outcomes_comp = l_outcomes_MET_TS, outcomes_int = l_outcomes_BUP_TS)
# Save output
saveRDS(l_ICER_MMS, file = "outputs/outcomes/ICER_MMS.RData")
#saveRDS(l_ICER_TS, file = "outputs/outcomes/ICER_TS.RData")
######################################
#### Modified Model Specification ####
######################################
# Full model trace
write.csv(l_outcomes_MET_MMS$m_M_trace,"outputs/trace/Modified Model Specification/trace_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP_MMS$m_M_trace,"outputs/trace/Modified Model Specification/trace_BUP.csv", row.names = TRUE)
write.csv(l_outcomes_validation_MMS$m_M_trace,"outputs/trace/Modified Model Specification/trace_validation.csv", row.names = TRUE)
# Aggregate trace
write.csv(l_outcomes_MET_MMS$m_M_agg_trace,"outputs/trace/Modified Model Specification/trace_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP_MMS$m_M_agg_trace,"outputs/trace/Modified Model Specification/trace_BUP.csv", row.names = TRUE)
write.csv(l_outcomes_validation_MMS$m_M_agg_trace,"outputs/trace/Modified Model Specification/trace_validation.csv", row.names = TRUE)
# Full model costs
write.csv(l_outcomes_MET_MMS$m_TOTAL_costs_states,"outputs/trace/Modified Model Specification/full_trace_costs_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP_MMS$m_TOTAL_costs_states,"outputs/trace/Modified Model Specification/full_trace_costs_BUP.csv", row.names = TRUE)
#write.csv(l_outcomes_validation_MMS$m_TOTAL_costs_states,"outputs/trace/Modified Model Specification/full_trace_costs_BUP.csv", row.names = TRUE)
# Outcomes
# Disaggregated
df_outcomes_MMS <- rbind(l_outcomes_BUP_MMS$df_outcomes, l_outcomes_MET_MMS$df_outcomes)
rownames(df_outcomes_MMS) <- c("Early take-home BNX", "Methadone")
# ICER
df_icer_MMS <- l_ICER_MMS$df_icer
rownames(df_icer_MMS) <- c("Early take-home BNX vs. Methadone")
# Incremental costs & QALYs
df_incremental_MMS <- l_ICER_MMS$df_incremental
rownames(df_incremental_MMS) <- c("Early take-home BNX vs. Methadone")
# Output
save(df_incremental_MMS,
file = "outputs/ICER/incremental_det_MMS.RData")
write.csv(df_outcomes_MMS,"outputs/main_output_det_MMS.csv", row.names = TRUE)
write.csv(df_icer_MMS,"outputs/ICER/icer_det_MMS.csv", row.names = TRUE)
write.csv(df_incremental_MMS,"outputs/ICER/incremental_det_MMS.csv", row.names = TRUE)
# Raw outputs
# Costs
write.csv(l_outcomes_MET_MMS$v_costs,"outputs/costs/Modified Model Specification/costs_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP_MMS$v_costs,"outputs/costs/Modified Model Specification/costs_BUP.csv", row.names = TRUE)
# Treatment
write.csv(l_outcomes_MET_MMS$m_TX_costs,"outputs/costs/Modified Model Specification/tx_costs_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP_MMS$m_TX_costs,"outputs/costs/Modified Model Specification/tx_costs_BUP.csv", row.names = TRUE)
# Health sector
write.csv(l_outcomes_MET_MMS$m_HRU_costs,"outputs/costs/Modified Model Specification/hru_costs_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP_MMS$m_HRU_costs,"outputs/costs/Modified Model Specification/hru_costs_BUP.csv", row.names = TRUE)
# Crime
write.csv(l_outcomes_MET_MMS$m_crime_costs,"outputs/costs/Modified Model Specification/crime_costs_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP_MMS$m_crime_costs,"outputs/costs/Modified Model Specification/crime_costs_BUP.csv", row.names = TRUE)
# QALYs
write.csv(l_outcomes_MET_MMS$v_qalys,"outputs/qalys/Modified Model Specification/qalys_MET.csv", row.names = TRUE)
write.csv(l_outcomes_BUP_MMS$v_qalys,"outputs/qalys/Modified Model Specification/qalys_BUP.csv", row.names = TRUE)
