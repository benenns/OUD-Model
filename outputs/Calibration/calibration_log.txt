> #### Run IMIS algorithm ####
> l_fit_imis <- IMIS(B = 1000,      # n_samp = B*10 (was 100 incremental sample size at each iteration of IMIS)
+                    B.re = n_resamp,      # "n_resamp" desired posterior sample size
+                    number_k = 100,      # maximum number of iterations in IMIS (originally 10)
+                    D = 0) # originally 0
[1] "10000 likelihoods are evaluated in 156.04 minutes"
[1] "Stage   MargLike   UniquePoint   MaxWeight   ESS"
[1]   1.000   4.734 119.767   0.094  28.911
[1]   2.000   4.688 194.884   0.057  57.056
[1]   3.000   4.631 244.277   0.045  73.286
[1]   4.000   4.572 278.484   0.036  87.573
[1]   5.000   4.545 333.201   0.032 103.247
[1]   6.000   4.518 371.252   0.026 121.838
[1]   7.000   4.472 413.905   0.025 140.119
[1]   8.000   4.502 463.677   0.019 161.419
[1]   9.000   4.466 522.497   0.018 183.815
[1]  10.000   4.477 575.471   0.015 214.196
[1]  11.000   4.457 640.078   0.015 232.958
[1]  12.000   4.467 692.351   0.037 206.120
[1]  13.000   4.494 751.861   0.014 299.418
[1]  14.000   4.530 796.104   0.012 328.814
[1]  15.000   4.537 829.905   0.009 360.808
[1]  16.000   4.517 864.387   0.009 388.703
[1]  17.000   4.505 893.134   0.009 410.633
[1]  18.000   4.505 974.063   0.008 481.171
[1]   19.000    4.506 1009.791    0.007  513.067
[1]   20.000    4.528 1082.890    0.007  582.737
[1]   21.000    4.522 1117.169    0.007  615.447
[1]   22.000    4.523 1185.505    0.005  673.402
[1]   23.000    4.563 1224.662    0.020  571.732
[1]   24.000    4.572 1286.837    0.006  750.396
[1]   25.000    4.573 1370.443    0.005  811.167
[1]   26.000    4.581 1408.195    0.004  845.204
[1]   27.000    4.578 1426.236    0.004  864.113
[1]   28.000    4.581 1487.547    0.005  905.726
[1]   29.000    4.593 1553.747    0.004  955.364
[1]   30.000    4.589 1619.668    0.006 1001.865
[1]   31.000    4.597 1688.593    0.004 1073.878
[1]   32.000    4.598 1746.260    0.004 1144.462
[1]   33.000    4.599 1787.546    0.003 1198.990
[1]   34.000    4.602 1829.906    0.003 1238.866
[1]   35.000    4.606 1895.401    0.003 1311.837
[1]   36.000    4.615 1945.825    0.003 1409.260
[1]   37.000    4.613 1972.547    0.003 1448.576
[1]   38.000    4.615 2021.938    0.003 1493.759
[1]   39.000    4.617 2056.120    0.003 1543.615
[1]   40.000    4.622 2108.609    0.003 1636.689
[1]   41.000    4.627 2144.637    0.002 1698.347
[1]   42.000    4.623 2175.764    0.002 1751.270
[1]   43.000    4.625 2209.064    0.002 1808.952
[1]   44.000    4.624 2230.659    0.002 1854.362
[1]   45.000    4.619 2271.703    0.002 1930.703
[1]   46.000    4.634 2326.828    0.003 2010.994
[1]   47.000    4.628 2361.868    0.002 2090.585
[1]   48.000    4.627 2399.642    0.002 2167.573
[1]   49.000    4.624 2430.706    0.002 2239.700
[1]   50.000    4.625 2440.627    0.002 2264.776
[1]   51.000    4.637 2471.518    0.003 2309.025
[1]   52.000    4.635 2514.764    0.002 2457.897
[1]   53.000    4.639 2554.722    0.002 2540.336
[1]   54.000    4.644 2581.893    0.002 2607.372
[1]   55.000    4.647 2600.754    0.002 2654.762
[1]   56.000    4.643 2641.011    0.002 2748.412
[1]   57.000    4.643 2656.976    0.001 2782.951
[1]   58.000    4.641 2666.156    0.001 2806.266
[1]   59.000    4.638 2685.477    0.001 2856.217
[1]   60.000    4.637 2717.103    0.001 2940.441
[1]   61.000    4.635 2764.165    0.001 3055.599
[1]   62.000    4.636 2782.721    0.002 3088.765
[1]   63.000    4.638 2802.973    0.003 3115.408
[1]   64.000    4.641 2835.875    0.001 3241.573
[1]   65.000    4.642 2860.398    0.001 3308.818
[1]   66.000    4.642 2884.564    0.001 3382.052
[1]   67.000    4.643 2902.517    0.001 3436.073
[1]   68.000    4.648 2912.661    0.002 3437.865
[1]   69.000    4.651 2939.966    0.001 3543.132
[1]   70.000    4.656 2962.343    0.001 3602.389
[1]   71.000    4.655 2999.688    0.001 3730.830
[1]   72.000    4.653 3031.317    0.001 3837.266
[1]   73.000    4.652 3050.146    0.001 3904.821
[1]   74.000    4.657 3086.827    0.001 4035.502
[1]   75.000    4.658 3112.243    0.001 4130.315
[1]   76.000    4.664 3129.178    0.001 4179.356
[1]   77.000    4.665 3142.026    0.001 4225.742
[1]   78.000    4.665 3150.772    0.001 4249.373
[1]   79.000    4.663 3163.379    0.001 4302.068
> ### Obtain posterior
> m_calib_post <- l_fit_imis$resample
> 
> #### Exploring posterior distribution ####
> #### Summary statistics of posterior distribution ####
> ### Compute posterior mean
> v_calib_post_mean <- colMeans(m_calib_post)
> 
> ### Compute posterior median and 95% credible interval
> m_calib_post_95cr <- matrixStats::colQuantiles(m_calib_post, 
+                                                probs = c(0.025, 0.5, 0.975))
> 
> ### Compute posterior values for draw
> v_calib_post      <- exp(log_post(m_calib_post))
> 
> ### Compute maximum-a-posteriori (MAP) as the mode of the sampled values
> v_calib_post_map  <- m_calib_post[which.max(v_calib_post), ]
> 
> # Summary statistics
> df_posterior_summ <- data.frame(
+   Parameter = v_cali_param_names,
+   Mean      = v_calib_post_mean,
+   m_calib_post_95cr,
+   MAP       = v_calib_post_map,
+   check.names = FALSE)
> df_posterior_summ
                                             Parameter         Mean         2.5%          50%        97.5%          MAP
n_TX_OD                    'Overdose rate (treatment)' 0.0010307490 7.057259e-04 0.0010227195 0.0014251522 0.0010325949
n_TXC_OD          'Overdose rate (treatment + opioid)' 0.0050390158 4.036500e-03 0.0050205012 0.0061597429 0.0048349513
n_REL_OD               'Overdose rate (active opioid)' 0.0089529929 7.282964e-03 0.0089074586 0.0109265052 0.0087225374
n_ABS_OD             'Overdose rate (inactive opioid)' 0.0003373058 1.719976e-05 0.0003345465 0.0006647463 0.0006172674
n_TXC_OD_mult  'First month mult (treatment + opioid)' 2.9013233127 6.757520e-01 2.6527236365 6.5018706974 1.9911070130
n_fent_OD_mult                         'Fentanyl mult' 7.3930675978 5.793192e+00 7.3654397414 9.2088795831 7.7631864838
n_fatal_OD                       'Fatal overdose rate' 0.0724216591 5.827768e-02 0.0720748238 0.0897424772 0.0740947610
> 
> ### Save summary statistics of posterior distribution
> ## As .RData
> save(df_posterior_summ, 
+      file = "outputs/Calibration/summary_posterior.RData")
> ## As .csv
> write.csv(df_posterior_summ, 
+           file = "tables/summary_posterior.csv", 
+           row.names = FALSE)